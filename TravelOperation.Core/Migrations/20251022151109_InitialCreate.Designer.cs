// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelOperation.Core.Data;

#nullable disable

namespace TravelOperation.Core.Migrations
{
    [DbContext(typeof(TravelDbContext))]
    [Migration("20251022151109_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.10");

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.AuditLog", b =>
                {
                    b.Property<int>("AuditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkedRecordId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LinkedTable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("NewValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("OldValue")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("AuditId");

                    b.HasIndex("LinkedRecordId");

                    b.HasIndex("LinkedTable");

                    b.HasIndex("Timestamp");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Headcount", b =>
                {
                    b.Property<int>("HeadcountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Period")
                        .HasColumnType("TEXT");

                    b.Property<string>("Site")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsidiary")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("HeadcountId");

                    b.ToTable("Headcount");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Owner", b =>
                {
                    b.Property<int>("OwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CostCenter")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Domain")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("OwnerId");

                    b.ToTable("Owners");

                    b.HasData(
                        new
                        {
                            OwnerId = 1,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(8227),
                            Email = "maayan@company.com",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(8489),
                            Name = "Maayan Chesler"
                        },
                        new
                        {
                            OwnerId = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(8740),
                            Email = "martina@company.com",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(8741),
                            Name = "Martina Poplinsk"
                        });
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Tax", b =>
                {
                    b.Property<int>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("FiscalYear")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("LodgingCap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MealsCap")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subsidiary")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("TaxShield")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TaxId");

                    b.ToTable("TaxRules");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("AmountUSD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("AuthorizationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BookingEndDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookingId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BookingStartDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BookingStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BookingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CabinClassId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<bool>("DataValidation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DocumentUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ExchangeRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<bool>("IsValid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MerchantCategory")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Participants")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ParticipantsValidated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Policy")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("SourceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceTripId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TripId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vendor")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("TransactionId");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("BookingTypeId");

                    b.HasIndex("CabinClassId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Email");

                    b.HasIndex("SourceId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TripId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("City2")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country2")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsManual")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PurposeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TripName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TripTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ValidationStatusId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TripId");

                    b.HasIndex("Email");

                    b.HasIndex("EndDate");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PurposeId");

                    b.HasIndex("StartDate");

                    b.HasIndex("StatusId");

                    b.HasIndex("TripTypeId");

                    b.HasIndex("ValidationStatusId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.BookingStatus", b =>
                {
                    b.Property<int>("BookingStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("BookingStatusId");

                    b.ToTable("BookingStatuses");

                    b.HasData(
                        new
                        {
                            BookingStatusId = 1,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(5790),
                            Emoji = "🔴",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(6039),
                            Name = "Canceled"
                        },
                        new
                        {
                            BookingStatusId = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(6287),
                            Emoji = "🟢",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(6287),
                            Name = "Approved"
                        });
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.BookingType", b =>
                {
                    b.Property<int>("BookingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("BookingTypeId");

                    b.ToTable("BookingTypes");

                    b.HasData(
                        new
                        {
                            BookingTypeId = 1,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(3828),
                            Emoji = "✈️",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(4084),
                            Name = "Flight"
                        },
                        new
                        {
                            BookingTypeId = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(4331),
                            Emoji = "🏨",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(4331),
                            Name = "Hotel"
                        },
                        new
                        {
                            BookingTypeId = 3,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(4333),
                            Emoji = "🚗",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(4333),
                            Name = "Car"
                        },
                        new
                        {
                            BookingTypeId = 4,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(4335),
                            Emoji = "🚆",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(4335),
                            Name = "Train"
                        });
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.CabinClass", b =>
                {
                    b.Property<int>("CabinClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("CabinClassId");

                    b.ToTable("CabinClasses");

                    b.HasData(
                        new
                        {
                            CabinClassId = 1,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(3822),
                            Emoji = "💺",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(4120),
                            Name = "Economy"
                        },
                        new
                        {
                            CabinClassId = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(4402),
                            Emoji = "🛫",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(4402),
                            Name = "Premium economy"
                        },
                        new
                        {
                            CabinClassId = 3,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(4404),
                            Emoji = "🧳",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(4405),
                            Name = "Business"
                        },
                        new
                        {
                            CabinClassId = 4,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(4406),
                            Emoji = "👑",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(4407),
                            Name = "First"
                        });
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8070),
                            Emoji = "✈️",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8407),
                            Name = "Airfare"
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8711),
                            Emoji = "🏨",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8711),
                            Name = "Lodging"
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8713),
                            Emoji = "🚕",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8714),
                            Name = "Transportation"
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8715),
                            Emoji = "📱",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8716),
                            Name = "Communication"
                        },
                        new
                        {
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8717),
                            Emoji = "🍸",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8718),
                            Name = "Client entertainment"
                        },
                        new
                        {
                            CategoryId = 6,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8720),
                            Emoji = "🍽️",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8720),
                            Name = "Meals"
                        },
                        new
                        {
                            CategoryId = 7,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8722),
                            Emoji = "❔",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8722),
                            Name = "Other"
                        },
                        new
                        {
                            CategoryId = 8,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8724),
                            Emoji = "❓",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 949, DateTimeKind.Utc).AddTicks(8724),
                            Name = "Non-travel"
                        });
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.Purpose", b =>
                {
                    b.Property<int>("PurposeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("PurposeId");

                    b.ToTable("Purposes");

                    b.HasData(
                        new
                        {
                            PurposeId = 1,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(1365),
                            Emoji = "💼",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(1667),
                            Name = "Business trip"
                        },
                        new
                        {
                            PurposeId = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(2014),
                            Emoji = "🎓",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(2015),
                            Name = "Onboarding"
                        },
                        new
                        {
                            PurposeId = 3,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(2017),
                            Emoji = "🏖️",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(2018),
                            Name = "Company trip"
                        },
                        new
                        {
                            PurposeId = 4,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(2019),
                            Emoji = "🛡️",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(2020),
                            Name = "BCP"
                        });
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.Source", b =>
                {
                    b.Property<int>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("SourceId");

                    b.ToTable("Sources");

                    b.HasData(
                        new
                        {
                            SourceId = 1,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 948, DateTimeKind.Utc).AddTicks(8355),
                            Emoji = "🧳",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 948, DateTimeKind.Utc).AddTicks(8696),
                            Name = "Navan"
                        },
                        new
                        {
                            SourceId = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 948, DateTimeKind.Utc).AddTicks(9000),
                            Emoji = "👤",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 948, DateTimeKind.Utc).AddTicks(9001),
                            Name = "Agent"
                        },
                        new
                        {
                            SourceId = 3,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 948, DateTimeKind.Utc).AddTicks(9003),
                            Emoji = "✏️",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 948, DateTimeKind.Utc).AddTicks(9004),
                            Name = "Manual"
                        });
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(8693),
                            Emoji = "🔴",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(8982),
                            Name = "Canceled"
                        },
                        new
                        {
                            StatusId = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(9415),
                            Emoji = "⚪",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(9416),
                            Name = "Upcoming"
                        },
                        new
                        {
                            StatusId = 3,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(9418),
                            Emoji = "🔵",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(9418),
                            Name = "Ongoing"
                        },
                        new
                        {
                            StatusId = 4,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(9420),
                            Emoji = "🟢",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(9420),
                            Name = "Completed"
                        });
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.TripType", b =>
                {
                    b.Property<int>("TripTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("TripTypeId");

                    b.ToTable("TripTypes");

                    b.HasData(
                        new
                        {
                            TripTypeId = 1,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(6387),
                            Emoji = "🏠",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(6686),
                            Name = "Domestic"
                        },
                        new
                        {
                            TripTypeId = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(6972),
                            Emoji = "🌍",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(6973),
                            Name = "International"
                        },
                        new
                        {
                            TripTypeId = 3,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(6975),
                            Emoji = "📍",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 950, DateTimeKind.Utc).AddTicks(6976),
                            Name = "Local"
                        });
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.ValidationStatus", b =>
                {
                    b.Property<int>("ValidationStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("ValidationStatusId");

                    b.ToTable("ValidationStatuses");

                    b.HasData(
                        new
                        {
                            ValidationStatusId = 1,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(1307),
                            Emoji = "⚪",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(1606),
                            Name = "Not ready to validate"
                        },
                        new
                        {
                            ValidationStatusId = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(1892),
                            Emoji = "🟡",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(1893),
                            Name = "Ready to validate"
                        },
                        new
                        {
                            ValidationStatusId = 3,
                            CreatedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(1894),
                            Emoji = "🟢",
                            ModifiedAt = new DateTime(2025, 10, 22, 15, 11, 8, 951, DateTimeKind.Utc).AddTicks(1895),
                            Name = "Validated"
                        });
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.City", b =>
                {
                    b.HasOne("TravelOperation.Core.Models.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Transaction", b =>
                {
                    b.HasOne("TravelOperation.Core.Models.Lookup.BookingStatus", "BookingStatus")
                        .WithMany()
                        .HasForeignKey("BookingStatusId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TravelOperation.Core.Models.Lookup.BookingType", "BookingType")
                        .WithMany()
                        .HasForeignKey("BookingTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TravelOperation.Core.Models.Lookup.CabinClass", "CabinClass")
                        .WithMany()
                        .HasForeignKey("CabinClassId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TravelOperation.Core.Models.Lookup.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelOperation.Core.Models.Lookup.Source", "Source")
                        .WithMany("Transactions")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelOperation.Core.Models.Entities.Trip", "Trip")
                        .WithMany("Transactions")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BookingStatus");

                    b.Navigation("BookingType");

                    b.Navigation("CabinClass");

                    b.Navigation("Category");

                    b.Navigation("Source");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Trip", b =>
                {
                    b.HasOne("TravelOperation.Core.Models.Entities.Owner", "Owner")
                        .WithMany("Trips")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelOperation.Core.Models.Lookup.Purpose", "Purpose")
                        .WithMany("Trips")
                        .HasForeignKey("PurposeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelOperation.Core.Models.Lookup.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelOperation.Core.Models.Lookup.TripType", "TripType")
                        .WithMany()
                        .HasForeignKey("TripTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TravelOperation.Core.Models.Lookup.ValidationStatus", "ValidationStatus")
                        .WithMany()
                        .HasForeignKey("ValidationStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Purpose");

                    b.Navigation("Status");

                    b.Navigation("TripType");

                    b.Navigation("ValidationStatus");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Owner", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Entities.Trip", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.Purpose", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("TravelOperation.Core.Models.Lookup.Source", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
