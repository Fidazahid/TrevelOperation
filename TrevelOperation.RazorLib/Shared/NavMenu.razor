@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Routing
@implements IDisposable

<div class="h-full w-72 sidebar-nav text-white shadow-lg min-h-screen" style="background: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%) !important; color: white !important; min-height: 100vh;">
    <div class="p-4">
        <a href="/" class="text-2xl font-bold block mb-4 text-center link link-hover" style="color: white !important;">
            ✈️ Travel Expense
        </a>
    </div>
    <ul class="menu p-4 space-y-1 text-sm" style="color: white !important; background: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%) !important;">
        @foreach (var item in navItems)
        {
            @if (item.IsSection)
            {
                <li class="menu-title text-xs font-semibold mt-4 mb-2" style="color: rgba(255, 255, 255, 0.7);">
                    <span>@item.Label</span>
                </li>
            }
            else
            {
                var isCurrentLocation = IsCurrentLocation(item.Href);
                var menuItemClass = $"menu-item {(isCurrentLocation ? "active" : "")}";
                var linkClass = $"flex items-center space-x-3 rounded-lg text-sm py-2 transition-colors duration-200 {(isCurrentLocation ? "active" : "")}";
                var linkStyle = isCurrentLocation 
                    ? "color: white; background-color: rgba(255, 255, 255, 0.2);" 
                    : "color: rgba(255, 255, 255, 0.9);";
                
                <li class="@menuItemClass" style="background: linear-gradient(180deg, rgb(5, 39, 103) 0%">
                    <NavLink href="@item.Href" Match="@item.Match"
                             class="@linkClass"
                             style="@linkStyle"
                             ActiveClass="active"
                             @onclick="@(() => HandleNavClick(item.Href))">
                        <span class="text-lg w-5 text-center">@item.Icon</span>
                        <span style="color: inherit;">@item.Label</span>
                    </NavLink>
                </li>
            }
        }
    </ul>
</div>

@code {
    private string currentLocation = "";
    
    private List<NavItem> navItems = new List<NavItem>
    {
        // Dashboard
        new NavItem { Href = "/", Icon = "📊", Label = "Dashboard", Match = NavLinkMatch.All },
        
        // Reports Section
        new NavItem { IsSection = true, Label = "REPORTS" },
        new NavItem { Href = "/transactions", Icon = "💳", Label = "Transactions" },
        new NavItem { Href = "/trips", Icon = "🧳", Label = "Trips" },
        new NavItem { Href = "/create-trip", Icon = "➕", Label = "Create manual trip" },
        new NavItem { Href = "/trip-suggestions", Icon = "💡", Label = "Trip suggestions" },
        new NavItem { Href = "/trip-validation", Icon = "✅", Label = "Trip validation" },
        new NavItem { Href = "/travel-spend", Icon = "💰", Label = "Travel spend" },
        
        // Data Integrity Section  
        new NavItem { IsSection = true, Label = "DATA INTEGRITY" },
        new NavItem { Href = "/airfare-control", Icon = "✈️", Label = "Airfare control" },
        new NavItem { Href = "/meals-control", Icon = "🍽️", Label = "Meals control" },
        new NavItem { Href = "/lodging-control", Icon = "🏨", Label = "Lodging control" },
        new NavItem { Href = "/client-entertainment-control", Icon = "🍸", Label = "Client entertainment" },
        new NavItem { Href = "/other-control", Icon = "❔", Label = "Other control" },
        new NavItem { Href = "/missing-documentation-control", Icon = "📄", Label = "Missing documentation" },
        new NavItem { Href = "/data-integrity/matching", Icon = "🔗", Label = "Matching engine" },
        new NavItem { Href = "/data-integrity/split-engine", Icon = "✂️", Label = "Split engine" },
        
        // Settings Section
        new NavItem { IsSection = true, Label = "SETTINGS" },
        new NavItem { Href = "/settings/lists", Icon = "📝", Label = "Manage lists" },
        new NavItem { Href = "/settings/csv-import", Icon = "📤", Label = "CSV import" },
        new NavItem { Href = "/settings/transformation-rules", Icon = "🔄", Label = "Transformation rules" },
        new NavItem { Href = "/settings/countries", Icon = "🌍", Label = "Countries & cities" },
        new NavItem { Href = "/settings/rules", Icon = "⚙️", Label = "Quick rules" },
        new NavItem { Href = "/settings/tax", Icon = "💼", Label = "Tax settings" },
        new NavItem { Href = "/settings/owners", Icon = "👥", Label = "Owners" },
        new NavItem { Href = "/audit-log", Icon = "📋", Label = "Audit log" }
    };

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        currentLocation = NavigationManager.Uri;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentLocation = e.Location;
        StateHasChanged();
    }

    private void HandleNavClick(string href)
    {
        // Force state update to ensure proper highlighting
        StateHasChanged();
    }

    private bool IsCurrentLocation(string href)
    {
        var currentUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        
        // Handle root path
        if (href == "/" && (currentUri == "" || currentUri == "/"))
        {
            return true;
        }
        
        // Handle other paths
        if (href != "/" && currentUri.StartsWith(href.TrimStart('/'), StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        
        return false;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public class NavItem
    {
        public string Href { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Label { get; set; } = "";
        public NavLinkMatch Match { get; set; } = NavLinkMatch.Prefix;
        public bool IsSection { get; set; } = false;
    }
}