@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Routing
@implements IDisposable

<div class="w-72 text-white shadow-lg flex flex-col"
     style="background: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%) fixed;
            color: white !important;
            height: 100vh;
            overflow-y: auto;">

    <div class="p-4 flex-shrink-0">
        <a href="/" class="text-2xl font-bold block mb-4 text-center link link-hover" style="color: white !important;">
            ✈️ Travel Expense
        </a>
    </div>

    <ul class="menu p-4 space-y-1 text-sm flex-1"
        style="color: white !important; background: transparent !important;">
        @if (menuItems != null)
        {
            @foreach (var item in menuItems)
            {
                @if (item.IsSection)
                {
                    <li class="menu-title text-xs font-semibold mt-4 mb-2"
                        style="color: rgba(255, 255, 255, 0.7);">
                        <span>@item.Label</span>
                    </li>
                }
                else
                {
                    var isCurrentLocation = IsCurrentLocation(item.Href);
                    var menuItemClass = $"menu-item {(isCurrentLocation ? "active" : "")}";
                    var linkClass = $"flex items-center space-x-3 rounded-lg text-sm py-2 transition-colors duration-200 {(isCurrentLocation ? "active" : "")}";
                    var linkStyle = isCurrentLocation
                    ? "color: white; background-color: rgba(255, 255, 255, 0.2);"
                    : "color: rgba(255, 255, 255, 0.9);";

                    <li class="@menuItemClass">
                        <NavLink href="@item.Href" Match="NavLinkMatch.Prefix"
                                 class="@linkClass"
                                 style="@linkStyle"
                                 ActiveClass="active"
                                 @onclick="@(() => HandleNavClick(item.Href))">
                            <span class="text-lg w-5 text-center">@item.Icon</span>
                            <span style="color: inherit;">@item.Label</span>
                        </NavLink>
                    </li>
                }
            }
        }
        else
        {
            <li class="menu-title text-xs font-semibold mt-4 mb-2" style="color: rgba(255, 255, 255, 0.7);">
                <span>Loading...</span>
            </li>
        }
    </ul>
</div>

@code {
    private string currentLocation = "";
    private IEnumerable<NavMenuItem>? menuItems;
    
    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        currentLocation = NavigationManager.Uri;
        
        // Load menu items based on user role
        menuItems = await GetMenuItemsForCurrentUserAsync();
    }

    private async Task<IEnumerable<NavMenuItem>> GetMenuItemsForCurrentUserAsync()
    {
        // For now, assume admin user until authentication is implemented
        var userRole = "admin";

        var items = new List<NavMenuItem>();

        // Dashboard (all users)
        items.Add(new NavMenuItem { Icon = "🏠", Label = "Dashboard", Href = "/" });

        // Reports Section - Employee and up
        if (userRole is "employee" or "manager" or "finance" or "admin")
        {
            items.Add(new NavMenuItem { IsSection = true, Label = "REPORTS" });
            items.Add(new NavMenuItem { Icon = "💳", Label = "Transactions", Href = "/transactions" });
            items.Add(new NavMenuItem { Icon = "✈️", Label = "Trips", Href = "/trips" });
            
            if (userRole is "manager" or "finance" or "admin")
            {
                items.Add(new NavMenuItem { Icon = "📊", Label = "Travel Spend", Href = "/reports/travel-spend" });
            }
        }

        // Trip Management - Employee and up
        if (userRole is "employee" or "manager" or "finance" or "admin")
        {
            items.Add(new NavMenuItem { IsSection = true, Label = "TRIP MANAGEMENT" });
            items.Add(new NavMenuItem { Icon = "➕", Label = "Create Manual Trip", Href = "/trips/create" });
            items.Add(new NavMenuItem { Icon = "🔍", Label = "Trip Suggestions", Href = "/trips/suggestions" });
            
            if (userRole is "manager" or "finance" or "admin")
            {
                items.Add(new NavMenuItem { Icon = "✅", Label = "Trip Validation", Href = "/trips/validation" });
            }
        }

        // Data Integrity - Finance and Admin only
        if (userRole is "finance" or "admin")
        {
            items.Add(new NavMenuItem { IsSection = true, Label = "DATA INTEGRITY" });
            items.Add(new NavMenuItem { Icon = "🛡️", Label = "Controls", Href = "/data-integrity/controls" });
            items.Add(new NavMenuItem { Icon = "🔗", Label = "Matching Engine", Href = "/data-integrity/matching" });
            items.Add(new NavMenuItem { Icon = "✂️", Label = "Split Engine", Href = "/data-integrity/split" });
        }

        // Settings - Finance and Admin only
        if (userRole is "finance" or "admin")
        {
            items.Add(new NavMenuItem { IsSection = true, Label = "SETTINGS" });
            items.Add(new NavMenuItem { Icon = "📋", Label = "Lists", Href = "/settings/lists" });
            items.Add(new NavMenuItem { Icon = "🌍", Label = "Countries & Cities", Href = "/settings/countries-cities" });
            items.Add(new NavMenuItem { Icon = "👥", Label = "Owners", Href = "/settings/owners" });
            items.Add(new NavMenuItem { Icon = "💰", Label = "Tax Settings", Href = "/settings/tax" });
            items.Add(new NavMenuItem { Icon = "📈", Label = "Headcount", Href = "/settings/headcount" });
            
            if (userRole == "admin")
            {
                items.Add(new NavMenuItem { Icon = "⚙️", Label = "System Settings", Href = "/settings/system" });
                items.Add(new NavMenuItem { Icon = "📜", Label = "Audit Log", Href = "/settings/audit" });
            }
        }

        // User Account (all users)
        items.Add(new NavMenuItem { IsSection = true, Label = "ACCOUNT" });
        items.Add(new NavMenuItem { Icon = "👤", Label = "Profile", Href = "/profile" });
        items.Add(new NavMenuItem { Icon = "🚪", Label = "Logout", Href = "/logout" });

        return items;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentLocation = e.Location;
        StateHasChanged();
    }

    private void HandleNavClick(string href)
    {
        // Force state update to ensure proper highlighting
        StateHasChanged();
    }

    private bool IsCurrentLocation(string href)
    {
        var currentUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        
        // Handle root path
        if (href == "/" && (currentUri == "" || currentUri == "/"))
        {
            return true;
        }
        
        // Handle other paths
        if (href != "/" && currentUri.StartsWith(href.TrimStart('/'), StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        
        return false;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    public class NavMenuItem
    {
        public string Icon { get; set; } = "";
        public string Label { get; set; } = "";
        public string Href { get; set; } = "";
        public bool IsSection { get; set; } = false;
    }
}
