@using Microsoft.JSInterop
@using TrevelOperation.RazorLib.Theme
@inject IJSRuntime JSRuntime

<div class="navbar bg-base-100 border-b border-base-300 h-16">
    <div class="flex-1">
        <h2 class="text-lg font-semibold">@PageTitle</h2>
    </div>
    <div class="flex-none">
        <!-- Theme Toggle Button -->
        <div class="relative" @onclick="ToggleTheme">
            <button class="btn btn-ghost btn-circle" type="button" aria-label="Toggle theme">
                <div class="theme-toggle-dark @(IsDarkMode ? "active" : "")" aria-hidden="true">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
                    </svg>
                </div>
                <div class="theme-toggle-light @(IsDarkMode ? "" : "active")" aria-hidden="true">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="5"></circle>
                        <line x1="12" y1="1" x2="12" y2="3"></line>
                        <line x1="12" y1="21" x2="12" y2="23"></line>
                        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
                        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
                        <line x1="1" y1="12" x2="3" y2="12"></line>
                        <line x1="21" y1="12" x2="23" y2="12"></line>
                        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
                        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
                    </svg>
                </div>
            </button>
        </div>
    </div>
</div>

<style>
    .theme-toggle-btn {
    background: transparent;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    position: relative;
    height: 40px;
    width: 40px;
    border-radius: 50%;
    color: var(--theme-toggle-icon-color, currentColor);
    transition: background-color 0.3s;
    }

    .theme-toggle-btn:hover {
    background-color: rgba(255, 255, 255, 0.1);
    }

    .theme-toggle-dark, .theme-toggle-light {
    position: absolute;
    transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1), opacity 0.5s cubic-bezier(0.23, 1, 0.32, 1);
    transform-origin: center;
    }

    .theme-toggle-dark {
    opacity: 0;
    transform: scale(0.5) rotate(-45deg);
    }

    .theme-toggle-light {
    opacity: 0;
    transform: scale(0.5) rotate(45deg);
    }

    .theme-toggle-dark.active {
    opacity: 1;
    transform: scale(1) rotate(0);
    }

    .theme-toggle-light.active {
    opacity: 1;
    transform: scale(1) rotate(0);
    }
</style>

@code {
    [Parameter]
    public string PageTitle { get; set; } = "Dashboard";

    [CascadingParameter]
    private ThemeProvider? ThemeProvider { get; set; }

    private bool IsDarkMode { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (ThemeProvider != null)
        {
            var currentTheme = await ThemeProvider.GetCurrentTheme();
            IsDarkMode = currentTheme == "dark";
        }
    }

    private async Task ToggleTheme()
    {
        if (ThemeProvider != null)
        {
            await ThemeProvider.ToggleTheme();
            IsDarkMode = !IsDarkMode;
        }
        else
        {
            IsDarkMode = !IsDarkMode;
            await JSRuntime.InvokeVoidAsync("themeManager.toggleTheme");
        }
    }
}