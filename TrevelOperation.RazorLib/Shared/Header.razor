@using Microsoft.JSInterop
@using TrevelOperation.RazorLib.Theme
@using TravelOperation.Core.Services
@inject IJSRuntime JSRuntime
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

<div class="navbar bg-white border-b border-base-300 h-16">
    <div class="flex-1">
        <h2 class="text-lg font-semibold">@PageTitle</h2>
    </div>
    <div class="flex-none gap-2">
        <!-- User Avatar Dropdown -->
        <div class="dropdown dropdown-end">
            @if (!string.IsNullOrEmpty(currentUserEmail))
            {
                <label tabindex="0" class="avatar placeholder cursor-pointer">
                    <div class="bg-primary text-primary-content rounded-full w-10 hover:ring-2 hover:ring-primary hover:ring-offset-2 transition-all">
                        <span class="text-sm font-semibold">@GetInitials(currentUserEmail)</span>
                    </div>
                </label>
                <ul tabindex="0" class="dropdown-content menu p-2 shadow-lg bg-base-200 rounded-box w-48 mt-2">
                    <li>
                        <a href="/profile" class="flex items-center gap-2 px-3 py-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                <circle cx="12" cy="7" r="4"></circle>
                            </svg>
                            Profile
                        </a>
                    </li>
                    <li>
                        <a @onclick="HandleLogout" @onclick:preventDefault="true" class="flex items-center gap-2 px-3 py-2 text-error">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                                <polyline points="16,17 21,12 16,7"></polyline>
                                <line x1="21" y1="12" x2="9" y2="12"></line>
                            </svg>
                            Logout
                        </a>
                    </li>
                </ul>
            }
        </div>
    </div>
</div>

<style>
    .theme-toggle-btn {
    background: transparent;
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    position: relative;
    height: 40px;
    width: 40px;
    border-radius: 50%;
    color: var(--theme-toggle-icon-color, currentColor);
    transition: background-color 0.3s;
    }

    .theme-toggle-btn:hover {
    background-color: rgba(255, 255, 255, 0.1);
    }

    .theme-toggle-dark, .theme-toggle-light {
    position: absolute;
    transition: transform 0.5s cubic-bezier(0.23, 1, 0.32, 1), opacity 0.5s cubic-bezier(0.23, 1, 0.32, 1);
    transform-origin: center;
    }

    .theme-toggle-dark {
    opacity: 0;
    transform: scale(0.5) rotate(-45deg);
    }

    .theme-toggle-light {
    opacity: 0;
    transform: scale(0.5) rotate(45deg);
    }

    .theme-toggle-dark.active {
    opacity: 1;
    transform: scale(1) rotate(0);
    }

    .theme-toggle-light.active {
    opacity: 1;
    transform: scale(1) rotate(0);
    }
</style>

@code {
    [Parameter]
    public string PageTitle { get; set; } = "Dashboard";

    [CascadingParameter]
    private ThemeProvider? ThemeProvider { get; set; }

    private bool IsDarkMode { get; set; } = true;
    private string currentUserEmail = string.Empty;
    private string currentUserRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (ThemeProvider != null)
        {
            var currentTheme = await ThemeProvider.GetCurrentTheme();
            IsDarkMode = currentTheme == "dark";
        }

        // Load current user information
        await LoadUserInfo();
    }

    private async Task LoadUserInfo()
    {
        try
        {
            currentUserEmail = await AuthService.GetCurrentUserEmailAsync() ?? string.Empty;
            currentUserRole = await AuthService.GetCurrentUserRoleAsync() ?? string.Empty;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user info: {ex.Message}");
        }
    }

    private async Task ToggleTheme()
    {
        if (ThemeProvider != null)
        {
            await ThemeProvider.ToggleTheme();
            IsDarkMode = !IsDarkMode;
        }
        else
        {
            IsDarkMode = !IsDarkMode;
            await JSRuntime.InvokeVoidAsync("themeManager.toggleTheme");
        }
    }

    private async Task HandleLogout()
    {
        try
        {
            await AuthService.LogoutAsync();
            Navigation.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout error: {ex.Message}");
        }
    }

    private string GetDisplayName(string email)
    {
        if (string.IsNullOrEmpty(email)) return "User";
        
        var name = email.Split('@')[0];
        return string.Join(" ", name.Split('.')
            .Select(part => char.ToUpper(part[0]) + part.Substring(1).ToLower()));
    }

    private string GetInitials(string email)
    {
        if (string.IsNullOrEmpty(email)) return "U";
        
        var nameParts = email.Split('@')[0].Split('.');
        if (nameParts.Length >= 2)
        {
            return $"{char.ToUpper(nameParts[0][0])}{char.ToUpper(nameParts[1][0])}";
        }
        return char.ToUpper(email[0]).ToString();
    }

    private string GetRoleDisplay(string role)
    {
        return role switch
        {
            "Finance" => "👔 Finance Manager",
            "Owner" => "👨‍💼 Department Owner", 
            "Employee" => "👤 Employee",
            _ => "User"
        };
    }
}