@page "/"
@using TravelOperation.Core.Services
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation
@implements IDisposable

@if (isLoading)
{
    <div class="loading-screen">
        <div class="loading-content">
            <div class="loading-spinner"></div>
            <h2>Loading...</h2>
        </div>
    </div>
}

<style>
    .loading-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 50%, #1e40af 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .loading-content {
        text-align: center;
        color: white;
    }

    .loading-content h2 {
        margin-top: 1rem;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-top: 4px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

@code {
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine("Index: Checking authentication on app start");
            
            // Small delay to prevent flicker
            await Task.Delay(100);
            
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            Console.WriteLine($"Index: Authentication result = {isAuthenticated}");
            
            if (isAuthenticated)
            {
                Console.WriteLine("Index: User authenticated, navigating to dashboard");
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                Console.WriteLine("Index: User not authenticated, navigating to login");
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Index: Error during authentication check: {ex.Message}");
            // Default to login on error
            Navigation.NavigateTo("/login");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        // Nothing to dispose
    }
}