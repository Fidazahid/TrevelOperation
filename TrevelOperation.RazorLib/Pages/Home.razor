@page "/dashboard"
@using TravelOperation.Core.Services.Interfaces
@using TravelOperation.Core.Models.Entities
@inject ITransactionService TransactionService
@inject ITripService TripService
@inject IAuditService AuditService
@inject NavigationManager NavigationManager

<PageTitle>Dashboard - Travel Expense Management</PageTitle>

<div class="p-2">
    <div class="mb-2">
        <h1 class="text-3xl font-bold text-base-content mb-2">Travel expense dashboard</h1>
        <p class="text-base-content/70">Overview of travel expenses, trips, and compliance status</p>
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="stat bg-primary text-primary-content rounded-xl shadow-lg">
            <div class="stat-figure text-2xl opacity-80">💳</div>
            <div class="stat-title text-primary-content/80">Total transactions</div>
            <div class="stat-value">@totalTransactions</div>
            <div class="stat-desc text-primary-content/60">@unlinkedTransactions unlinked</div>
        </div>

        <div class="stat bg-secondary text-secondary-content rounded-xl shadow-lg">
            <div class="stat-figure text-2xl opacity-80">🧳</div>
            <div class="stat-title text-secondary-content/80">Active trips</div>
            <div class="stat-value">@activeTrips</div>
            <div class="stat-desc text-secondary-content/60">@tripsNeedingValidation need validation</div>
        </div>

        <div class="stat bg-accent text-accent-content rounded-xl shadow-lg">
            <div class="stat-figure text-2xl opacity-80">💰</div>
            <div class="stat-title text-accent-content/80">Total spend (USD)</div>
            <div class="stat-value">$@totalSpend.ToString("N0")</div>
            <div class="stat-desc text-accent-content/60">This fiscal year</div>
        </div>

        <div class="stat bg-warning text-warning-content rounded-xl shadow-lg">
            <div class="stat-figure text-2xl opacity-80">⚠️</div>
            <div class="stat-title text-warning-content/80">Issues requiring attention</div>
            <div class="stat-value">@issuesCount</div>
            <div class="stat-desc text-warning-content/60">Validation needed</div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <div class="card bg-base-200 shadow-xl">
            <div class="card-body">
                <h2 class="card-title">📊 Quick actions</h2>
                <div class="grid grid-cols-2 gap-4 mt-4">
                    <a href="/transactions" class="btn btn-outline btn-primary">
                        💳 View transactions
                    </a>
                    <a href="/trips/create" class="btn btn-outline btn-secondary">
                        ➕ Create trip
                    </a>
                    <a href="/airfare-control" class="btn btn-outline btn-accent">
                        ✈️ Airfare control
                    </a>
                    <a href="/meals-control" class="btn btn-outline btn-warning">
                        🍽️ Meals control
                    </a>
                </div>
            </div>
        </div>

        <div class="card bg-base-200 shadow-xl">
            <div class="card-body">
                <h2 class="card-title">🚨 Issues requiring attention</h2>
                <div class="space-y-3 mt-4">
                    <div class="alert alert-warning">
                        <span class="text-sm">
                            <strong>@highValueMeals</strong> high-value meals need review
                        </span>
                    </div>
                    <div class="alert alert-info">
                        <span class="text-sm">
                            <strong>@airfareWithoutCabin</strong> airfare transactions missing cabin class
                        </span>
                    </div>
                    <div class="alert alert-error">
                        <span class="text-sm">
                            <strong>@missingDocuments</strong> transactions missing documentation
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Activity -->
    <div class="card bg-base-200 shadow-xl">
        <div class="card-body">
            <h2 class="card-title">📅 Recent activity</h2>
            
            @if (isLoading)
            {
                <div class="flex justify-center py-8">
                    <span class="loading loading-spinner loading-lg"></span>
                </div>
            }
            else if (recentActivity.Any())
            {
                <div class="overflow-x-auto">
                    <table class="table table-zebra w-full">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Action</th>
                                <th>Description</th>
                                <th>User</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in recentActivity)
                            {
                                <tr>
                                    <td>@log.Timestamp.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td><span class="badge @GetActionBadgeClass(log.Action)">@log.Action</span></td>
                                    <td>
                                        <span class="text-sm">
                                            @log.Action on @log.LinkedTable
                                            @if (!string.IsNullOrEmpty(log.LinkedRecordId))
                                            {
                                                <span class="text-gray-500">(@log.LinkedRecordId)</span>
                                            }
                                        </span>
                                    </td>
                                    <td>@log.UserId</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                
                <div class="mt-4 text-center">
                    <a href="/audit-log" class="btn btn-sm btn-outline">
                        View all activity
                    </a>
                </div>
            }
            else
            {
                <div class="text-center py-8 text-gray-500">
                    <p>No recent activity</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private int totalTransactions = 0;
    private int unlinkedTransactions = 0;
    private int activeTrips = 0;
    private int tripsNeedingValidation = 0;
    private decimal totalSpend = 0;
    private int issuesCount = 0;
    private int highValueMeals = 0;
    private int airfareWithoutCabin = 0;
    private int missingDocuments = 0;
    private bool isLoading = true;
    private List<TravelOperation.Core.Models.Entities.AuditLog> recentActivity = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardDataAsync();
    }

    private async Task LoadDashboardDataAsync()
    {
        isLoading = true;
        try
        {
            // Load all data in parallel for better performance
            await Task.WhenAll(
                LoadTransactionStatsAsync(),
                LoadTripStatsAsync(),
                LoadIssuesStatsAsync(),
                LoadRecentActivityAsync()
            );
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadTransactionStatsAsync()
    {
        try
        {
            var allTransactions = await TransactionService.GetAllTransactionsAsync();
            totalTransactions = allTransactions.Count();
            unlinkedTransactions = allTransactions.Count(t => t.TripId == null);
            
            // Calculate total spend for this fiscal year
            var currentYear = DateTime.Now.Year;
            totalSpend = allTransactions
                .Where(t => t.TransactionDate.Year == currentYear)
                .Sum(t => t.AmountUSD ?? 0);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transaction stats: {ex.Message}");
        }
    }

    private async Task LoadTripStatsAsync()
    {
        try
        {
            var allTrips = await TripService.GetAllTripsAsync();
            
            // Active trips: Upcoming or Ongoing
            activeTrips = allTrips.Count(t => 
                t.Status?.Name == "⚪ Upcoming" || 
                t.Status?.Name == "🔵 Ongoing");
            
            // Trips needing validation
            tripsNeedingValidation = allTrips.Count(t => 
                t.ValidationStatus?.Name == "🟡 Ready to validate");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading trip stats: {ex.Message}");
        }
    }

    private async Task LoadIssuesStatsAsync()
    {
        try
        {
            // High value meals
            var mealsTransactions = await TransactionService.GetHighValueMealsAsync(80);
            highValueMeals = mealsTransactions.Count();

            // Airfare without cabin class
            var airfareTransactions = await TransactionService.GetAirfareWithoutCabinClassAsync();
            airfareWithoutCabin = airfareTransactions.Count();

            // Missing documents
            var transactionsWithoutDocs = await TransactionService.GetTransactionsWithoutDocumentationAsync();
            missingDocuments = transactionsWithoutDocs.Count();

            // Total issues
            issuesCount = highValueMeals + airfareWithoutCabin + missingDocuments;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading issues stats: {ex.Message}");
        }
    }

    private async Task LoadRecentActivityAsync()
    {
        try
        {
            var allLogs = await AuditService.GetAllAuditLogsAsync();
            recentActivity = allLogs
                .OrderByDescending(a => a.Timestamp)
                .Take(5)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recent activity: {ex.Message}");
            recentActivity = new List<TravelOperation.Core.Models.Entities.AuditLog>();
        }
    }

    private string GetActionBadgeClass(string action)
    {
        return action.ToLower() switch
        {
            "create" => "badge-success",
            "edit" => "badge-warning",
            "delete" => "badge-error",
            "link" => "badge-info",
            "validate" => "badge-primary",
            _ => "badge-ghost"
        };
    }
}