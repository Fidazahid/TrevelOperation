@page "/trips"
@using TravelOperation.Core.Models.Entities
@using TravelOperation.Core.Services.Interfaces
@inject ITripService TripService
@inject ILookupService LookupService
@inject IJSRuntime JSRuntime

<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-900">Trips</h1>
        <div class="flex gap-2">
            <button class="btn btn-primary" @onclick="OpenCreateModal">
                <i class="fas fa-plus mr-2"></i>New Trip
            </button>
            <button class="btn btn-secondary" @onclick="SuggestTrips">
                <i class="fas fa-magic mr-2"></i>Suggest Trips
            </button>
            <button class="btn btn-outline" @onclick="ExportData">
                <i class="fas fa-download mr-2"></i>Export
            </button>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-sm mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" placeholder="Trip name, email, destination..." 
                           class="input input-bordered" @bind="searchTerm" @onkeyup="FilterTrips" />
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Purpose</span>
                    </label>
                    <select class="select select-bordered" @bind="selectedPurposeId" @oninput="FilterTrips">
                        <option value="">All Purposes</option>
                        @if (purposes != null)
                        {
                            @foreach (var purpose in purposes)
                            {
                                <option value="@purpose.PurposeId">@purpose.Emoji @purpose.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Status</span>
                    </label>
                    <select class="select select-bordered" @bind="selectedStatusId" @oninput="FilterTrips">
                        <option value="">All Statuses</option>
                        @if (statuses != null)
                        {
                            @foreach (var status in statuses)
                            {
                                <option value="@status.StatusId">@status.Emoji @status.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner</span>
                    </label>
                    <select class="select select-bordered" @bind="selectedOwnerId" @oninput="FilterTrips">
                        <option value="">All Owners</option>
                        @if (owners != null)
                        {
                            @foreach (var owner in owners)
                            {
                                <option value="@owner.OwnerId">@owner.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Start Date From</span>
                    </label>
                    <input type="date" class="input input-bordered" @bind="startDateFrom" @oninput="FilterTrips" />
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Start Date To</span>
                    </label>
                    <input type="date" class="input input-bordered" @bind="startDateTo" @oninput="FilterTrips" />
                </div>
            </div>
        </div>
    </div>

    <!-- Results Summary -->
    <div class="flex justify-between items-center mb-4">
        <div class="text-sm text-gray-600">
            Showing @filteredTrips?.Count() of @allTrips?.Count() trips
        </div>
        <div class="flex gap-2 items-center">
            <label class="label">
                <span class="label-text">Per page:</span>
            </label>
            <select class="select select-bordered select-xs" @bind="pageSize" @oninput="UpdatePagination">
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
        </div>
    </div>

    <!-- Trips Table -->
    <div class="card bg-base-100 shadow-sm">
        <div class="card-body p-0">
            <div class="overflow-x-auto">
                <table class="table table-hover">
                    <thead>
                        <tr class="bg-base-200">
                            <th>
                                <label>
                                    <input type="checkbox" class="checkbox checkbox-sm" 
                                           @onchange="ToggleSelectAll" checked="@isAllSelected" />
                                </label>
                            </th>
                            <th class="cursor-pointer" @onclick='() => SortBy("TripName")'>
                                Trip Name 
                                @if (sortColumn == "TripName")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                            </th>
                            <th class="cursor-pointer" @onclick='() => SortBy("Email")'>
                                Email
                                @if (sortColumn == "Email")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                            </th>
                            <th class="cursor-pointer" @onclick='() => SortBy("StartDate")'>
                                Start Date
                                @if (sortColumn == "StartDate")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                            </th>
                            <th class="cursor-pointer" @onclick='() => SortBy("EndDate")'>
                                End Date
                                @if (sortColumn == "EndDate")
                                {
                                    <i class="fas @(sortAscending ? "fa-sort-up" : "fa-sort-down") ml-1"></i>
                                }
                            </th>
                            <th>Duration</th>
                            <th>Destination</th>
                            <th>Purpose</th>
                            <th>Status</th>
                            <th>Validation</th>
                            <th>Owner</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (pagedTrips != null)
                        {
                            @foreach (var trip in pagedTrips)
                            {
                                <tr class="hover" @ondblclick="() => ViewTripDetails(trip.TripId)">
                                    <td>
                                        <label>
                                            <input type="checkbox" class="checkbox checkbox-sm" 
                                                   checked="@selectedTripIds.Contains(trip.TripId)"
                                                   @onchange="(e) => ToggleSelection(trip.TripId, (bool)e.Value!)" />
                                        </label>
                                    </td>
                                    <td class="font-medium">@trip.TripName</td>
                                    <td>@trip.Email</td>
                                    <td>@trip.StartDate.ToString("dd/MM/yyyy")</td>
                                    <td>@trip.EndDate.ToString("dd/MM/yyyy")</td>
                                    <td>@trip.Duration days</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(trip.City1) && !string.IsNullOrEmpty(trip.Country1))
                                        {
                                            @($"{trip.City1}, {trip.Country1}")
                                        }
                                        else if (!string.IsNullOrEmpty(trip.Country1))
                                        {
                                            @trip.Country1
                                        }
                                        @if (!string.IsNullOrEmpty(trip.City2) && !string.IsNullOrEmpty(trip.Country2))
                                        {
                                            <br />@($"{trip.City2}, {trip.Country2}")
                                        }
                                        else if (!string.IsNullOrEmpty(trip.Country2))
                                        {
                                            <br />@trip.Country2
                                        }
                                    </td>
                                    <td>
                                        @if (trip.Purpose != null)
                                        {
                                            <span class="badge badge-outline">@trip.Purpose.Emoji @trip.Purpose.Name</span>
                                        }
                                    </td>
                                    <td>
                                        @if (trip.Status != null)
                                        {
                                            <span class="badge @GetStatusBadgeClass(trip.Status.Name)">
                                                @trip.Status.Emoji @trip.Status.Name
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        @if (trip.ValidationStatus != null)
                                        {
                                            <span class="badge @GetValidationBadgeClass(trip.ValidationStatus.Name)">
                                                @trip.ValidationStatus.Emoji @trip.ValidationStatus.Name
                                            </span>
                                        }
                                    </td>
                                    <td>@trip.Owner?.Name</td>
                                    <td>
                                        <div class="dropdown dropdown-end">
                                            <div tabindex="0" role="button" class="btn btn-ghost btn-xs">
                                                <i class="fas fa-ellipsis-v"></i>
                                            </div>
                                            <ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-[1] w-52 p-2 shadow">
                                                <li><a @onclick="() => ViewTripDetails(trip.TripId)">
                                                    <i class="fas fa-eye mr-2"></i>View Details
                                                </a></li>
                                                <li><a @onclick="() => EditTrip(trip)">
                                                    <i class="fas fa-edit mr-2"></i>Edit
                                                </a></li>
                                                <li><a @onclick="() => LinkTransactions(trip.TripId)">
                                                    <i class="fas fa-link mr-2"></i>Link Transactions
                                                </a></li>
                                                @if (trip.ValidationStatus?.Name == "Ready to validate")
                                                {
                                                    <li><a @onclick="() => ValidateTrip(trip.TripId)">
                                                        <i class="fas fa-check mr-2"></i>Validate
                                                    </a></li>
                                                }
                                                <li><a @onclick="() => DeleteTrip(trip.TripId)" class="text-error">
                                                    <i class="fas fa-trash mr-2"></i>Delete
                                                </a></li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    @if (totalPages > 1)
    {
        <div class="flex justify-center mt-6">
            <div class="btn-group">
                <button class="btn btn-sm @(currentPage == 1 ? "btn-disabled" : "")" 
                        @onclick="() => ChangePage(1)" disabled="@(currentPage == 1)">
                    First
                </button>
                <button class="btn btn-sm @(currentPage == 1 ? "btn-disabled" : "")" 
                        @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                    Previous
                </button>
                
                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    int page = i;
                    <button class="btn btn-sm @(currentPage == page ? "btn-active" : "")" 
                            @onclick="() => ChangePage(page)">
                        @((MarkupString)page.ToString())
                    </button>
                }
                
                <button class="btn btn-sm @(currentPage == totalPages ? "btn-disabled" : "")" 
                        @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                    Next
                </button>
                <button class="btn btn-sm @(currentPage == totalPages ? "btn-disabled" : "")" 
                        @onclick="() => ChangePage(totalPages)" disabled="@(currentPage == totalPages)">
                    Last
                </button>
            </div>
        </div>
    }

    <!-- Bulk Actions (shown when trips are selected) -->
    @if (selectedTripIds.Any())
    {
        <div class="fixed bottom-4 right-4 bg-base-100 rounded-lg shadow-lg p-4 border">
            <div class="flex items-center gap-4">
                <span class="text-sm font-medium">@selectedTripIds.Count selected</span>
                <div class="flex gap-2">
                    <button class="btn btn-sm btn-primary" @onclick="BulkValidate">
                        <i class="fas fa-check mr-1"></i>Validate
                    </button>
                    <button class="btn btn-sm btn-outline" @onclick="BulkExport">
                        <i class="fas fa-download mr-1"></i>Export
                    </button>
                    <button class="btn btn-sm btn-error" @onclick="BulkDelete">
                        <i class="fas fa-trash mr-1"></i>Delete
                    </button>
                </div>
                <button class="btn btn-sm btn-ghost" @onclick="ClearSelection">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    }
</div>

<!-- Trip Edit Modal -->
<TripEditModal IsVisible="showEditModal" 
               IsEditMode="isEditMode" 
               Trip="editingTrip" 
               OnClose="CloseEditModal" 
               OnSave="SaveTrip" />

@code {
    private IEnumerable<Trip>? allTrips;
    private IEnumerable<Trip>? filteredTrips;
    private IEnumerable<Trip>? pagedTrips;
    
    private IEnumerable<Purpose>? purposes;
    private IEnumerable<Status>? statuses;
    private IEnumerable<Owner>? owners;

    // Filtering
    private string searchTerm = "";
    private string selectedPurposeId = "";
    private string selectedStatusId = "";
    private string selectedOwnerId = "";
    private DateTime? startDateFrom;
    private DateTime? startDateTo;

    // Sorting
    private string sortColumn = "StartDate";
    private bool sortAscending = false;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 25;
    private int totalPages = 1;

    // Selection
    private HashSet<int> selectedTripIds = new();
    private bool isAllSelected = false;

    // Modal state
    private bool showEditModal = false;
    private bool isEditMode = false;
    private Trip? editingTrip;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        allTrips = await TripService.GetAllTripsAsync();
        purposes = await LookupService.GetPurposesAsync();
        statuses = await LookupService.GetStatusesAsync();
        owners = await LookupService.GetOwnersAsync();
        
        await FilterTrips();
    }

    private async Task FilterTrips()
    {
        if (allTrips == null) return;

        var query = allTrips.AsQueryable();

        // Apply filters
        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(t => 
                (t.TripName != null && t.TripName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.Email != null && t.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.Country1 != null && t.Country1.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.City1 != null && t.City1.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.Country2 != null && t.Country2.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.City2 != null && t.City2.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
        }

        if (!string.IsNullOrEmpty(selectedPurposeId) && int.TryParse(selectedPurposeId, out var purposeId))
        {
            query = query.Where(t => t.PurposeId == purposeId);
        }

        if (!string.IsNullOrEmpty(selectedStatusId) && int.TryParse(selectedStatusId, out var statusId))
        {
            query = query.Where(t => t.StatusId == statusId);
        }

        if (!string.IsNullOrEmpty(selectedOwnerId) && int.TryParse(selectedOwnerId, out var ownerId))
        {
            query = query.Where(t => t.OwnerId == ownerId);
        }

        if (startDateFrom.HasValue)
        {
            query = query.Where(t => t.StartDate >= startDateFrom.Value);
        }

        if (startDateTo.HasValue)
        {
            query = query.Where(t => t.StartDate <= startDateTo.Value);
        }

        // Apply sorting
        query = sortColumn switch
        {
            "TripName" => sortAscending ? query.OrderBy(t => t.TripName) : query.OrderByDescending(t => t.TripName),
            "Email" => sortAscending ? query.OrderBy(t => t.Email) : query.OrderByDescending(t => t.Email),
            "StartDate" => sortAscending ? query.OrderBy(t => t.StartDate) : query.OrderByDescending(t => t.StartDate),
            "EndDate" => sortAscending ? query.OrderBy(t => t.EndDate) : query.OrderByDescending(t => t.EndDate),
            _ => query.OrderByDescending(t => t.StartDate)
        };

        filteredTrips = query.ToList();
        
        await UpdatePagination();
    }

    private async Task UpdatePagination()
    {
        if (filteredTrips == null) return;

        var totalCount = filteredTrips.Count();
        totalPages = (int)Math.Ceiling((double)totalCount / pageSize);
        currentPage = Math.Min(currentPage, Math.Max(1, totalPages));

        pagedTrips = filteredTrips
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        await InvokeAsync(StateHasChanged);
    }

    private async Task SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }

        await FilterTrips();
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await UpdatePagination();
    }

    private void ToggleSelection(int tripId, bool isSelected)
    {
        if (isSelected)
        {
            selectedTripIds.Add(tripId);
        }
        else
        {
            selectedTripIds.Remove(tripId);
        }

        UpdateSelectAllState();
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isSelected = (bool)e.Value!;
        
        selectedTripIds.Clear();
        
        if (isSelected && pagedTrips != null)
        {
            foreach (var trip in pagedTrips)
            {
                selectedTripIds.Add(trip.TripId);
            }
        }

        isAllSelected = isSelected;
    }

    private void UpdateSelectAllState()
    {
        if (pagedTrips == null) return;
        
        var pageIds = pagedTrips.Select(t => t.TripId).ToHashSet();
        isAllSelected = pageIds.All(id => selectedTripIds.Contains(id)) && pageIds.Any();
    }

    private void ClearSelection()
    {
        selectedTripIds.Clear();
        isAllSelected = false;
    }

    private string GetStatusBadgeClass(string statusName)
    {
        return statusName switch
        {
            "Canceled" => "badge-error",
            "Upcoming" => "badge-warning",
            "Ongoing" => "badge-info",
            "Completed" => "badge-success",
            _ => "badge-outline"
        };
    }

    private string GetValidationBadgeClass(string validationName)
    {
        return validationName switch
        {
            "Not ready to validate" => "badge-outline",
            "Ready to validate" => "badge-warning",
            "Validated" => "badge-success",
            _ => "badge-outline"
        };
    }

    // Modal and CRUD operations
    private void OpenCreateModal()
    {
        editingTrip = new Trip
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(1),
            CreatedAt = DateTime.UtcNow,
            ModifiedAt = DateTime.UtcNow,
            IsManual = true
        };
        isEditMode = false;
        showEditModal = true;
    }

    private void EditTrip(Trip trip)
    {
        editingTrip = trip;
        isEditMode = true;
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editingTrip = null;
    }

    private async Task SaveTrip(Trip trip)
    {
        try
        {
            if (isEditMode)
            {
                await TripService.UpdateTripAsync(trip);
            }
            else
            {
                await TripService.CreateTripAsync(trip);
            }

            await LoadData();
            CloseEditModal();
            
            await JSRuntime.InvokeVoidAsync("showToast", "success", 
                isEditMode ? "Trip updated successfully" : "Trip created successfully");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error saving trip: {ex.Message}");
        }
    }

    private async Task DeleteTrip(int tripId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Are you sure you want to delete this trip? This will unlink all associated transactions.");
        
        if (confirmed)
        {
            try
            {
                await TripService.DeleteTripAsync(tripId);
                await LoadData();
                await JSRuntime.InvokeVoidAsync("showToast", "success", "Trip deleted successfully");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error deleting trip: {ex.Message}");
            }
        }
    }

    private async Task ValidateTrip(int tripId)
    {
        try
        {
            await TripService.ValidateTripAsync(tripId);
            await LoadData();
            await JSRuntime.InvokeVoidAsync("showToast", "success", "Trip validated successfully");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error validating trip: {ex.Message}");
        }
    }

    private async Task SuggestTrips()
    {
        try
        {
            var suggestions = await TripService.SuggestTripsFromTransactionsAsync();
            // TODO: Show suggestions in a modal for user review
            await JSRuntime.InvokeVoidAsync("showToast", "info", $"Found {suggestions.Count()} trip suggestions");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error generating suggestions: {ex.Message}");
        }
    }

    private void ViewTripDetails(int tripId)
    {
        // TODO: Navigate to trip details page or show modal
    }

    private void LinkTransactions(int tripId)
    {
        // TODO: Open transaction linking modal
    }

    private async Task BulkValidate()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to validate {selectedTripIds.Count} selected trips?");
        
        if (confirmed)
        {
            try
            {
                foreach (var tripId in selectedTripIds.ToList())
                {
                    await TripService.ValidateTripAsync(tripId);
                }
                
                await LoadData();
                ClearSelection();
                await JSRuntime.InvokeVoidAsync("showToast", "success", "Selected trips validated successfully");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error validating trips: {ex.Message}");
            }
        }
    }

    private async Task BulkExport()
    {
        // TODO: Implement bulk export functionality
        await JSRuntime.InvokeVoidAsync("showToast", "info", "Export functionality coming soon");
    }

    private async Task BulkDelete()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Are you sure you want to delete {selectedTripIds.Count} selected trips? This will unlink all associated transactions.");
        
        if (confirmed)
        {
            try
            {
                foreach (var tripId in selectedTripIds.ToList())
                {
                    await TripService.DeleteTripAsync(tripId);
                }
                
                await LoadData();
                ClearSelection();
                await JSRuntime.InvokeVoidAsync("showToast", "success", "Selected trips deleted successfully");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "error", $"Error deleting trips: {ex.Message}");
            }
        }
    }

    private async Task ExportData()
    {
        // TODO: Implement export functionality
        await JSRuntime.InvokeVoidAsync("showToast", "info", "Export functionality coming soon");
    }
}