@page "/trips"
@using TravelOperation.Core.Models.Entities
@using TravelOperation.Core.Models
@using TravelOperation.Core.Services.Interfaces
@using TravelOperation.Core.Interfaces
@inject ITripService TripService
@inject ILookupService LookupService
@inject IExportService ExportService
@inject IAuthenticationService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>Trips - Travel Expense Management</PageTitle>

<style>
    .table td, .table th {
        word-wrap: break-word;
        overflow-wrap: break-word;
        white-space: normal !important;
    }
</style>

<div class="container ">
    <div class="flex justify-between items-center ">
        <h1 class="text-3xl font-bold text-gray-900">Trips</h1>
        <div class="flex gap-2">
            <button class="btn btn-primary" @onclick="OpenCreateModal">
                <i class="fas fa-plus mr-2"></i>New Trip
            </button>
            <button class="btn btn-secondary" @onclick="SuggestTrips">
                <i class="fas fa-magic mr-2"></i>Suggest Trips
            </button>
            <button class="btn btn-outline" @onclick="ExportData">
                <i class="fas fa-download mr-2"></i>Export
            </button>
        </div>
    </div>

    @* Display current user info for debugging - Remove in production *@
    @if (!string.IsNullOrEmpty(currentUserRole))
    {
        <div class="alert alert-info mt-2 mb-2 text-sm">
            <span>👤 Logged in as: <strong>@currentUserEmail</strong> | Role: <strong>@currentUserRole</strong></span>
        </div>
    }

    <!-- Filters -->
    <div class="card bg-base-100 shadow-sm ">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" placeholder="Trip name, email, destination..." 
                           class="input input-bordered" @bind="searchTerm" @onkeyup="FilterTrips" />
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Purpose</span>
                    </label>
                    <select class="select select-bordered" @bind="selectedPurposeId" @oninput="FilterTrips">
                        <option value="">All Purposes</option>
                        @if (purposes != null)
                        {
                            @foreach (var purpose in purposes)
                            {
                                <option value="@purpose.PurposeId">@purpose.Emoji @purpose.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Status</span>
                    </label>
                    <select class="select select-bordered" @bind="selectedStatusId" @oninput="FilterTrips">
                        <option value="">All Statuses</option>
                        @if (statuses != null)
                        {
                            @foreach (var status in statuses)
                            {
                                <option value="@status.StatusId">@status.Emoji @status.Name</option>
                            }
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner</span>
                    </label>
                    <select class="select select-bordered" @bind="selectedOwnerId" @oninput="FilterTrips">
                        <option value="">All Owners</option>
                        @if (owners != null)
                        {
                            @foreach (var owner in owners)
                            {
                                <option value="@owner.OwnerId">@owner.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Start Date From</span>
                    </label>
                    <input type="date" class="input input-bordered" @bind="startDateFrom" @oninput="FilterTrips" />
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Start Date To</span>
                    </label>
                    <input type="date" class="input input-bordered" @bind="startDateTo" @oninput="FilterTrips" />
                </div>
            </div>
            <div class="flex justify-end mt-4">
                <button class="btn btn-outline btn-sm" @onclick="RefreshAndClearFilters">
                    <i class="fas fa-sync-alt mr-2"></i>Clear Filters & Refresh
                </button>
            </div>
        </div>
    </div>

    <!-- Trips Table -->
    <div class="card bg-base-100 shadow-sm">
        <!-- Table with fixed height and horizontal scroll -->
        <div class="overflow-auto" style="height: 600px;">
            <table class="table table-zebra table-pin-rows" style="min-width: 1400px;">
                <thead class="bg-white sticky top-0 z-10">
                    <tr class="bg-white">
                        <th class="bg-white" style="width: 30px;">
                            <label>
                                <input type="checkbox" class="checkbox checkbox-sm" 
                                       checked="@isAllSelected"
                                       @onchange="@((ChangeEventArgs e) => ToggleSelectAllChange((bool)e.Value!))" />
                            </label>
                        </th>
                        <th class="bg-white cursor-pointer hover:bg-base-200" style="width: 100px;" @onclick='() => SortBy("TripName")'>
                            Trip Name 
                            @if (sortColumn == "TripName")
                            {
                                <span>@(sortAscending ? "↑" : "↓")</span>
                            }
                        </th>
                        <th class="bg-white cursor-pointer hover:bg-base-200" style="width: 140px;" @onclick='() => SortBy("Email")'>
                            Email
                            @if (sortColumn == "Email")
                            {
                                <span>@(sortAscending ? "↑" : "↓")</span>
                            }
                        </th>
                        <th class="bg-white cursor-pointer hover:bg-base-200" style="width: 150px;" @onclick='() => SortBy("StartDate")'>
                            Start
                            @if (sortColumn == "StartDate")
                            {
                                <span>@(sortAscending ? "↑" : "↓")</span>
                            }
                        </th>
                        <th class="bg-white cursor-pointer hover:bg-base-200" style="width: 150px;" @onclick='() => SortBy("EndDate")'>
                            End
                            @if (sortColumn == "EndDate")
                            {
                                <span>@(sortAscending ? "↑" : "↓")</span>
                            }
                        </th>
                        <th class="bg-white" style="width: 90px;">Duration</th>
                        <th class="bg-white" style="width: 130px;">Destination</th>
                        <th class="bg-white" style="width: 100px;">Purpose</th>
                        <th class="bg-white" style="width: 90px;">Status</th>
                        <th class="bg-white" style="width: 90px;">Validation</th>
                        <th class="bg-white" style="width: 100px;">Owner</th>
                        <th class="bg-white" style="width: 100px;">Actions</th>
                    </tr>
                </thead>
                    <tbody>
                        @if (pagedResult.Items.Any())
                        {
                            @foreach (var trip in pagedResult.Items)
                            {
                                <tr class="hover" @ondblclick="() => ViewTripDetails(trip.TripId)">
                                    <td @onclick:stopPropagation="true">
                                        <label>
                                            <input type="checkbox" class="checkbox checkbox-sm" 
                                                   checked="@selectedTripIds.Contains(trip.TripId)"
                                                   @onchange="@((ChangeEventArgs e) => ToggleSelectionChange(trip.TripId, (bool)e.Value!))" />
                                        </label>
                                    </td>
                                    <td class="font-medium">@trip.TripName</td>
                                    <td>@trip.Email</td>
                                    <td>@trip.StartDate.ToString("dd/MM/yyyy")</td>
                                    <td>@trip.EndDate.ToString("dd/MM/yyyy")</td>
                                    <td>@trip.Duration days</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(trip.City1) && !string.IsNullOrEmpty(trip.Country1))
                                        {
                                            @($"{trip.City1}, {trip.Country1}")
                                        }
                                        else if (!string.IsNullOrEmpty(trip.Country1))
                                        {
                                            @trip.Country1
                                        }
                                        @if (!string.IsNullOrEmpty(trip.City2) && !string.IsNullOrEmpty(trip.Country2))
                                        {
                                            <br />@($"{trip.City2}, {trip.Country2}")
                                        }
                                        else if (!string.IsNullOrEmpty(trip.Country2))
                                        {
                                            <br />@trip.Country2
                                        }
                                    </td>
                                    <td>
                                        @if (trip.Purpose != null)
                                        {
                                            <span class="text-sm font-medium @GetPurposeColor(trip.Purpose.Name)">@trip.Purpose.Name</span>
                                        }
                                    </td>
                                    <td>
                                        @if (trip.Status != null)
                                        {
                                            <span class="text-sm font-medium @GetStatusColor(trip.Status.Name)">@trip.Status.Name</span>
                                        }
                                    </td>
                                    <td>
                                        @if (trip.ValidationStatus != null)
                                        {
                                            <span class="text-sm font-medium @GetValidationColor(trip.ValidationStatus.Name)">@trip.ValidationStatus.Name</span>
                                        }
                                    </td>
                                    <td>@trip.Owner?.Name</td>
                                    <td>
                                        <div class="dropdown dropdown-end">
                                            <button tabindex="0" class="w-8 h-8 rounded-full hover:bg-gray-100 flex items-center justify-center text-gray-600 hover:text-gray-900">
                                                ⋮
                                            </button>
                                            <ul tabindex="0" class="dropdown-content menu bg-white rounded-box z-[1] w-52 p-2 shadow border border-base-300">
                                                <li><a @onclick="() => ViewTripDetails(trip.TripId)" class="hover:bg-base-200">
                                                    <i class="fas fa-eye mr-2"></i>View Details
                                                </a></li>
                                                <li><a @onclick="() => EditTrip(trip)" class="hover:bg-base-200">
                                                    <i class="fas fa-edit mr-2"></i>Edit
                                                </a></li>
                                                <li><a @onclick="() => LinkTransactions(trip.TripId)" class="hover:bg-base-200">
                                                    <i class="fas fa-link mr-2"></i>Link Transactions
                                                </a></li>
                                                @if (trip.ValidationStatus?.Name == "Ready to validate")
                                                {
                                                    <li><a @onclick="() => ValidateTrip(trip.TripId)" class="hover:bg-base-200">
                                                        <i class="fas fa-check mr-2"></i>Validate
                                                    </a></li>
                                                }
                                                <li><a @onclick="() => DeleteTrip(trip.TripId)" class="text-red-600 hover:bg-red-50">
                                                    <i class="fas fa-trash mr-2"></i>Delete
                                                </a></li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Pagination - Outside the scrolling area -->
        @if (pagedResult.TotalCount > 0)
        {
            <div class="card-body border-t">
                <div class="flex justify-between items-center">
                    <div class="flex items-center gap-4">
                        <div class="text-sm text-base-content/70">
                            Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, pagedResult.TotalCount) of @pagedResult.TotalCount trips
                        </div>
                        <div class="flex items-center gap-2">
                            <span class="text-sm text-base-content/70">Per page:</span>
                            <select class="select select-bordered select-sm w-20" @bind="pageSize" @bind:after="UpdatePagination">
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                    </div>
                    @if (pagedResult.TotalPages > 1)
                    {
                        <div class="join">
                            <button class="join-item btn btn-sm" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                « Previous
                            </button>
                            @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                            {
                                int pageNum = i;
                                <button class="join-item btn btn-sm @(currentPage == pageNum ? "btn-primary" : "")" 
                                        @onclick="() => ChangePage(pageNum)">
                                    @pageNum
                                </button>
                            }
                            <button class="join-item btn btn-sm" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == pagedResult.TotalPages)">
                                Next »
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <!-- Bulk Actions (shown when trips are selected) -->
    @if (selectedTripIds.Any())
    {
        <div class="fixed bottom-4 right-4 bg-white rounded-lg shadow-lg p-4 border z-[1000]">
            <div class="flex items-center gap-4">
                <span class="text-sm font-medium">@selectedTripIds.Count selected</span>
                <div class="flex gap-2">
                    <button class="btn btn-sm btn-primary" @onclick="BulkValidate">
                        <i class="fas fa-check mr-1"></i>Validate
                    </button>
                    <button class="btn btn-sm btn-outline" @onclick="BulkExport">
                        <i class="fas fa-download mr-1"></i>Export
                    </button>
                    <button class="btn btn-sm btn-error" @onclick="BulkDelete">
                        <i class="fas fa-trash mr-1"></i>Delete
                    </button>
                </div>
                <button class="btn btn-sm btn-ghost" @onclick="ClearSelection">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    }


<!-- Trip Edit Modal -->
<TripEditModal IsVisible="showEditModal" 
               IsEditMode="isEditMode" 
               Trip="editingTrip" 
               OnClose="CloseEditModal" 
               OnSave="SaveTrip" />

<!-- Trip Suggestions Modal -->
<TripSuggestionsModal IsVisible="showSuggestionsModal"
                      Suggestions="tripSuggestions"
                      OnClose="CloseSuggestionsModal"
                      OnTripsCreated="OnTripsCreated" />

<!-- Link Transactions Modal -->
<LinkTransactionsModal IsVisible="showLinkModal" 
                       TripId="@(linkingTrip?.TripId ?? 0)" 
                       Trip="linkingTrip"
                       OnClose="CloseLinkModal" 
                       OnTransactionsLinked="OnTransactionsLinked" />

<!-- Alert Dialog -->
<AlertDialog IsVisible="@showAlertDialog"
             Title="@alertTitle"
             Message="@alertMessage"
             Type="@alertType"
             OkButtonText="@alertOkText"
             OnClose="CloseAlertDialog" />

<!-- Confirmation Dialog -->
<ConfirmDialog IsVisible="@showConfirmDialog"
               Title="@confirmTitle"
               Message="@confirmMessage"
               Icon="@confirmIcon"
               ConfirmButtonText="@confirmButtonText"
               CancelButtonText="@cancelButtonText"
               ConfirmButtonClass="@confirmButtonClass"
               OnResult="HandleConfirmResult" />

@code {
    private IEnumerable<Trip>? allTrips;
    private IEnumerable<Trip>? filteredTrips;
    private PagedResult<Trip> pagedResult = new();
    
    private IEnumerable<Purpose>? purposes;
    private IEnumerable<Status>? statuses;
    private IEnumerable<Owner>? owners;

    // Current user for role-based access
    private TravelOperation.Core.Models.User? currentUser;
    private string? currentUserRole;
    private string? currentUserEmail;

    // Alert Dialog state
    private bool showAlertDialog = false;
    private string alertTitle = "";
    private string alertMessage = "";
    private AlertDialog.AlertType alertType = AlertDialog.AlertType.Info;
    private string alertOkText = "OK";
    
    // Confirmation Dialog state
    private bool showConfirmDialog = false;
    private string confirmTitle = "";
    private string confirmMessage = "";
    private string confirmIcon = "❓";
    private string confirmButtonText = "Yes";
    private string cancelButtonText = "No";
    private string confirmButtonClass = "btn-primary";
    private Func<Task>? pendingConfirmAction = null;

    // Filtering
    private string searchTerm = "";
    private string selectedPurposeId = "";
    private string selectedStatusId = "";
    private string selectedOwnerId = "";
    private DateTime? startDateFrom;
    private DateTime? startDateTo;

    // Sorting
    private string sortColumn = "StartDate";
    private bool sortAscending = false;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 25;

    // Selection
    private HashSet<int> selectedTripIds = new();
    private bool isAllSelected = false;

    // Modal state
    private bool showEditModal = false;
    private bool isEditMode = false;
    private Trip? editingTrip;

    // Suggestions modal state
    private bool showSuggestionsModal = false;
    private IEnumerable<Trip>? tripSuggestions;

    // Link transactions modal state
    private bool showLinkModal = false;
    private Trip? linkingTrip;

    protected override async Task OnInitializedAsync()
    {
        // Get current user information
        currentUser = await AuthService.GetCurrentUserAsync();
        currentUserRole = await AuthService.GetCurrentUserRoleAsync();
        currentUserEmail = await AuthService.GetCurrentUserEmailAsync();
        
        await LoadData();
    }

    public void Dispose()
    {
        // Force close modal when navigating away to prevent blocking other pages
        showEditModal = false;
        editingTrip = null;
        
        showSuggestionsModal = false;
        tripSuggestions = null;
        
        // Clear any selections
        selectedTripIds.Clear();
        isAllSelected = false;
    }

    private async Task LoadData()
    {
        allTrips = await TripService.GetAllTripsAsync();
        purposes = await LookupService.GetPurposesAsync();
        statuses = await LookupService.GetStatusesAsync();
        owners = await LookupService.GetOwnersAsync();
        
        await FilterTrips();
    }

    private async Task FilterTrips()
    {
        if (allTrips == null) return;

        var query = allTrips.AsQueryable();

        // Apply filters
        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(t => 
                (t.TripName != null && t.TripName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.Email != null && t.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.Country1 != null && t.Country1.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.City1 != null && t.City1.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.Country2 != null && t.Country2.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                (t.City2 != null && t.City2.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
        }

        if (!string.IsNullOrEmpty(selectedPurposeId) && int.TryParse(selectedPurposeId, out var purposeId))
        {
            query = query.Where(t => t.PurposeId == purposeId);
        }

        if (!string.IsNullOrEmpty(selectedStatusId) && int.TryParse(selectedStatusId, out var statusId))
        {
            query = query.Where(t => t.StatusId == statusId);
        }

        if (!string.IsNullOrEmpty(selectedOwnerId) && int.TryParse(selectedOwnerId, out var ownerId))
        {
            query = query.Where(t => t.OwnerId == ownerId);
        }

        if (startDateFrom.HasValue)
        {
            query = query.Where(t => t.StartDate >= startDateFrom.Value);
        }

        if (startDateTo.HasValue)
        {
            query = query.Where(t => t.StartDate <= startDateTo.Value);
        }

        // Apply sorting
        query = sortColumn switch
        {
            "TripName" => sortAscending ? query.OrderBy(t => t.TripName) : query.OrderByDescending(t => t.TripName),
            "Email" => sortAscending ? query.OrderBy(t => t.Email) : query.OrderByDescending(t => t.Email),
            "StartDate" => sortAscending ? query.OrderBy(t => t.StartDate) : query.OrderByDescending(t => t.StartDate),
            "EndDate" => sortAscending ? query.OrderBy(t => t.EndDate) : query.OrderByDescending(t => t.EndDate),
            _ => query.OrderByDescending(t => t.StartDate)
        };

        filteredTrips = query.ToList();
        
        await UpdatePagination();
    }

    private async Task UpdatePagination()
    {
        if (filteredTrips == null) return;

        var totalCount = filteredTrips.Count();
        var pagedItems = filteredTrips
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        pagedResult = new PagedResult<Trip>(pagedItems, totalCount, currentPage, pageSize);

        // Update select all state when page changes
        UpdateSelectAllState();

        await InvokeAsync(StateHasChanged);
    }

    private async Task SortBy(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }

        await FilterTrips();
    }

    private async Task ChangePage(int page)
    {
        currentPage = page;
        await UpdatePagination();
    }

    private void ToggleSelectionChange(int tripId, bool isChecked)
    {
        if (isChecked)
        {
            selectedTripIds.Add(tripId);
        }
        else
        {
            selectedTripIds.Remove(tripId);
        }

        StateHasChanged();
        UpdateSelectAllState();
    }

    private void ToggleSelectAllChange(bool isChecked)
    {
        isAllSelected = isChecked;
        
        selectedTripIds.Clear();
        
        if (isAllSelected && pagedResult.Items != null)
        {
            foreach (var trip in pagedResult.Items)
            {
                selectedTripIds.Add(trip.TripId);
            }
        }
    }

    private void UpdateSelectAllState()
    {
        if (pagedResult.Items == null) return;
        
        var pageIds = pagedResult.Items.Select(t => t.TripId).ToHashSet();
        isAllSelected = pageIds.All(id => selectedTripIds.Contains(id)) && pageIds.Any();
        StateHasChanged();
    }

    private void ClearSelection()
    {
        selectedTripIds.Clear();
        isAllSelected = false;
        StateHasChanged();
    }

    // Helper methods for colored text
    private string GetPurposeColor(string purposeName)
    {
        return purposeName?.ToLower() switch
        {
            "business trip" => "text-blue-600",
            "onboarding" => "text-green-600",
            "company trip" => "text-purple-600",
            "bcp" => "text-orange-600",
            _ => "text-gray-600"
        };
    }

    private string GetStatusColor(string statusName)
    {
        // Remove emoji if present
        var name = statusName?.Replace("🔴", "").Replace("⚪", "").Replace("🔵", "").Replace("🟢", "").Trim().ToLower();
        return name switch
        {
            "canceled" or "cancelled" => "text-red-600",
            "upcoming" => "text-gray-600",
            "ongoing" => "text-blue-600",
            "completed" => "text-green-600",
            _ => "text-gray-600"
        };
    }

    private string GetValidationColor(string validationName)
    {
        // Remove emoji if present
        var name = validationName?.Replace("⚪", "").Replace("🟡", "").Replace("🟢", "").Trim().ToLower();
        return name switch
        {
            "not ready to validate" => "text-gray-600",
            "ready to validate" => "text-yellow-600",
            "validated" => "text-green-600",
            _ => "text-gray-600"
        };
    }

    // Modal and CRUD operations
    private async Task OpenCreateModal()
    {
        // Load validation statuses to set default
        var validationStatuses = await LookupService.GetValidationStatusesAsync();
        var defaultValidationStatus = validationStatuses.FirstOrDefault(v => v.Name.Contains("Not ready"));
        
        editingTrip = new Trip
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(1),
            Duration = 1,
            CreatedAt = DateTime.UtcNow,
            ModifiedAt = DateTime.UtcNow,
            IsManual = true,
            ValidationStatusId = defaultValidationStatus?.ValidationStatusId ?? 1 // Set default validation status
        };
        isEditMode = false;
        showEditModal = true;
    }

    private void EditTrip(Trip trip)
    {
        editingTrip = trip;
        isEditMode = true;
        showEditModal = true;
    }

    private void CloseEditModal()
    {
        showEditModal = false;
        editingTrip = null;
    }

    private async Task SaveTrip(Trip trip)
    {
        try
        {
            // Validate foreign keys before saving
            if (trip.PurposeId <= 0)
            {
                ShowAlert("Validation Error", "Please select a valid Purpose", AlertDialog.AlertType.Error);
                return;
            }
            
            if (trip.TripTypeId <= 0)
            {
                ShowAlert("Validation Error", "Please select a valid Trip Type", AlertDialog.AlertType.Error);
                return;
            }
            
            if (trip.StatusId <= 0)
            {
                ShowAlert("Validation Error", "Please select a valid Status", AlertDialog.AlertType.Error);
                return;
            }
            
            if (trip.ValidationStatusId <= 0)
            {
                ShowAlert("Validation Error", "Please select a valid Validation Status", AlertDialog.AlertType.Error);
                return;
            }
            
            if (trip.OwnerId <= 0)
            {
                ShowAlert("Validation Error", "Please select a valid Owner", AlertDialog.AlertType.Error);
                return;
            }

            if (isEditMode)
            {
                await TripService.UpdateTripAsync(trip);
            }
            else
            {
                await TripService.CreateTripAsync(trip);
            }

            await LoadData();
            
            // Close modal only on success (no exception)
            CloseEditModal();
            
            ShowAlert("Success", isEditMode ? "Trip updated successfully" : "Trip created successfully", AlertDialog.AlertType.Success);
        }
        catch (Exception ex)
        {
            // Don't close modal on error - let user see the error and fix the issue
            var errorMessage = ex.Message;
            
            // Provide more user-friendly error messages for common issues
            if (ex.Message.Contains("FOREIGN KEY constraint"))
            {
                errorMessage = "Invalid data: One or more selected values are not valid. Please check:\n" +
                              "• Purpose is selected\n" +
                              "• Trip Type is selected\n" +
                              "• Status is selected\n" +
                              "• Validation Status is selected\n" +
                              "• Owner is assigned";
            }
            
            ShowAlert("Error", $"Error saving trip: {errorMessage}", AlertDialog.AlertType.Error);
        }
    }

    private void DeleteTrip(int tripId)
    {
        ShowConfirm(
            "Delete Trip",
            "Are you sure you want to delete this trip? This will unlink all associated transactions.",
            async () =>
            {
                try
                {
                    await TripService.DeleteTripAsync(tripId);
                    await LoadData();
                    ShowAlert("Success", "Trip deleted successfully", AlertDialog.AlertType.Success);
                }
                catch (Exception ex)
                {
                    ShowAlert("Error", $"Error deleting trip: {ex.Message}", AlertDialog.AlertType.Error);
                }
            },
            "🗑️",
            "Delete",
            "Cancel",
            "btn-error"
        );
    }

    private async Task ValidateTrip(int tripId)
    {
        try
        {
            await TripService.ValidateTripAsync(tripId);
            await LoadData();
            ShowAlert("Success", "Trip validated successfully", AlertDialog.AlertType.Success);
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error validating trip: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task SuggestTrips()
    {
        try
        {
            tripSuggestions = await TripService.SuggestTripsFromTransactionsAsync();
            
            if (tripSuggestions?.Any() == true)
            {
                showSuggestionsModal = true;
            }
            else
            {
                ShowAlert("No Suggestions", "No trip suggestions found", AlertDialog.AlertType.Info);
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error generating suggestions: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private void CloseSuggestionsModal()
    {
        showSuggestionsModal = false;
        tripSuggestions = null;
    }

    private async Task OnTripsCreated()
    {
        await LoadData();
        CloseSuggestionsModal();
    }

    private void ViewTripDetails(int tripId)
    {
        NavigationManager.NavigateTo($"/trips/{tripId}");
    }

    private void LinkTransactions(int tripId)
    {
        // Find the trip to pass to modal
        var trip = pagedResult.Items.FirstOrDefault(t => t.TripId == tripId);
        if (trip != null)
        {
            linkingTrip = trip;
            showLinkModal = true;
        }
    }

    private void CloseLinkModal()
    {
        showLinkModal = false;
        linkingTrip = null;
    }

    private async Task OnTransactionsLinked()
    {
        await LoadData();
        CloseLinkModal();
    }

    private void BulkValidate()
    {
        ShowConfirm(
            "Validate Trips",
            $"Are you sure you want to validate {selectedTripIds.Count} selected trips?",
            async () =>
            {
                try
                {
                    foreach (var tripId in selectedTripIds.ToList())
                    {
                        await TripService.ValidateTripAsync(tripId);
                    }
                    
                    await LoadData();
                    ClearSelection();
                    ShowAlert("Success", "Selected trips validated successfully", AlertDialog.AlertType.Success);
                }
                catch (Exception ex)
                {
                    ShowAlert("Error", $"Error validating trips: {ex.Message}", AlertDialog.AlertType.Error);
                }
            },
            "✅",
            "Validate",
            "Cancel",
            "btn-success"
        );
    }

    private void BulkExport()
    {
        ShowConfirm(
            "Export Selected Trips",
            $"Export {selectedTripIds.Count} selected trips to CSV?",
            async () =>
            {
                try
                {
                    // Get selected trips
                    var selectedTrips = pagedResult.Items.Where(t => selectedTripIds.Contains(t.TripId)).ToList();
                    
                    if (!selectedTrips.Any())
                    {
                        ShowAlert("No Data", "No trips selected for export", AlertDialog.AlertType.Warning);
                        return;
                    }
                    
                    // Export to CSV
                    var csvData = await ExportService.ExportTripsToCsvAsync(selectedTrips);
                    var fileName = await ExportService.GetExportFileName("SelectedTrips", "csv");
                    
                    // Download file
                    await DownloadFile(csvData, fileName, "text/csv");
                    
                    ShowAlert("Success", $"{selectedTrips.Count} trips exported successfully", AlertDialog.AlertType.Success);
                }
                catch (Exception ex)
                {
                    ShowAlert("Error", $"Error exporting trips: {ex.Message}", AlertDialog.AlertType.Error);
                }
            },
            "📥",
            "Export",
            "Cancel",
            "btn-primary"
        );
    }

    private void BulkDelete()
    {
        ShowConfirm(
            "Delete Trips",
            $"Are you sure you want to delete {selectedTripIds.Count} selected trips? This will unlink all associated transactions.",
            async () =>
            {
                try
                {
                    foreach (var tripId in selectedTripIds.ToList())
                    {
                        await TripService.DeleteTripAsync(tripId);
                    }
                    
                    await LoadData();
                    ClearSelection();
                    ShowAlert("Success", "Selected trips deleted successfully", AlertDialog.AlertType.Success);
                }
                catch (Exception ex)
                {
                    ShowAlert("Error", $"Error deleting trips: {ex.Message}", AlertDialog.AlertType.Error);
                }
            },
            "🗑️",
            "Delete",
            "Cancel",
            "btn-error"
        );
    }

    private async Task ExportData()
    {
        try
        {
            // Export filtered trips (what user currently sees)
            var tripsToExport = filteredTrips?.ToList() ?? new List<Trip>();
            
            if (!tripsToExport.Any())
            {
                ShowAlert("No Data", "No trips to export", AlertDialog.AlertType.Warning);
                return;
            }
            
            // Export to CSV
            var csvData = await ExportService.ExportTripsToCsvAsync(tripsToExport);
            var fileName = await ExportService.GetExportFileName("Trips", "csv");
            
            // Download file
            await DownloadFile(csvData, fileName, "text/csv");
            
            ShowAlert("Success", $"{tripsToExport.Count} trips exported successfully", AlertDialog.AlertType.Success);
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error exporting trips: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task DownloadFile(byte[] fileData, string fileName, string contentType)
    {
        var base64 = Convert.ToBase64String(fileData);
        await JSRuntime.InvokeVoidAsync("downloadFileBase64", base64, fileName, contentType);
    }

    private async Task RefreshAndClearFilters()
    {
        // Clear all filter values
        searchTerm = "";
        selectedPurposeId = "";
        selectedStatusId = "";
        selectedOwnerId = "";
        startDateFrom = null;
        startDateTo = null;
        
        // Reset pagination
        currentPage = 1;
        
        // Reload data from database
        await LoadData();
        
        StateHasChanged();
    }

    // Alert Dialog Methods
    private void ShowAlert(string title, string message, AlertDialog.AlertType type = AlertDialog.AlertType.Info, string okText = "OK")
    {
        alertTitle = title;
        alertMessage = message;
        alertType = type;
        alertOkText = okText;
        showAlertDialog = true;
        StateHasChanged();
    }

    private void CloseAlertDialog()
    {
        showAlertDialog = false;
        StateHasChanged();
    }

    // Confirmation Dialog Methods
    private void ShowConfirm(string title, string message, Func<Task> onConfirm, string icon = "❓", 
        string confirmText = "Yes", string cancelText = "No", string buttonClass = "btn-primary")
    {
        confirmTitle = title;
        confirmMessage = message;
        confirmIcon = icon;
        confirmButtonText = confirmText;
        cancelButtonText = cancelText;
        confirmButtonClass = buttonClass;
        pendingConfirmAction = onConfirm;
        showConfirmDialog = true;
        StateHasChanged();
    }

    private async Task HandleConfirmResult(bool confirmed)
    {
        showConfirmDialog = false;
        
        if (confirmed && pendingConfirmAction != null)
        {
            await pendingConfirmAction.Invoke();
        }
        
        pendingConfirmAction = null;
        StateHasChanged();
    }
}