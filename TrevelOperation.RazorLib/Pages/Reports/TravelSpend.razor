@page "/reports/travel-spend"
@using TravelOperation.Core.Models
@using TravelOperation.Core.Services
@using TravelOperation.Core.Services.Interfaces
@using TrevelOperation.Service
@using TrevelOperation.RazorLib.Components
@inject ITripService TripService
@inject ITransactionService TransactionService
@inject ITaxCalculationService TaxCalculationService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<AuthorizeRoleView RequiredRole="Finance">
<div class="container mx-auto">
    <div class="flex justify-between items-center ">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">üìä Travel Spend Report</h1>
            <p class="text-gray-600">Comprehensive spending analysis by trip with tax exposure</p>
        </div>
        <div class="flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshData">
                üîÑ Refresh
            </button>
            <button class="btn btn-primary" @onclick="ExportReport">
                üìä Export Report
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="card bg-blue-50 border-l-4 border-blue-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üß≥</div>
                    <div>
                        <div class="text-2xl font-bold text-blue-700">@totalTrips</div>
                        <div class="text-blue-600">Total Trips</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-green-50 border-l-4 border-green-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üí∞</div>
                    <div>
                        <div class="text-2xl font-bold text-green-700">$@totalSpend.ToString("N0")</div>
                        <div class="text-green-600">Total Spend</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-purple-50 border-l-4 border-purple-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üìà</div>
                    <div>
                        <div class="text-2xl font-bold text-purple-700">$@averagePerTrip.ToString("N0")</div>
                        <div class="text-purple-600">Average Per Trip</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-red-50 border-l-4 border-red-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚ö†Ô∏è</div>
                    <div>
                        <div class="text-2xl font-bold text-red-700">$@totalTaxExposure.ToString("N0")</div>
                        <div class="text-red-600">Tax Exposure</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-md mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Date Range</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedDateRange" @bind:after="FilterTrips">
                        <option value="">All Dates</option>
                        <option value="last-30">Last 30 days</option>
                        <option value="last-90">Last 90 days</option>
                        <option value="this-quarter">This quarter</option>
                        <option value="this-year">This year</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedOwner" @bind:after="FilterTrips">
                        <option value="">All Owners</option>
                        @foreach (var owner in availableOwners)
                        {
                            <option value="@owner">@owner</option>
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Purpose</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedPurpose" @bind:after="FilterTrips">
                        <option value="">All Purposes</option>
                        <option value="Business trip">üíº Business trip</option>
                        <option value="Onboarding">üéì Onboarding</option>
                        <option value="Company trip">üèñ Company trip</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Min Amount</span>
                    </label>
                    <input type="number" class="input input-bordered w-full" placeholder="Min $" @bind="minAmount" @bind:after="FilterTrips">
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" placeholder="Search trips..." @bind="searchText" @bind:after="FilterTrips">
                </div>
            </div>
        </div>
    </div>

    <!-- Travel Spend Table -->
    <div class="card bg-base-100 shadow-md">
        <div class="card-body p-2">
            <div style="max-height: 400px; min-height: 400px; overflow-y: auto; overflow-x: hidden; border: 1px solid #e5e7eb;">
                <table class="table table-zebra table-pin-rows table-fixed" style="width: 100%; table-layout: fixed;">
                    <thead style="position: sticky; top: 0; z-index: 10; background-color: white; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                        <tr>
                            <th style="width: 10%; background-color: white;">Trip Details</th>
                            <th style="width: 12%; background-color: white;">Traveler</th>
                            <th style="width: 6%; background-color: white;">Duration</th>
                            <th style="width: 5%; background-color: white;"># Trans</th>
                            <th style="width: 8%; background-color: white;">Total ($)</th>
                            <th style="width: 7%; background-color: white;">Per Day</th>
                            <th style="width: 8%; background-color: white;">Airfare</th>
                            <th style="width: 8%; background-color: white;">Lodging</th>
                            <th style="width: 8%; background-color: white;">Meals</th>
                            <th style="width: 8%; background-color: white;">Transport</th>
                            <th style="width: 6%; background-color: white;">Other</th>
                            <th style="width: 9%; background-color: white;">Tax Exposure</th>
                            <th style="width: 5%; background-color: white;">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var spend in filteredSpendData.Skip((currentPage - 1) * pageSize).Take(pageSize))
                        {
                            <tr class="hover" @ondblclick="() => ViewTripDetails(spend.TripId)">
                                <td style="width: 10%;">
                                    <div class="font-medium text-xs truncate">@spend.TripName</div>
                                    <div class="text-xs text-gray-500 truncate">@spend.Destination</div>
                                </td>
                                <td style="width: 12%;" class="text-xs truncate">@spend.Email</td>
                                <td style="width: 6%;" class="text-xs">@spend.Duration d</td>
                                <td style="width: 5%;" class="text-xs">@spend.TransactionCount</td>
                                <td style="width: 8%;">
                                    <div class="font-bold text-xs">$@spend.TotalAmount.ToString("N0")</div>
                                </td>
                                <td style="width: 7%;" class="text-xs">$@spend.CostPerDay.ToString("N0")</td>
                                <td style="width: 8%;" class="text-xs">
                                    $@spend.AirfareAmount.ToString("N0")
                                    @if (!string.IsNullOrEmpty(spend.CabinClasses))
                                    {
                                        <div class="text-xs text-gray-500 truncate">@spend.CabinClasses</div>
                                    }
                                </td>
                                <td style="width: 8%;" class="text-xs">
                                    $@spend.LodgingAmount.ToString("N0")
                                    <div class="text-xs text-gray-500">$@spend.LodgingPerNight.ToString("N0")</div>
                                </td>
                                <td style="width: 8%;" class="text-xs">
                                    $@spend.MealsAmount.ToString("N0")
                                    <div class="text-xs text-gray-500">$@spend.MealsPerDay.ToString("N0")</div>
                                </td>
                                <td style="width: 8%;" class="text-xs">
                                    $@spend.TransportationAmount.ToString("N0")
                                    <div class="text-xs text-gray-500">$@spend.TransportationPerDay.ToString("N0")</div>
                                </td>
                                <td style="width: 6%;" class="text-xs">$@spend.OtherAmount.ToString("N0")</td>
                                <td style="width: 9%;">
                                    @if (spend.TaxExposure > 0)
                                    {
                                        <div class="badge badge-warning cursor-pointer badge-xs" @onclick="() => ShowTaxBreakdown(spend.TripId)">
                                            $@spend.TaxExposure.ToString("N0")
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="badge badge-success badge-xs">$0</div>
                                    }
                                </td>
                                <td style="width: 5%;">
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-xs">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52 z-20">
                                            <li><a @onclick="() => ViewTripDetails(spend.TripId)">üëÅÔ∏è View Details</a></li>
                                            <li><a @onclick="() => ViewTransactions(spend.TripId)">üìã View Transactions</a></li>
                                            <li><a @onclick="() => ShowTaxBreakdown(spend.TripId)">üíº Tax Breakdown</a></li>
                                            <li><hr /></li>
                                            <li><a @onclick="() => ExportTripReport(spend.TripId)">üìä Export Trip</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-500">
                    Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, filteredSpendData.Count) of @filteredSpendData.Count trips
                </div>
                <div class="join">
                    <button class="join-item btn btn-sm" disabled="@(currentPage <= 1)" @onclick="() => ChangePage(currentPage - 1)">¬´</button>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        <button class="join-item btn btn-sm @(i == currentPage ? "btn-active" : "")" @onclick="() => ChangePage(i)">@i</button>
                    }
                    <button class="join-item btn btn-sm" disabled="@(currentPage >= totalPages)" @onclick="() => ChangePage(currentPage + 1)">¬ª</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<TravelSpendData> spendData = new();
    private List<TravelSpendData> filteredSpendData = new();
    private List<string> availableOwners = new();
    private List<string> availablePurposes = new();
    private bool isLoading = false;
    
    // Filters
    private string selectedDateRange = "";
    private string selectedOwner = "";
    private string selectedPurpose = "";
    private decimal? minAmount;
    private string searchText = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 15;
    private int totalPages => (int)Math.Ceiling((double)filteredSpendData.Count / pageSize);
    
    // Summary data
    private int totalTrips = 0;
    private decimal totalSpend = 0;
    private decimal averagePerTrip = 0;
    private decimal totalTaxExposure = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadSpendData();
    }

    private async Task LoadSpendData()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            spendData = new List<TravelSpendData>();
            
            // Load all trips with their transactions
            var trips = await TripService.GetAllTripsAsync();
            
            foreach (var trip in trips)
            {
                try
                {
                    var transactions = trip.Transactions?.ToList() ?? new List<Transaction>();
                    
                    // Calculate category totals
                    var airfare = transactions
                        .Where(t => t.Category?.Name == "Airfare")
                        .Sum(t => t.AmountUSD ?? 0);
                    
                    var lodging = transactions
                        .Where(t => t.Category?.Name == "Lodging")
                        .Sum(t => t.AmountUSD ?? 0);
                    
                    var meals = transactions
                        .Where(t => t.Category?.Name == "Meals")
                        .Sum(t => t.AmountUSD ?? 0);
                    
                    var transportation = transactions
                        .Where(t => t.Category?.Name == "Transportation")
                        .Sum(t => t.AmountUSD ?? 0);
                    
                    var clientEntertainment = transactions
                        .Where(t => t.Category?.Name == "Client entertainment")
                        .Sum(t => t.AmountUSD ?? 0);
                    
                    var communication = transactions
                        .Where(t => t.Category?.Name == "Communication")
                        .Sum(t => t.AmountUSD ?? 0);
                    
                    var other = transactions
                        .Where(t => t.Category?.Name == "Other")
                        .Sum(t => t.AmountUSD ?? 0);
                    
                    var totalAmount = transactions.Sum(t => t.AmountUSD ?? 0);
                    
                    // Get cabin classes for airfare
                    var cabinClasses = transactions
                        .Where(t => t.Category?.Name == "Airfare" && t.CabinClass != null)
                        .Select(t => t.CabinClass!.Name)
                        .Distinct()
                        .ToList();
                    
                    // Calculate tax exposure
                    TaxExposureResult? taxExposure = null;
                    try
                    {
                        taxExposure = await TaxCalculationService.CalculateTaxExposureAsync(trip.TripId);
                    }
                    catch
                    {
                        // If tax calculation fails, create default
                        taxExposure = new TaxExposureResult
                        {
                            TripId = trip.TripId,
                            MealsExposure = 0,
                            LodgingExposure = 0,
                            TotalTaxExposure = 0,
                            HasPremiumAirfare = false
                        };
                    }
                    
                    // Create spend data object
                    var spendItem = new TravelSpendData
                    {
                        TripId = trip.TripId,
                        TripName = trip.TripName ?? "",
                        Email = trip.Email ?? "",
                        StartDate = trip.StartDate,
                        EndDate = trip.EndDate,
                        Duration = trip.Duration,
                        Destination = $"{trip.City1}, {trip.Country1}",
                        Owner = trip.Owner?.Name ?? "",
                        Purpose = trip.Purpose?.Name ?? "",
                        TransactionCount = transactions.Count,
                        TotalAmount = totalAmount,
                        CostPerDay = trip.Duration > 0 ? totalAmount / trip.Duration : 0,
                        AirfareAmount = airfare,
                        LodgingAmount = lodging,
                        MealsAmount = meals,
                        TransportationAmount = transportation,
                        ClientEntertainmentAmount = clientEntertainment,
                        CommunicationAmount = communication,
                        OtherAmount = other,
                        LodgingPerNight = trip.Duration > 0 ? lodging / trip.Duration : 0,
                        MealsPerDay = trip.Duration > 0 ? meals / trip.Duration : 0,
                        TransportationPerDay = trip.Duration > 0 ? transportation / trip.Duration : 0,
                        CabinClasses = string.Join(", ", cabinClasses),
                        HasPremiumCabin = taxExposure.HasPremiumAirfare,
                        MealsTaxExposure = taxExposure.MealsExposure,
                        LodgingTaxExposure = taxExposure.LodgingExposure,
                        TaxExposure = taxExposure.TotalTaxExposure
                    };
                    
                    spendData.Add(spendItem);
                }
                catch (Exception ex)
                {
                    await JSRuntime.InvokeVoidAsync("console.error", $"Error processing trip {trip.TripId}: {ex.Message}");
                }
            }
            
            // Get unique owners and purposes for filters
            availableOwners = spendData
                .Select(s => s.Owner)
                .Where(o => !string.IsNullOrEmpty(o))
                .Distinct()
                .OrderBy(o => o)
                .ToList();
            
            availablePurposes = spendData
                .Select(s => s.Purpose)
                .Where(p => !string.IsNullOrEmpty(p))
                .Distinct()
                .OrderBy(p => p)
                .ToList();
            
            CalculateSummary();
            FilterTrips();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading travel spend data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateSummary()
    {
        totalTrips = filteredSpendData.Count;
        totalSpend = filteredSpendData.Sum(s => s.TotalAmount);
        averagePerTrip = totalTrips > 0 ? totalSpend / totalTrips : 0;
        totalTaxExposure = filteredSpendData.Sum(s => s.TaxExposure);
    }

    private void FilterTrips()
    {
        filteredSpendData = spendData.Where(s =>
            (string.IsNullOrEmpty(selectedOwner) || s.Owner == selectedOwner) &&
            (string.IsNullOrEmpty(selectedPurpose) || s.Purpose == selectedPurpose) &&
            (!minAmount.HasValue || s.TotalAmount >= minAmount.Value) &&
            (string.IsNullOrEmpty(searchText) || 
             s.TripName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             s.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             s.Destination.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
            FilterByDateRange(s)
        ).OrderByDescending(s => s.TotalAmount).ToList();
        
        CalculateSummary();
        currentPage = 1;
        StateHasChanged();
    }

    private bool FilterByDateRange(TravelSpendData spend)
    {
        return selectedDateRange switch
        {
            "last-30" => spend.StartDate >= DateTime.Today.AddDays(-30),
            "last-90" => spend.StartDate >= DateTime.Today.AddDays(-90),
            "this-quarter" => spend.StartDate >= GetQuarterStart(),
            "this-year" => spend.StartDate.Year == DateTime.Today.Year,
            _ => true
        };
    }

    private DateTime GetQuarterStart()
    {
        int currentQuarter = (DateTime.Today.Month - 1) / 3 + 1;
        return new DateTime(DateTime.Today.Year, (currentQuarter - 1) * 3 + 1, 1);
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadSpendData();
        FilterTrips();
    }

    private async Task ExportReport()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Export functionality - Coming soon!");
    }

    private void ViewTripDetails(int tripId)
    {
        NavigationManager.NavigateTo($"/trips/{tripId}");
    }

    private void ViewTransactions(int tripId)
    {
        NavigationManager.NavigateTo($"/transactions?tripId={tripId}");
    }

    private async Task ShowTaxBreakdown(int tripId)
    {
        try
        {
            var breakdown = await TaxCalculationService.GetTaxBreakdownAsync(tripId);
            var spend = spendData.FirstOrDefault(s => s.TripId == tripId);
            
            if (breakdown != null && spend != null)
            {
                var message = $"Tax Breakdown for {spend.TripName}:\n\n";
                message += $"--- MEALS ---\n";
                message += $"Total Spent: ${breakdown.MealsCalculation.TotalMealsSpent:N2}\n";
                message += $"Per Day: ${breakdown.MealsCalculation.MealsPerDay:N2}\n";
                message += $"Cap: ${breakdown.MealsCalculation.MealsCap:N2}\n";
                message += $"Exposure: ${breakdown.MealsCalculation.TotalExposure:N2}\n\n";
                
                message += $"--- LODGING ---\n";
                message += $"Total Spent: ${breakdown.LodgingCalculation.TotalLodgingSpent:N2}\n";
                message += $"Per Night: ${breakdown.LodgingCalculation.LodgingPerNight:N2}\n";
                message += $"Cap: ${breakdown.LodgingCalculation.LodgingCap:N2}\n";
                message += $"Exposure: ${breakdown.LodgingCalculation.TotalExposure:N2}\n\n";
                
                message += $"--- AIRFARE ---\n";
                message += $"Total Spent: ${breakdown.AirfareAnalysis.TotalAirfareSpent:N2}\n";
                message += $"Premium Cabin: {(breakdown.AirfareAnalysis.HasPremiumCabins ? "Yes" : "No")}\n";
                if (breakdown.AirfareAnalysis.HasPremiumCabins)
                {
                    message += $"Classes: {string.Join(", ", breakdown.AirfareAnalysis.PremiumCabinClasses)}\n";
                }
                message += $"\n--- TOTAL TAX EXPOSURE ---\n";
                message += $"${breakdown.Summary.TotalTaxExposure:N2}";
                
                await JSRuntime.InvokeVoidAsync("alert", message);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading tax breakdown: {ex.Message}");
        }
    }

    private async Task ExportTripReport(int tripId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Exporting report for trip ID {tripId} - Coming soon!");
    }

    public class TravelSpendData
    {
        public int TripId { get; set; }
        public string TripName { get; set; } = "";
        public string Email { get; set; } = "";
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int Duration { get; set; }
        public string Destination { get; set; } = "";
        public string Owner { get; set; } = "";
        public string Purpose { get; set; } = "";
        public int TransactionCount { get; set; }
        public decimal TotalAmount { get; set; }
        public decimal CostPerDay { get; set; }
        public decimal AirfareAmount { get; set; }
        public decimal LodgingAmount { get; set; }
        public decimal MealsAmount { get; set; }
        public decimal TransportationAmount { get; set; }
        public decimal ClientEntertainmentAmount { get; set; }
        public decimal CommunicationAmount { get; set; }
        public decimal OtherAmount { get; set; }
        public decimal LodgingPerNight { get; set; }
        public decimal MealsPerDay { get; set; }
        public decimal TransportationPerDay { get; set; }
        public string CabinClasses { get; set; } = "";
        public bool HasPremiumCabin { get; set; }
        public decimal MealsTaxExposure { get; set; }
        public decimal LodgingTaxExposure { get; set; }
        public decimal TaxExposure { get; set; }
    }
}
</AuthorizeRoleView>