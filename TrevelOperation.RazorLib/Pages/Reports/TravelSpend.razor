@page "/travel-spend"
@using TravelOperation.Core.Models
@using TravelOperation.Core.Services
@inject ITransactionService TransactionService
@inject IJSRuntime JSRuntime

<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">üìä Travel Spend Report</h1>
            <p class="text-gray-600">Comprehensive spending analysis by trip with tax exposure</p>
        </div>
        <div class="flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshData">
                üîÑ Refresh
            </button>
            <button class="btn btn-primary" @onclick="ExportReport">
                üìä Export Report
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="card bg-blue-50 border-l-4 border-blue-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üß≥</div>
                    <div>
                        <div class="text-2xl font-bold text-blue-700">@totalTrips</div>
                        <div class="text-blue-600">Total Trips</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-green-50 border-l-4 border-green-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üí∞</div>
                    <div>
                        <div class="text-2xl font-bold text-green-700">$@totalSpend.ToString("N0")</div>
                        <div class="text-green-600">Total Spend</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-purple-50 border-l-4 border-purple-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üìà</div>
                    <div>
                        <div class="text-2xl font-bold text-purple-700">$@averagePerTrip.ToString("N0")</div>
                        <div class="text-purple-600">Average Per Trip</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-red-50 border-l-4 border-red-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚ö†Ô∏è</div>
                    <div>
                        <div class="text-2xl font-bold text-red-700">$@totalTaxExposure.ToString("N0")</div>
                        <div class="text-red-600">Tax Exposure</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-md mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Date Range</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedDateRange" @bind:after="FilterTrips">
                        <option value="">All Dates</option>
                        <option value="last-30">Last 30 days</option>
                        <option value="last-90">Last 90 days</option>
                        <option value="this-quarter">This quarter</option>
                        <option value="this-year">This year</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedOwner" @bind:after="FilterTrips">
                        <option value="">All Owners</option>
                        @foreach (var owner in availableOwners)
                        {
                            <option value="@owner">@owner</option>
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Purpose</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedPurpose" @bind:after="FilterTrips">
                        <option value="">All Purposes</option>
                        <option value="Business trip">üíº Business trip</option>
                        <option value="Onboarding">üéì Onboarding</option>
                        <option value="Company trip">üèñ Company trip</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Min Amount</span>
                    </label>
                    <input type="number" class="input input-bordered w-full" placeholder="Min $" @bind="minAmount" @bind:after="FilterTrips">
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" placeholder="Search trips..." @bind="searchText" @bind:after="FilterTrips">
                </div>
            </div>
        </div>
    </div>

    <!-- Travel Spend Table -->
    <div class="card bg-base-100 shadow-md">
        <div class="card-body">
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>Trip Details</th>
                            <th>Traveler</th>
                            <th>Duration</th>
                            <th># Trans</th>
                            <th>Total ($)</th>
                            <th>Per Day</th>
                            <th>Airfare</th>
                            <th>Lodging</th>
                            <th>Meals</th>
                            <th>Transport</th>
                            <th>Other</th>
                            <th>Tax Exposure</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var spend in filteredSpendData.Skip((currentPage - 1) * pageSize).Take(pageSize))
                        {
                            <tr class="hover" @ondblclick="() => ViewTripDetails(spend.TripId)">
                                <td>
                                    <div class="font-medium">@spend.TripName</div>
                                    <div class="text-sm text-gray-500">@spend.Destination</div>
                                    <div class="text-xs text-gray-400">@spend.StartDate.ToString("dd/MM/yyyy") - @spend.EndDate.ToString("dd/MM/yyyy")</div>
                                </td>
                                <td>@spend.Email</td>
                                <td>
                                    <div class="badge badge-info">@spend.Duration days</div>
                                </td>
                                <td>@spend.TransactionCount</td>
                                <td>
                                    <div class="font-bold text-lg">$@spend.TotalAmount.ToString("N2")</div>
                                </td>
                                <td>$@spend.CostPerDay.ToString("N0")</td>
                                <td>
                                    <div>$@spend.AirfareAmount.ToString("N0")</div>
                                    @if (!string.IsNullOrEmpty(spend.CabinClasses))
                                    {
                                        <div class="text-xs text-gray-500">@spend.CabinClasses</div>
                                    }
                                </td>
                                <td>
                                    <div>$@spend.LodgingAmount.ToString("N0")</div>
                                    <div class="text-xs text-gray-500">$@spend.LodgingPerNight.ToString("N0")/night</div>
                                </td>
                                <td>
                                    <div>$@spend.MealsAmount.ToString("N0")</div>
                                    <div class="text-xs text-gray-500">$@spend.MealsPerDay.ToString("N0")/day</div>
                                </td>
                                <td>
                                    <div>$@spend.TransportationAmount.ToString("N0")</div>
                                    <div class="text-xs text-gray-500">$@spend.TransportationPerDay.ToString("N0")/day</div>
                                </td>
                                <td>$@spend.OtherAmount.ToString("N0")</td>
                                <td>
                                    @if (spend.TaxExposure > 0)
                                    {
                                        <div class="badge badge-warning cursor-pointer" @onclick="() => ShowTaxBreakdown(spend.TripId)">
                                            $@spend.TaxExposure.ToString("N2")
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="badge badge-success">$0</div>
                                    }
                                </td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-sm">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                                            <li><a @onclick="() => ViewTripDetails(spend.TripId)">üëÅÔ∏è View Details</a></li>
                                            <li><a @onclick="() => ViewTransactions(spend.TripId)">üìã View Transactions</a></li>
                                            <li><a @onclick="() => ShowTaxBreakdown(spend.TripId)">üíº Tax Breakdown</a></li>
                                            <li><hr /></li>
                                            <li><a @onclick="() => ExportTripReport(spend.TripId)">üìä Export Trip</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-500">
                    Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, filteredSpendData.Count) of @filteredSpendData.Count trips
                </div>
                <div class="join">
                    <button class="join-item btn btn-sm" disabled="@(currentPage <= 1)" @onclick="() => ChangePage(currentPage - 1)">¬´</button>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        <button class="join-item btn btn-sm @(i == currentPage ? "btn-active" : "")" @onclick="() => ChangePage(i)">@i</button>
                    }
                    <button class="join-item btn btn-sm" disabled="@(currentPage >= totalPages)" @onclick="() => ChangePage(currentPage + 1)">¬ª</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<TravelSpendData> spendData = new();
    private List<TravelSpendData> filteredSpendData = new();
    private List<string> availableOwners = new();
    
    // Filters
    private string selectedDateRange = "";
    private string selectedOwner = "";
    private string selectedPurpose = "";
    private decimal? minAmount;
    private string searchText = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 15;
    private int totalPages => (int)Math.Ceiling((double)filteredSpendData.Count / pageSize);
    
    // Summary data
    private int totalTrips = 0;
    private decimal totalSpend = 0;
    private decimal averagePerTrip = 0;
    private decimal totalTaxExposure = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadSpendData();
        CalculateSummary();
        FilterTrips();
    }

    private async Task LoadSpendData()
    {
        spendData = GenerateMockSpendData();
        availableOwners = spendData.Select(s => s.Owner).Where(o => !string.IsNullOrEmpty(o)).Distinct().ToList()!;
    }

    private void CalculateSummary()
    {
        totalTrips = filteredSpendData.Count;
        totalSpend = filteredSpendData.Sum(s => s.TotalAmount);
        averagePerTrip = totalTrips > 0 ? totalSpend / totalTrips : 0;
        totalTaxExposure = filteredSpendData.Sum(s => s.TaxExposure);
    }

    private void FilterTrips()
    {
        filteredSpendData = spendData.Where(s =>
            (string.IsNullOrEmpty(selectedOwner) || s.Owner == selectedOwner) &&
            (string.IsNullOrEmpty(selectedPurpose) || s.Purpose == selectedPurpose) &&
            (!minAmount.HasValue || s.TotalAmount >= minAmount.Value) &&
            (string.IsNullOrEmpty(searchText) || 
             s.TripName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             s.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             s.Destination.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
            FilterByDateRange(s)
        ).OrderByDescending(s => s.TotalAmount).ToList();
        
        CalculateSummary();
        currentPage = 1;
        StateHasChanged();
    }

    private bool FilterByDateRange(TravelSpendData spend)
    {
        return selectedDateRange switch
        {
            "last-30" => spend.StartDate >= DateTime.Today.AddDays(-30),
            "last-90" => spend.StartDate >= DateTime.Today.AddDays(-90),
            "this-quarter" => spend.StartDate >= GetQuarterStart(),
            "this-year" => spend.StartDate.Year == DateTime.Today.Year,
            _ => true
        };
    }

    private DateTime GetQuarterStart()
    {
        int currentQuarter = (DateTime.Today.Month - 1) / 3 + 1;
        return new DateTime(DateTime.Today.Year, (currentQuarter - 1) * 3 + 1, 1);
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadSpendData();
        FilterTrips();
    }

    private async Task ExportReport()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Export functionality - Coming soon!");
    }

    private async Task ViewTripDetails(int tripId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Viewing trip details for ID {tripId} - Navigation pending");
    }

    private async Task ViewTransactions(int tripId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Viewing transactions for trip ID {tripId} - Navigation pending");
    }

    private async Task ShowTaxBreakdown(int tripId)
    {
        var spend = spendData.FirstOrDefault(s => s.TripId == tripId);
        if (spend != null)
        {
            var message = $"Tax Breakdown for {spend.TripName}:\n\n";
            message += $"Meals Cap Exceeded: ${spend.MealsTaxExposure:N2}\n";
            message += $"Lodging Cap Exceeded: ${spend.LodgingTaxExposure:N2}\n";
            message += $"Premium Cabin Flag: {(spend.HasPremiumCabin ? "Yes" : "No")}\n\n";
            message += $"Total Tax Exposure: ${spend.TaxExposure:N2}";
            
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
    }

    private async Task ExportTripReport(int tripId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Exporting report for trip ID {tripId} - Coming soon!");
    }

    private List<TravelSpendData> GenerateMockSpendData()
    {
        var random = new Random();
        var spendList = new List<TravelSpendData>();
        var cities = new[] { ("London", "United Kingdom"), ("Paris", "France"), ("New York", "United States"), ("Tokyo", "Japan"), ("Berlin", "Germany") };
        var emails = new[] { "john.doe@company.com", "jane.smith@company.com", "mike.johnson@company.com", "sarah.wilson@company.com" };
        var owners = new[] { "Maayan Chesler", "Martina Poplinsk" };
        var purposes = new[] { "Business trip", "Onboarding", "Company trip" };

        for (int i = 1; i <= 30; i++)
        {
            var startDate = DateTime.Today.AddDays(random.Next(-180, -10));
            var duration = random.Next(2, 12);
            var endDate = startDate.AddDays(duration - 1);
            var city = cities[random.Next(cities.Length)];

            var airfare = random.Next(200, 1200);
            var lodging = random.Next(80, 350) * duration;
            var meals = random.Next(30, 120) * duration;
            var transport = random.Next(20, 80) * duration;
            var other = random.Next(0, 200);
            var totalAmount = airfare + lodging + meals + transport + other;

            // Calculate tax exposure
            var mealsPerDay = (decimal)meals / duration;
            var lodgingPerNight = (decimal)lodging / duration;
            var mealsCap = 75; // Mock cap
            var lodgingCap = 250; // Mock cap
            
            var mealsTaxExposure = Math.Max(0, (mealsPerDay - mealsCap) * duration);
            var lodgingTaxExposure = Math.Max(0, (lodgingPerNight - lodgingCap) * duration);
            var hasPremiumCabin = random.NextDouble() > 0.8;

            spendList.Add(new TravelSpendData
            {
                TripId = i,
                TripName = $"Trip to {city.Item1}",
                Email = emails[random.Next(emails.Length)],
                StartDate = startDate,
                EndDate = endDate,
                Duration = duration,
                Destination = $"{city.Item1}, {city.Item2}",
                Owner = owners[random.Next(owners.Length)],
                Purpose = purposes[random.Next(purposes.Length)],
                TransactionCount = random.Next(4, 15),
                TotalAmount = totalAmount,
                CostPerDay = totalAmount / duration,
                AirfareAmount = airfare,
                LodgingAmount = lodging,
                MealsAmount = meals,
                TransportationAmount = transport,
                OtherAmount = other,
                LodgingPerNight = lodgingPerNight,
                MealsPerDay = mealsPerDay,
                TransportationPerDay = (decimal)transport / duration,
                CabinClasses = hasPremiumCabin ? "Business" : "Economy",
                HasPremiumCabin = hasPremiumCabin,
                MealsTaxExposure = mealsTaxExposure,
                LodgingTaxExposure = lodgingTaxExposure,
                TaxExposure = mealsTaxExposure + lodgingTaxExposure
            });
        }

        return spendList.OrderByDescending(s => s.TotalAmount).ToList();
    }

    public class TravelSpendData
    {
        public int TripId { get; set; }
        public string TripName { get; set; } = "";
        public string Email { get; set; } = "";
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int Duration { get; set; }
        public string Destination { get; set; } = "";
        public string Owner { get; set; } = "";
        public string Purpose { get; set; } = "";
        public int TransactionCount { get; set; }
        public decimal TotalAmount { get; set; }
        public decimal CostPerDay { get; set; }
        public decimal AirfareAmount { get; set; }
        public decimal LodgingAmount { get; set; }
        public decimal MealsAmount { get; set; }
        public decimal TransportationAmount { get; set; }
        public decimal OtherAmount { get; set; }
        public decimal LodgingPerNight { get; set; }
        public decimal MealsPerDay { get; set; }
        public decimal TransportationPerDay { get; set; }
        public string CabinClasses { get; set; } = "";
        public bool HasPremiumCabin { get; set; }
        public decimal MealsTaxExposure { get; set; }
        public decimal LodgingTaxExposure { get; set; }
        public decimal TaxExposure { get; set; }
    }
}