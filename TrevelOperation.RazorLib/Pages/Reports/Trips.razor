@page "/trips"
@using TravelOperation.Core.Models
@using TravelOperation.Core.Services
@inject ITransactionService TransactionService
@inject IJSRuntime JSRuntime

<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">üß≥ Trip Management</h1>
            <p class="text-gray-600">Manage business trips and link transactions</p>
        </div>
        <button class="btn btn-primary" @onclick="ShowCreateTripModal">
            ‚ûï Create Trip
        </button>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-md mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedOwner">
                        <option value="">All Owners</option>
                        @foreach (var owner in availableOwners)
                        {
                            <option value="@owner">@owner</option>
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Status</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedStatus">
                        <option value="">All Status</option>
                        @foreach (var status in availableStatuses)
                        {
                            <option value="@status.Name">@status.Emoji @status.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Purpose</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedPurpose">
                        <option value="">All Purposes</option>
                        @foreach (var purpose in availablePurposes)
                        {
                            <option value="@purpose.Name">@purpose.Emoji @purpose.Name</option>
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" placeholder="Search trips..." @bind="searchText" @bind:after="FilterTrips">
                </div>
            </div>
        </div>
    </div>

    <!-- Trip Table -->
    <div class="card bg-base-100 shadow-md">
        <div class="card-body">
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>Trip Name</th>
                            <th>Traveler</th>
                            <th>Dates</th>
                            <th>Duration</th>
                            <th>Destination</th>
                            <th>Purpose</th>
                            <th>Status</th>
                            <th>Validation</th>
                            <th>Owner</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var trip in filteredTrips.Skip((currentPage - 1) * pageSize).Take(pageSize))
                        {
                            <tr class="hover">
                                <td>
                                    <div class="font-medium text-gray-900">@trip.TripName</div>
                                    @if (trip.IsManual)
                                    {
                                        <div class="badge badge-secondary badge-sm">Manual</div>
                                    }
                                </td>
                                <td>@trip.Email</td>
                                <td>
                                    <div>@trip.StartDate.ToString("dd/MM/yyyy")</div>
                                    <div class="text-sm text-gray-500">to @trip.EndDate.ToString("dd/MM/yyyy")</div>
                                </td>
                                <td>
                                    <div class="badge badge-info">@trip.Duration days</div>
                                </td>
                                <td>
                                    <div>@trip.City1, @trip.Country1</div>
                                    @if (!string.IsNullOrEmpty(trip.City2))
                                    {
                                        <div class="text-sm text-gray-500">+ @trip.City2, @trip.Country2</div>
                                    }
                                </td>
                                <td>
                                    @if (trip.Purpose != null)
                                    {
                                        <div class="badge badge-outline">@trip.Purpose.Emoji @trip.Purpose.Name</div>
                                    }
                                </td>
                                <td>
                                    @if (trip.Status != null)
                                    {
                                        <div class="badge @GetStatusBadgeClass(trip.Status.Name)">@trip.Status.Emoji @trip.Status.Name</div>
                                    }
                                </td>
                                <td>
                                    @if (trip.ValidationStatus != null)
                                    {
                                        <div class="badge @GetValidationBadgeClass(trip.ValidationStatus.Name)">@trip.ValidationStatus.Emoji @trip.ValidationStatus.Name</div>
                                    }
                                </td>
                                <td>
                                    @if (trip.Owner != null)
                                    {
                                        <div>@trip.Owner.Name</div>
                                    }
                                </td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-sm">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                                            <li><a @onclick="() => ViewTripDetails(trip)">üëÅÔ∏è View Details</a></li>
                                            <li><a @onclick="() => EditTrip(trip)">‚úèÔ∏è Edit Trip</a></li>
                                            <li><a @onclick="() => LinkTransactions(trip)">üîó Link Transactions</a></li>
                                            <li><a @onclick="() => ViewTransactions(trip)">üìã View Transactions</a></li>
                                            <li><hr /></li>
                                            <li><a @onclick="() => DeleteTrip(trip)" class="text-error">üóëÔ∏è Delete</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-500">
                    Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, filteredTrips.Count) of @filteredTrips.Count trips
                </div>
                <div class="join">
                    <button class="join-item btn btn-sm" disabled="@(currentPage <= 1)" @onclick="() => ChangePage(currentPage - 1)">¬´</button>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        <button class="join-item btn btn-sm @(i == currentPage ? "btn-active" : "")" @onclick="() => ChangePage(i)">@i</button>
                    }
                    <button class="join-item btn btn-sm" disabled="@(currentPage >= totalPages)" @onclick="() => ChangePage(currentPage + 1)">¬ª</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create/Edit Trip Modal -->
@if (showTripModal)
{
    <div class="modal modal-open">
        <div class="modal-box w-11/12 max-w-2xl">
            <form method="dialog">
                <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2" @onclick="HideTripModal">‚úï</button>
            </form>
            <h3 class="font-bold text-lg mb-4">@(editingTrip?.TripId > 0 ? "Edit Trip" : "Create New Trip")</h3>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Trip Name *</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" @bind="editingTrip.TripName" placeholder="Enter trip name">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Traveler Email *</span>
                    </label>
                    <input type="email" class="input input-bordered w-full" @bind="editingTrip.Email" placeholder="traveler@company.com">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Start Date *</span>
                    </label>
                    <input type="date" class="input input-bordered w-full" @bind="editingTrip.StartDate">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">End Date *</span>
                    </label>
                    <input type="date" class="input input-bordered w-full" @bind="editingTrip.EndDate">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Country 1 *</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" @bind="editingTrip.Country1" placeholder="Primary destination country">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">City 1 *</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" @bind="editingTrip.City1" placeholder="Primary destination city">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Country 2</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" @bind="editingTrip.Country2" placeholder="Secondary destination (optional)">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">City 2</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" @bind="editingTrip.City2" placeholder="Secondary destination (optional)">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Purpose *</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="editingTrip.PurposeId">
                        <option value="">Select Purpose</option>
                        @foreach (var purpose in availablePurposes)
                        {
                            <option value="@purpose.PurposeId">@purpose.Emoji @purpose.Name</option>
                        }
                    </select>
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Trip Type *</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="editingTrip.TripTypeId">
                        <option value="">Select Trip Type</option>
                        @foreach (var tripType in availableTripTypes)
                        {
                            <option value="@tripType.TripTypeId">@tripType.Emoji @tripType.Name</option>
                        }
                    </select>
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Status *</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="editingTrip.StatusId">
                        <option value="">Select Status</option>
                        @foreach (var status in availableStatuses)
                        {
                            <option value="@status.StatusId">@status.Emoji @status.Name</option>
                        }
                    </select>
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner *</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="editingTrip.OwnerId">
                        <option value="">Select Owner</option>
                        @foreach (var owner in availableOwnersList)
                        {
                            <option value="@owner.OwnerId">@owner.Name</option>
                        }
                    </select>
                </div>
            </div>
            
            <div class="modal-action">
                <button class="btn btn-ghost" @onclick="HideTripModal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveTrip">@(editingTrip?.TripId > 0 ? "Update" : "Create") Trip</button>
            </div>
        </div>
    </div>
}

<!-- Trip Details Modal -->
@if (showDetailsModal && selectedTripDetails != null)
{
    <div class="modal modal-open">
        <div class="modal-box w-11/12 max-w-4xl">
            <form method="dialog">
                <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2" @onclick="HideDetailsModal">‚úï</button>
            </form>
            <h3 class="font-bold text-lg mb-4">üß≥ Trip Details: @selectedTripDetails.TripName</h3>
            
            <!-- Trip Information -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div class="space-y-2">
                    <div><strong>Traveler:</strong> @selectedTripDetails.Email</div>
                    <div><strong>Dates:</strong> @selectedTripDetails.StartDate.ToString("dd/MM/yyyy") - @selectedTripDetails.EndDate.ToString("dd/MM/yyyy")</div>
                    <div><strong>Duration:</strong> @selectedTripDetails.Duration days</div>
                    <div><strong>Purpose:</strong> @selectedTripDetails.Purpose?.Emoji @selectedTripDetails.Purpose?.Name</div>
                </div>
                <div class="space-y-2">
                    <div><strong>Destination:</strong> @selectedTripDetails.City1, @selectedTripDetails.Country1</div>
                    @if (!string.IsNullOrEmpty(selectedTripDetails.City2))
                    {
                        <div><strong>Secondary:</strong> @selectedTripDetails.City2, @selectedTripDetails.Country2</div>
                    }
                    <div><strong>Status:</strong> @selectedTripDetails.Status?.Emoji @selectedTripDetails.Status?.Name</div>
                    <div><strong>Owner:</strong> @selectedTripDetails.Owner?.Name</div>
                </div>
            </div>
            
            <!-- Linked Transactions -->
            <div class="mb-4">
                <h4 class="font-semibold text-lg mb-2">üí≥ Linked Transactions (@linkedTransactions.Count)</h4>
                @if (linkedTransactions.Any())
                {
                    <div class="overflow-x-auto">
                        <table class="table table-zebra table-sm w-full">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Category</th>
                                    <th>Vendor</th>
                                    <th>Amount</th>
                                    <th>Amount (USD)</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var transaction in linkedTransactions)
                                {
                                    <tr>
                                        <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                        <td>@transaction.Category?.Emoji @transaction.Category?.Name</td>
                                        <td>@transaction.Vendor</td>
                                        <td>@transaction.Currency @transaction.Amount.ToString("N2")</td>
                                        <td>$@(transaction.AmountUSD?.ToString("N2") ?? "0.00")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">
                        <span>No transactions linked to this trip yet.</span>
                    </div>
                }
            </div>
            
            <div class="modal-action">
                <button class="btn btn-ghost" @onclick="HideDetailsModal">Close</button>
                <button class="btn btn-primary" @onclick="() => LinkTransactions(selectedTripDetails)">üîó Link Transactions</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Trip> trips = new();
    private List<Trip> filteredTrips = new();
    private List<Transaction> linkedTransactions = new();
    
    // Lookup data
    private List<Purpose> availablePurposes = new();
    private List<TripType> availableTripTypes = new();
    private List<Status> availableStatuses = new();
    private List<Owner> availableOwnersList = new();
    private List<string> availableOwners = new();
    
    // Filters
    private string selectedOwner = "";
    private string selectedStatus = "";
    private string selectedPurpose = "";
    private string searchText = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => (int)Math.Ceiling((double)filteredTrips.Count / pageSize);
    
    // Modals
    private bool showTripModal = false;
    private bool showDetailsModal = false;
    private Trip? editingTrip;
    private Trip? selectedTripDetails;

    protected override async Task OnInitializedAsync()
    {
        await LoadTrips();
        await LoadLookupData();
        FilterTrips();
    }

    private async Task LoadTrips()
    {
        // Mock data - replace with actual service call
        trips = GenerateMockTrips();
    }

    private async Task LoadLookupData()
    {
        // Mock data - replace with actual service calls
        availablePurposes = new List<Purpose>
        {
            new Purpose { PurposeId = 1, Name = "Business trip", Emoji = "üíº" },
            new Purpose { PurposeId = 2, Name = "Onboarding", Emoji = "üéì" },
            new Purpose { PurposeId = 3, Name = "Company trip", Emoji = "üèñ" },
            new Purpose { PurposeId = 4, Name = "BCP", Emoji = "üõ°" }
        };

        availableTripTypes = new List<TripType>
        {
            new TripType { TripTypeId = 1, Name = "Domestic", Emoji = "üè†" },
            new TripType { TripTypeId = 2, Name = "International", Emoji = "üåç" },
            new TripType { TripTypeId = 3, Name = "Local", Emoji = "üìç" }
        };

        availableStatuses = new List<Status>
        {
            new Status { StatusId = 1, Name = "Canceled", Emoji = "üî¥" },
            new Status { StatusId = 2, Name = "Upcoming", Emoji = "‚ö™" },
            new Status { StatusId = 3, Name = "Ongoing", Emoji = "üîµ" },
            new Status { StatusId = 4, Name = "Completed", Emoji = "üü¢" }
        };

        availableOwnersList = new List<Owner>
        {
            new Owner { OwnerId = 1, Name = "Maayan Chesler", Email = "maayan@company.com" },
            new Owner { OwnerId = 2, Name = "Martina Poplinsk", Email = "martina@company.com" }
        };

        availableOwners = availableOwnersList.Select(o => o.Name).ToList();
    }

    private void FilterTrips()
    {
        filteredTrips = trips.Where(t =>
            (string.IsNullOrEmpty(selectedOwner) || t.Owner?.Name == selectedOwner) &&
            (string.IsNullOrEmpty(selectedStatus) || t.Status?.Name == selectedStatus) &&
            (string.IsNullOrEmpty(selectedPurpose) || t.Purpose?.Name == selectedPurpose) &&
            (string.IsNullOrEmpty(searchText) || 
             t.TripName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             t.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             t.City1.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             t.Country1.Contains(searchText, StringComparison.OrdinalIgnoreCase))
        ).ToList();
        
        currentPage = 1;
        StateHasChanged();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void ShowCreateTripModal()
    {
        editingTrip = new Trip
        {
            StartDate = DateTime.Today,
            EndDate = DateTime.Today.AddDays(1),
            IsManual = true
        };
        showTripModal = true;
    }

    private void EditTrip(Trip trip)
    {
        editingTrip = new Trip
        {
            TripId = trip.TripId,
            TripName = trip.TripName,
            Email = trip.Email,
            StartDate = trip.StartDate,
            EndDate = trip.EndDate,
            Country1 = trip.Country1,
            City1 = trip.City1,
            Country2 = trip.Country2,
            City2 = trip.City2,
            PurposeId = trip.PurposeId,
            TripTypeId = trip.TripTypeId,
            StatusId = trip.StatusId,
            OwnerId = trip.OwnerId,
            IsManual = trip.IsManual
        };
        showTripModal = true;
    }

    private void HideTripModal()
    {
        showTripModal = false;
        editingTrip = null;
    }

    private async Task SaveTrip()
    {
        if (editingTrip == null) return;

        // Calculate duration
        editingTrip.Duration = (editingTrip.EndDate - editingTrip.StartDate).Days + 1;

        if (editingTrip.TripId > 0)
        {
            // Update existing trip
            var existingTrip = trips.FirstOrDefault(t => t.TripId == editingTrip.TripId);
            if (existingTrip != null)
            {
                existingTrip.TripName = editingTrip.TripName;
                existingTrip.Email = editingTrip.Email;
                existingTrip.StartDate = editingTrip.StartDate;
                existingTrip.EndDate = editingTrip.EndDate;
                existingTrip.Duration = editingTrip.Duration;
                existingTrip.Country1 = editingTrip.Country1;
                existingTrip.City1 = editingTrip.City1;
                existingTrip.Country2 = editingTrip.Country2;
                existingTrip.City2 = editingTrip.City2;
                existingTrip.PurposeId = editingTrip.PurposeId;
                existingTrip.TripTypeId = editingTrip.TripTypeId;
                existingTrip.StatusId = editingTrip.StatusId;
                existingTrip.OwnerId = editingTrip.OwnerId;
                
                // Update navigation properties
                existingTrip.Purpose = availablePurposes.FirstOrDefault(p => p.PurposeId == editingTrip.PurposeId);
                existingTrip.TripType = availableTripTypes.FirstOrDefault(t => t.TripTypeId == editingTrip.TripTypeId);
                existingTrip.Status = availableStatuses.FirstOrDefault(s => s.StatusId == editingTrip.StatusId);
                existingTrip.Owner = availableOwnersList.FirstOrDefault(o => o.OwnerId == editingTrip.OwnerId);
            }
        }
        else
        {
            // Create new trip
            editingTrip.TripId = trips.Max(t => t.TripId) + 1;
            editingTrip.Purpose = availablePurposes.FirstOrDefault(p => p.PurposeId == editingTrip.PurposeId);
            editingTrip.TripType = availableTripTypes.FirstOrDefault(t => t.TripTypeId == editingTrip.TripTypeId);
            editingTrip.Status = availableStatuses.FirstOrDefault(s => s.StatusId == editingTrip.StatusId);
            editingTrip.Owner = availableOwnersList.FirstOrDefault(o => o.OwnerId == editingTrip.OwnerId);
            trips.Add(editingTrip);
        }

        FilterTrips();
        HideTripModal();
        
        await JSRuntime.InvokeVoidAsync("alert", editingTrip.TripId > 0 ? "Trip updated successfully!" : "Trip created successfully!");
    }

    private async Task DeleteTrip(Trip trip)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{trip.TripName}'?");
        if (confirmed)
        {
            trips.Remove(trip);
            FilterTrips();
            await JSRuntime.InvokeVoidAsync("alert", "Trip deleted successfully!");
        }
    }

    private async Task ViewTripDetails(Trip trip)
    {
        selectedTripDetails = trip;
        
        // Load linked transactions for this trip
        linkedTransactions = GenerateMockLinkedTransactions(trip.TripId);
        
        showDetailsModal = true;
    }

    private void HideDetailsModal()
    {
        showDetailsModal = false;
        selectedTripDetails = null;
        linkedTransactions.Clear();
    }

    private async Task LinkTransactions(Trip trip)
    {
        // TODO: Implement transaction linking modal
        await JSRuntime.InvokeVoidAsync("alert", $"Transaction linking for '{trip.TripName}' - Coming soon!");
    }

    private async Task ViewTransactions(Trip trip)
    {
        // Navigate to transactions page with trip filter
        await JSRuntime.InvokeVoidAsync("alert", $"Viewing transactions for '{trip.TripName}' - Coming soon!");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Canceled" => "badge-error",
            "Upcoming" => "badge-ghost",
            "Ongoing" => "badge-info",
            "Completed" => "badge-success",
            _ => "badge-ghost"
        };
    }

    private string GetValidationBadgeClass(string validation)
    {
        return validation switch
        {
            "Not ready to validate" => "badge-ghost",
            "Ready to validate" => "badge-warning",
            "Validated" => "badge-success",
            _ => "badge-ghost"
        };
    }

    private List<Trip> GenerateMockTrips()
    {
        var random = new Random();
        var purposes = new List<Purpose>
        {
            new Purpose { PurposeId = 1, Name = "Business trip", Emoji = "üíº" },
            new Purpose { PurposeId = 2, Name = "Onboarding", Emoji = "üéì" },
            new Purpose { PurposeId = 3, Name = "Company trip", Emoji = "üèñ" }
        };
        
        var statuses = new List<Status>
        {
            new Status { StatusId = 1, Name = "Completed", Emoji = "üü¢" },
            new Status { StatusId = 2, Name = "Upcoming", Emoji = "‚ö™" },
            new Status { StatusId = 3, Name = "Ongoing", Emoji = "üîµ" }
        };
        
        var validationStatuses = new List<ValidationStatus>
        {
            new ValidationStatus { ValidationStatusId = 1, Name = "Validated", Emoji = "üü¢" },
            new ValidationStatus { ValidationStatusId = 2, Name = "Ready to validate", Emoji = "üü°" },
            new ValidationStatus { ValidationStatusId = 3, Name = "Not ready to validate", Emoji = "‚ö™" }
        };
        
        var owners = new List<Owner>
        {
            new Owner { OwnerId = 1, Name = "Maayan Chesler", Email = "maayan@company.com" },
            new Owner { OwnerId = 2, Name = "Martina Poplinsk", Email = "martina@company.com" }
        };

        var mockTrips = new List<Trip>();
        var cities = new[] { ("London", "United Kingdom"), ("Paris", "France"), ("New York", "United States"), ("Tokyo", "Japan"), ("Berlin", "Germany") };
        var emails = new[] { "john.doe@company.com", "jane.smith@company.com", "mike.johnson@company.com", "sarah.wilson@company.com" };

        for (int i = 1; i <= 25; i++)
        {
            var startDate = DateTime.Today.AddDays(random.Next(-365, 90));
            var endDate = startDate.AddDays(random.Next(1, 14));
            var city = cities[random.Next(cities.Length)];
            var purpose = purposes[random.Next(purposes.Count)];
            var status = statuses[random.Next(statuses.Count)];
            var validation = validationStatuses[random.Next(validationStatuses.Count)];
            var owner = owners[random.Next(owners.Count)];

            mockTrips.Add(new Trip
            {
                TripId = i,
                TripName = $"Trip to {city.Item1}",
                Email = emails[random.Next(emails.Length)],
                StartDate = startDate,
                EndDate = endDate,
                Duration = (endDate - startDate).Days + 1,
                Country1 = city.Item2,
                City1 = city.Item1,
                PurposeId = purpose.PurposeId,
                Purpose = purpose,
                StatusId = status.StatusId,
                Status = status,
                ValidationStatusId = validation.ValidationStatusId,
                ValidationStatus = validation,
                OwnerId = owner.OwnerId,
                Owner = owner,
                IsManual = random.NextDouble() > 0.7
            });
        }

        return mockTrips;
    }

    private List<Transaction> GenerateMockLinkedTransactions(int tripId)
    {
        var random = new Random();
        var categories = new List<Category>
        {
            new Category { CategoryId = 1, Name = "Airfare", Emoji = "‚úà" },
            new Category { CategoryId = 2, Name = "Lodging", Emoji = "üè®" },
            new Category { CategoryId = 3, Name = "Meals", Emoji = "üçΩ" },
            new Category { CategoryId = 4, Name = "Transportation", Emoji = "üöï" }
        };

        var transactions = new List<Transaction>();
        var numTransactions = random.Next(3, 8);

        for (int i = 0; i < numTransactions; i++)
        {
            var category = categories[random.Next(categories.Count)];
            var amount = random.Next(50, 1000);
            
            transactions.Add(new Transaction
            {
                TransactionId = $"TXN-{tripId}-{i + 1}",
                TransactionDate = DateTime.Today.AddDays(random.Next(-30, 0)),
                CategoryId = category.CategoryId,
                Category = category,
                Vendor = $"Vendor {i + 1}",
                Currency = "USD",
                Amount = amount,
                AmountUSD = amount,
                TripId = tripId
            });
        }

        return transactions;
    }
}