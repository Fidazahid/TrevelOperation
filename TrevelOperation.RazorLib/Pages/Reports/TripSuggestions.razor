@page "/trips/suggestions"
@using TravelOperation.Core.Models.Entities
@using TravelOperation.Core.Models.Lookup
@using TravelOperation.Core.Services.Interfaces
@using TrevelOperation.RazorLib.Components
@inject ITripService TripService
@inject ITransactionService TransactionService
@inject TrevelOperation.Service.ISettingsService SettingsService
@inject IJSRuntime JSRuntime

<AuthorizeRoleView RequiredRoles='new List<string> { "Finance", "Owner" }'>
<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">ü§ñ Trip Suggestions</h1>
            <p class="text-gray-600">Auto-detect trips from transaction patterns</p>
        </div>
        <div class="flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshSuggestions">
                üîÑ Refresh
            </button>
            <button class="btn btn-primary" @onclick="ApproveAllSuggestions">
                ‚úÖ Approve All
            </button>
        </div>
    </div>

    <!-- Algorithm Info -->
    <div class="alert alert-info mb-6">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
        <div>
            <h3 class="font-bold">How Trip Detection Works</h3>
            <p>The system groups transactions by email and date proximity (¬±2 days), looking for airfare/lodging patterns to identify potential trips.</p>
        </div>
    </div>

    <!-- Suggestions -->
    @if (tripSuggestions.Any())
    {
        <div class="space-y-6">
            @foreach (var suggestion in tripSuggestions)
            {
                <div class="card bg-base-100 shadow-md border-l-4 @GetSuggestionBorderClass(suggestion.Confidence)">
                    <div class="card-body">
                        <div class="flex justify-between items-start mb-4">
                            <div>
                                <h3 class="card-title text-lg">
                                    üß≥ @suggestion.SuggestedTripName
                                    <div class="badge @GetConfidenceBadgeClass(suggestion.Confidence)">
                                        @(suggestion.Confidence)% confidence
                                    </div>
                                </h3>
                                <p class="text-gray-600">@suggestion.Email ‚Ä¢ @suggestion.DateRange</p>
                            </div>
                            <div class="flex gap-2">
                                <button class="btn btn-success btn-sm" @onclick="() => ApproveSuggestion(suggestion)">
                                    ‚úÖ Approve
                                </button>
                                <button class="btn btn-error btn-sm" @onclick="() => RejectSuggestion(suggestion)">
                                    ‚ùå Reject
                                </button>
                                <button class="btn btn-warning btn-sm" @onclick="() => EditSuggestion(suggestion)">
                                    ‚úèÔ∏è Edit
                                </button>
                            </div>
                        </div>

                        <!-- Trip Details Preview -->
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                            <div class="stat">
                                <div class="stat-title">Duration</div>
                                <div class="stat-value text-sm">@suggestion.Duration days</div>
                                <div class="stat-desc">@suggestion.StartDate.ToString("dd/MM/yyyy") - @suggestion.EndDate.ToString("dd/MM/yyyy")</div>
                            </div>
                            <div class="stat">
                                <div class="stat-title">Destination</div>
                                <div class="stat-value text-sm">@suggestion.Destination</div>
                                <div class="stat-desc">@suggestion.DetectedCountry</div>
                            </div>
                            <div class="stat">
                                <div class="stat-title">Transactions</div>
                                <div class="stat-value text-sm">@suggestion.TransactionCount</div>
                                <div class="stat-desc">Total amount: $@suggestion.TotalAmount.ToString("N2")</div>
                            </div>
                            <div class="stat">
                                <div class="stat-title">Detection Reason</div>
                                <div class="stat-value text-sm">@suggestion.DetectionReason</div>
                                <div class="stat-desc">@suggestion.KeyIndicators</div>
                            </div>
                        </div>

                        <!-- Related Transactions -->
                        <div class="collapse collapse-arrow border border-base-300">
                            <input type="checkbox" />
                            <div class="collapse-title text-sm font-medium">
                                üìã View Related Transactions (@suggestion.Transactions.Count)
                            </div>
                            <div class="collapse-content">
                                <div class="overflow-x-auto">
                                    <table class="table table-zebra table-sm w-full">
                                        <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>Category</th>
                                                <th>Vendor</th>
                                                <th>Address</th>
                                                <th>Amount</th>
                                                <th>Key Indicator</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var transaction in suggestion.Transactions.OrderBy(t => t.TransactionDate))
                                            {
                                                <tr class="@(suggestion.KeyTransactionIds.Contains(transaction.TransactionId) ? "bg-yellow-50" : "")">
                                                    <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                                    <td>@transaction.Category?.Emoji @transaction.Category?.Name</td>
                                                    <td>@transaction.Vendor</td>
                                                    <td class="text-xs">@transaction.Address</td>
                                                    <td>@transaction.Currency @transaction.Amount.ToString("N2")</td>
                                                    <td>
                                                        @if (suggestion.KeyTransactionIds.Contains(transaction.TransactionId))
                                                        {
                                                            <div class="badge badge-warning badge-xs">Key</div>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="card bg-base-100 shadow-md">
            <div class="card-body text-center">
                <div class="text-6xl mb-4">üéØ</div>
                <h3 class="text-xl font-bold mb-2">No Trip Suggestions Found</h3>
                <p class="text-gray-600 mb-4">All transaction patterns have been processed or no clear trip patterns detected.</p>
                <button class="btn btn-primary" @onclick="RefreshSuggestions">üîÑ Refresh Suggestions</button>
            </div>
        </div>
    }
</div>

<!-- Edit Suggestion Modal -->
@if (showEditModal && editingSuggestion != null)
{
    <div class="modal modal-open">
        <div class="modal-box w-11/12 max-w-2xl">
            <form method="dialog">
                <button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2" @onclick="HideEditModal">‚úï</button>
            </form>
            <h3 class="font-bold text-lg mb-4">‚úèÔ∏è Edit Trip Suggestion</h3>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Trip Name</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" @bind="editingSuggestion.SuggestedTripName">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Destination City</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" @bind="editingSuggestion.Destination">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Country</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" @bind="editingSuggestion.DetectedCountry">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Purpose</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="editingSuggestion.SuggestedPurposeId">
                        <option value="">Auto-detect</option>
                        @foreach (var purpose in availablePurposes)
                        {
                            <option value="@purpose.PurposeId">@purpose.Emoji @purpose.Name</option>
                        }
                    </select>
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Start Date</span>
                    </label>
                    <input type="date" class="input input-bordered w-full" @bind="editingSuggestion.StartDate">
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">End Date</span>
                    </label>
                    <input type="date" class="input input-bordered w-full" @bind="editingSuggestion.EndDate">
                </div>
            </div>
            
            <!-- Transaction Selection -->
            <div class="mt-6">
                <h4 class="font-semibold mb-2">Select Transactions to Include</h4>
                <div class="max-h-60 overflow-y-auto border rounded p-2">
                    @foreach (var transaction in editingSuggestion.Transactions)
                    {
                        <label class="label cursor-pointer">
                            <span class="label-text">
                                @transaction.TransactionDate.ToString("dd/MM/yyyy") - @transaction.Category?.Name - @transaction.Vendor - @transaction.Currency @transaction.Amount.ToString("N2")
                            </span>
                            <input type="checkbox" class="checkbox checkbox-sm" 
                                   checked="@editingSuggestion.SelectedTransactionIds.Contains(transaction.TransactionId)"
                                   @onchange="(e) => ToggleTransactionSelection(transaction.TransactionId, (bool)e.Value!)">
                        </label>
                    }
                </div>
            </div>
            
            <div class="modal-action">
                <button class="btn btn-ghost" @onclick="HideEditModal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveEditedSuggestion">Save Changes</button>
            </div>
        </div>
    </div>
}

@code {
    private List<TripSuggestion> tripSuggestions = new();
    private List<Purpose> availablePurposes = new();
    private bool isLoading = false;
    private string errorMessage = "";
    
    private bool showEditModal = false;
    private TripSuggestion? editingSuggestion;

    protected override async Task OnInitializedAsync()
    {
        await LoadLookupData();
        await GenerateTripSuggestions();
    }

    private async Task LoadLookupData()
    {
        try
        {
            var purposes = await SettingsService.GetPurposesAsync();
            availablePurposes = purposes.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading lookup data: {ex.Message}";
            availablePurposes = new List<Purpose>();
        }
    }

    private async Task GenerateTripSuggestions()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            StateHasChanged();

            var suggestedTrips = await TripService.SuggestTripsFromTransactionsAsync();
            
            tripSuggestions = new List<TripSuggestion>();
            int id = 1;
            
            foreach (var trip in suggestedTrips)
            {
                // Get all unlinked transactions for this email within the date range
                var transactions = await TransactionService.GetTransactionsByEmailAndDateRangeAsync(
                    trip.Email, 
                    trip.StartDate.AddDays(-2), 
                    trip.EndDate.AddDays(2)
                );
                
                var tripTransactions = transactions.Where(t => t.TripId == null).ToList();
                
                if (!tripTransactions.Any())
                    continue;

                // Identify key transactions (airfare/lodging)
                var keyTransactionIds = tripTransactions
                    .Where(t => t.Category?.Name == "Airfare" || t.Category?.Name == "Lodging")
                    .Select(t => t.TransactionId)
                    .ToList();

                // Calculate confidence based on transaction types
                int confidence = CalculateConfidence(tripTransactions);

                var suggestion = new TripSuggestion
                {
                    Id = id++,
                    SuggestedTripName = trip.TripName,
                    Email = trip.Email,
                    StartDate = trip.StartDate,
                    EndDate = trip.EndDate,
                    Duration = trip.Duration,
                    DateRange = $"{trip.StartDate:dd/MM/yyyy} - {trip.EndDate:dd/MM/yyyy}",
                    Destination = trip.City1 ?? "Unknown",
                    DetectedCountry = trip.Country1 ?? "Unknown",
                    Confidence = confidence,
                    DetectionReason = GetDetectionReason(tripTransactions, confidence),
                    KeyIndicators = GetKeyIndicators(tripTransactions),
                    Transactions = tripTransactions,
                    SelectedTransactionIds = new HashSet<string>(tripTransactions.Select(t => t.TransactionId)),
                    KeyTransactionIds = keyTransactionIds,
                    TransactionCount = tripTransactions.Count,
                    TotalAmount = tripTransactions.Sum(t => t.AmountUSD ?? 0),
                    SuggestedPurposeId = trip.PurposeId,
                    SuggestedTripTypeId = trip.TripTypeId,
                    SuggestedStatusId = trip.StatusId,
                    SuggestedOwnerId = trip.OwnerId
                };

                tripSuggestions.Add(suggestion);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error generating trip suggestions: {ex.Message}";
            tripSuggestions = new List<TripSuggestion>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private int CalculateConfidence(List<Transaction> transactions)
    {
        int confidence = 50; // Base confidence

        var hasAirfare = transactions.Any(t => t.Category?.Name == "Airfare");
        var hasLodging = transactions.Any(t => t.Category?.Name == "Lodging");
        var transactionCount = transactions.Count;

        if (hasAirfare && hasLodging)
            confidence += 30;
        else if (hasAirfare || hasLodging)
            confidence += 20;

        if (transactionCount >= 5)
            confidence += 15;
        else if (transactionCount >= 3)
            confidence += 10;

        // Cap at 95 (never 100% sure without manual review)
        return Math.Min(confidence, 95);
    }

    private string GetDetectionReason(List<Transaction> transactions, int confidence)
    {
        if (confidence >= 85)
            return "Strong pattern detected";
        else if (confidence >= 70)
            return "Likely trip pattern";
        else
            return "Possible trip cluster";
    }

    private string GetKeyIndicators(List<Transaction> transactions)
    {
        var indicators = new List<string>();

        if (transactions.Any(t => t.Category?.Name == "Airfare"))
            indicators.Add("Airfare");
        if (transactions.Any(t => t.Category?.Name == "Lodging"))
            indicators.Add("Lodging");
        if (transactions.Any(t => t.Category?.Name == "Meals"))
            indicators.Add("Meals");
        if (transactions.Any(t => t.Category?.Name == "Transportation"))
            indicators.Add("Transportation");

        return indicators.Any() ? string.Join(" + ", indicators) + " detected" : "Transaction clustering";
    }

    private async Task RefreshSuggestions()
    {
        await GenerateTripSuggestions();
        StateHasChanged();
    }

    private async Task ApproveSuggestion(TripSuggestion suggestion)
    {
        // Create actual trip from suggestion
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Create trip '{suggestion.SuggestedTripName}'?");
        if (confirmed)
        {
            try
            {
                // Create trip from suggestion
                var trip = new Trip
                {
                    TripName = suggestion.SuggestedTripName,
                    Email = suggestion.Email,
                    StartDate = suggestion.StartDate,
                    EndDate = suggestion.EndDate,
                    Duration = suggestion.Duration,
                    Country1 = suggestion.DetectedCountry,
                    City1 = suggestion.Destination,
                    PurposeId = suggestion.SuggestedPurposeId ?? 1, // Default to Business trip
                    TripTypeId = suggestion.SuggestedTripTypeId ?? 1, // Default to Domestic
                    StatusId = suggestion.SuggestedStatusId ?? 2, // Default to Upcoming
                    ValidationStatusId = 1, // "Not ready to validate"
                    IsManual = false,
                    OwnerId = suggestion.SuggestedOwnerId ?? 1, // Default to first owner
                    CreatedAt = DateTime.Now,
                    ModifiedAt = DateTime.Now,
                    ModifiedBy = "System"
                };

                // Create the trip
                var createdTrip = await TripService.CreateTripAsync(trip);

                // Link selected transactions to the trip
                foreach (var transactionId in suggestion.SelectedTransactionIds)
                {
                    var transaction = await TransactionService.GetByIdAsync(transactionId);
                    if (transaction != null)
                    {
                        await TransactionService.LinkTransactionToTripAsync(transactionId, createdTrip.TripId);
                    }
                }

                // Remove from suggestions list
                tripSuggestions.Remove(suggestion);
                await JSRuntime.InvokeVoidAsync("alert", "Trip created successfully!");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                errorMessage = $"Error creating trip: {ex.Message}";
                await JSRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
                StateHasChanged();
            }
        }
    }

    private async Task RejectSuggestion(TripSuggestion suggestion)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Reject suggestion '{suggestion.SuggestedTripName}'?");
        if (confirmed)
        {
            tripSuggestions.Remove(suggestion);
            StateHasChanged();
        }
    }

    private void EditSuggestion(TripSuggestion suggestion)
    {
        editingSuggestion = new TripSuggestion
        {
            Id = suggestion.Id,
            SuggestedTripName = suggestion.SuggestedTripName,
            Email = suggestion.Email,
            StartDate = suggestion.StartDate,
            EndDate = suggestion.EndDate,
            Destination = suggestion.Destination,
            DetectedCountry = suggestion.DetectedCountry,
            SuggestedPurposeId = suggestion.SuggestedPurposeId,
            Confidence = suggestion.Confidence,
            DetectionReason = suggestion.DetectionReason,
            KeyIndicators = suggestion.KeyIndicators,
            Transactions = suggestion.Transactions,
            SelectedTransactionIds = new HashSet<string>(suggestion.SelectedTransactionIds)
        };
        showEditModal = true;
    }

    private void HideEditModal()
    {
        showEditModal = false;
        editingSuggestion = null;
    }

    private void ToggleTransactionSelection(string transactionId, bool isSelected)
    {
        if (editingSuggestion == null) return;
        
        if (isSelected)
        {
            editingSuggestion.SelectedTransactionIds.Add(transactionId);
        }
        else
        {
            editingSuggestion.SelectedTransactionIds.Remove(transactionId);
        }
    }

    private async Task SaveEditedSuggestion()
    {
        if (editingSuggestion == null) return;

        // Update the original suggestion
        var originalSuggestion = tripSuggestions.FirstOrDefault(s => s.Id == editingSuggestion.Id);
        if (originalSuggestion != null)
        {
            originalSuggestion.SuggestedTripName = editingSuggestion.SuggestedTripName;
            originalSuggestion.Destination = editingSuggestion.Destination;
            originalSuggestion.DetectedCountry = editingSuggestion.DetectedCountry;
            originalSuggestion.SuggestedPurposeId = editingSuggestion.SuggestedPurposeId;
            originalSuggestion.StartDate = editingSuggestion.StartDate;
            originalSuggestion.EndDate = editingSuggestion.EndDate;
            originalSuggestion.SelectedTransactionIds = editingSuggestion.SelectedTransactionIds;
            
            // Recalculate derived properties
            originalSuggestion.Duration = (originalSuggestion.EndDate - originalSuggestion.StartDate).Days + 1;
            originalSuggestion.DateRange = $"{originalSuggestion.StartDate:dd/MM/yyyy} - {originalSuggestion.EndDate:dd/MM/yyyy}";
            originalSuggestion.TransactionCount = originalSuggestion.SelectedTransactionIds.Count;
            originalSuggestion.TotalAmount = originalSuggestion.Transactions
                .Where(t => originalSuggestion.SelectedTransactionIds.Contains(t.TransactionId))
                .Sum(t => t.AmountUSD ?? 0);
        }

        HideEditModal();
        StateHasChanged();
    }

    private async Task ApproveAllSuggestions()
    {
        if (!tripSuggestions.Any()) return;

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Create {tripSuggestions.Count} trips from all suggestions?");
        if (confirmed)
        {
            // TODO: Batch create all trips
            var count = tripSuggestions.Count;
            tripSuggestions.Clear();
            await JSRuntime.InvokeVoidAsync("alert", $"{count} trips created successfully!");
            StateHasChanged();
        }
    }

    private string GetSuggestionBorderClass(int confidence)
    {
        return confidence switch
        {
            >= 90 => "border-green-500",
            >= 70 => "border-yellow-500",
            _ => "border-red-500"
        };
    }

    private string GetConfidenceBadgeClass(int confidence)
    {
        return confidence switch
        {
            >= 90 => "badge-success",
            >= 70 => "badge-warning",
            _ => "badge-error"
        };
    }

    // Trip suggestion model
    public class TripSuggestion
    {
        public int Id { get; set; }
        public string SuggestedTripName { get; set; } = "";
        public string Email { get; set; } = "";
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int Duration { get; set; }
        public string DateRange { get; set; } = "";
        public string Destination { get; set; } = "";
        public string DetectedCountry { get; set; } = "";
        public int Confidence { get; set; }
        public string DetectionReason { get; set; } = "";
        public string KeyIndicators { get; set; } = "";
        public List<Transaction> Transactions { get; set; } = new();
        public HashSet<string> SelectedTransactionIds { get; set; } = new();
        public List<string> KeyTransactionIds { get; set; } = new();
        public int TransactionCount { get; set; }
        public decimal TotalAmount { get; set; }
        public int? SuggestedPurposeId { get; set; }
        public int? SuggestedTripTypeId { get; set; }
        public int? SuggestedStatusId { get; set; }
        public int? SuggestedOwnerId { get; set; }
    }
}
</AuthorizeRoleView>