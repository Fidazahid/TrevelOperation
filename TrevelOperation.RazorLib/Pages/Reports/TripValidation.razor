@page "/trips/validation"
@using TravelOperation.Core.Models
@using TravelOperation.Core.Services
@using TravelOperation.Core.Services.Interfaces
@using TrevelOperation.Service
@using TrevelOperation.RazorLib.Components
@inject ITripService TripService
@inject ITransactionService TransactionService
@inject ITaxCalculationService TaxCalculationService

<AuthorizeRoleView RequiredRole="Finance">
<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">‚úÖ Trip Validation</h1>
            <p class="text-gray-600">Review and validate trips ready for approval</p>
        </div>
        <div class="flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshValidation">
                üîÑ Refresh
            </button>
            <button class="btn btn-primary" @onclick="ValidateAllReady">
                ‚úÖ Validate All Ready
            </button>
        </div>
    </div>

    <!-- Validation Status Summary -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        <div class="card bg-yellow-50 border-l-4 border-yellow-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üü°</div>
                    <div>
                        <div class="text-2xl font-bold text-yellow-700">@readyToValidateCount</div>
                        <div class="text-yellow-600">Ready to Validate</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-green-50 border-l-4 border-green-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üü¢</div>
                    <div>
                        <div class="text-2xl font-bold text-green-700">@validatedCount</div>
                        <div class="text-green-600">Validated</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-gray-50 border-l-4 border-gray-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚ö™</div>
                    <div>
                        <div class="text-2xl font-bold text-gray-700">@notReadyCount</div>
                        <div class="text-gray-600">Not Ready</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-md mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Status Filter</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedStatus" @bind:after="FilterTrips">
                        <option value="">All Status</option>
                        <option value="Ready to validate">üü° Ready to validate</option>
                        <option value="Validated">üü¢ Validated</option>
                        <option value="Not ready to validate">‚ö™ Not ready to validate</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedOwner" @bind:after="FilterTrips">
                        <option value="">All Owners</option>
                        @foreach (var owner in availableOwners)
                        {
                            <option value="@owner">@owner</option>
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Date Range</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedDateRange" @bind:after="FilterTrips">
                        <option value="">All Dates</option>
                        <option value="last-30">Last 30 days</option>
                        <option value="last-90">Last 90 days</option>
                        <option value="this-year">This year</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" placeholder="Search trips..." @bind="searchText" @bind:after="FilterTrips">
                </div>
            </div>
        </div>
    </div>

    <!-- Trips Ready for Validation -->
    @if (filteredTrips.Any())
    {
        <div class="space-y-4">
            @foreach (var trip in pagedResult.Items)
            {
                <div class="card bg-base-100 shadow-md border-l-4 @GetValidationBorderClass(trip.ValidationStatus?.Name)">
                    <div class="card-body">
                        <div class="flex justify-between items-start mb-4">
                            <div>
                                <h3 class="card-title text-lg">
                                    üß≥ @trip.TripName
                                    <div class="badge @GetValidationBadgeClass(trip.ValidationStatus?.Name)">
                                        @trip.ValidationStatus?.Emoji @trip.ValidationStatus?.Name
                                    </div>
                                </h3>
                                <p class="text-gray-600">@trip.Email ‚Ä¢ @trip.StartDate.ToString("dd/MM/yyyy") - @trip.EndDate.ToString("dd/MM/yyyy")</p>
                            </div>
                            <div class="flex gap-2">
                                @if (trip.ValidationStatus?.Name == "Ready to validate")
                                {
                                    <button class="btn btn-success btn-sm" @onclick="() => ValidateTrip(trip)">
                                        ‚úÖ Validate
                                    </button>
                                }
                                <button class="btn btn-info btn-sm" @onclick="() => ViewTripDetails(trip)">
                                    üëÅÔ∏è Review
                                </button>
                                <button class="btn btn-warning btn-sm" @onclick="() => EditTrip(trip)">
                                    ‚úèÔ∏è Edit
                                </button>
                            </div>
                        </div>

                        <!-- Trip Summary -->
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-4">
                            <div class="stat">
                                <div class="stat-title">Duration</div>
                                <div class="stat-value text-sm">@trip.Duration days</div>
                                <div class="stat-desc">@trip.City1, @trip.Country1</div>
                            </div>
                            <div class="stat">
                                <div class="stat-title">Transactions</div>
                                <div class="stat-value text-sm">@GetTransactionCount(trip.TripId)</div>
                                <div class="stat-desc">Total: $@GetTotalAmount(trip.TripId).ToString("N2")</div>
                            </div>
                            <div class="stat">
                                <div class="stat-title">Per Day Cost</div>
                                <div class="stat-value text-sm">$@GetPerDayCost(trip.TripId).ToString("N0")</div>
                                <div class="stat-desc">Average daily spend</div>
                            </div>
                            <div class="stat">
                                <div class="stat-title">Tax Exposure</div>
                                <div class="stat-value text-sm @(GetTaxExposure(trip.TripId) > 0 ? "text-warning" : "text-success")">
                                    $@GetTaxExposure(trip.TripId).ToString("N2")
                                </div>
                                <div class="stat-desc">@(GetTaxExposure(trip.TripId) > 0 ? "Requires attention" : "Compliant")</div>
                            </div>
                            <div class="stat">
                                <div class="stat-title">Documentation</div>
                                <div class="stat-value text-sm @(GetMissingDocs(trip.TripId) > 0 ? "text-error" : "text-success")">
                                    @GetMissingDocs(trip.TripId)
                                </div>
                                <div class="stat-desc">Missing receipts</div>
                            </div>
                        </div>

                        <!-- Validation Issues -->
                        @{
                            var issues = GetValidationIssues(trip.TripId);
                        }
                        @if (issues.Any())
                        {
                            <div class="alert alert-warning">
                                <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 15.5c-.77.833.192 2.5 1.732 2.5z"></path></svg>
                                <div>
                                    <h4 class="font-bold">Validation Issues Found:</h4>
                                    <ul class="list-disc list-inside mt-2">
                                        @foreach (var issue in issues)
                                        {
                                            <li>@issue</li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        <div class="flex justify-between items-center mt-6">
            <div class="text-sm text-gray-500">
                Showing @pagedResult.FirstItemOnPage to @pagedResult.LastItemOnPage of @pagedResult.TotalCount trips
                <select class="select select-bordered select-sm ml-4" @onchange="OnPageSizeChanged">
                    <option value="25" selected="@(pageSize == 25)">25 per page</option>
                    <option value="50" selected="@(pageSize == 50)">50 per page</option>
                    <option value="100" selected="@(pageSize == 100)">100 per page</option>
                </select>
            </div>
            <div class="join">
                <button class="join-item btn btn-sm" disabled="@(!pagedResult.HasPreviousPage)" @onclick="PreviousPage">¬´</button>
                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                {
                    int pageNumber = i;
                    <button class="join-item btn btn-sm @(i == currentPage ? "btn-active" : "")" @onclick="() => GoToPage(pageNumber)">@i</button>
                }
                <button class="join-item btn btn-sm" disabled="@(!pagedResult.HasNextPage)" @onclick="NextPage">¬ª</button>
            </div>
        </div>
    }
    else
    {
        <div class="card bg-base-100 shadow-md">
            <div class="card-body text-center">
                <div class="text-6xl mb-4">‚úÖ</div>
                <h3 class="text-xl font-bold mb-2">All Trips Validated</h3>
                <p class="text-gray-600 mb-4">No trips requiring validation at this time.</p>
                <button class="btn btn-primary" @onclick="RefreshValidation">üîÑ Refresh</button>
            </div>
        </div>
    }
</div>
</AuthorizeRoleView>

<!-- Alert Dialog -->
<AlertDialog 
    IsVisible="showAlertDialog"
    Title="@alertTitle"
    Message="@alertMessage"
    Type="@alertType"
    OkButtonText="@alertOkText"
    OnClose="CloseAlertDialog" />

<!-- Confirmation Dialog -->
<ConfirmDialog 
    IsVisible="showConfirmDialog"
    Title="@confirmTitle"
    Message="@confirmMessage"
    Icon="@confirmIcon"
    ConfirmButtonText="@confirmButtonText"
    CancelButtonText="@cancelButtonText"
    ConfirmButtonClass="@confirmButtonClass"
    OnResult="HandleConfirmResult" />

@code {
    private List<Trip> trips = new();
    private List<Trip> filteredTrips = new();
    private PagedResult<Trip> pagedResult = new();
    private List<string> availableOwners = new();
    private Dictionary<int, TaxExposureResult> taxExposureCache = new();
    private Dictionary<int, int> transactionCountCache = new();
    private Dictionary<int, int> missingDocsCache = new();
    
    // Alert Dialog state
    private bool showAlertDialog = false;
    private string alertTitle = "";
    private string alertMessage = "";
    private AlertDialog.AlertType alertType = AlertDialog.AlertType.Info;
    private string alertOkText = "OK";
    
    // Confirmation Dialog state
    private bool showConfirmDialog = false;
    private string confirmTitle = "";
    private string confirmMessage = "";
    private string confirmIcon = "‚ùì";
    private string confirmButtonText = "Yes";
    private string cancelButtonText = "No";
    private string confirmButtonClass = "btn-primary";
    private Func<Task>? pendingConfirmAction = null;
    
    // Filters
    private string selectedStatus = "";
    private string selectedOwner = "";
    private string selectedDateRange = "";
    private string searchText = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 25;
    
    // Summary counts
    private int readyToValidateCount = 0;
    private int validatedCount = 0;
    private int notReadyCount = 0;
    
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTrips();
    }

    private async Task LoadTrips()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            // Load paged data from server
            var paginationParams = new PaginationParams
            {
                PageNumber = currentPage,
                PageSize = pageSize,
                SortBy = "StartDate",
                SortDirection = "desc"
            };
            
            pagedResult = await TripService.GetTripsReadyForValidationPagedAsync(paginationParams);
            
            // Also load all trips for summary calculations
            trips = (await TripService.GetAllTripsAsync()).ToList();
            filteredTrips = trips;
            
            // Get unique owners
            availableOwners = trips
                .Select(t => t.Owner?.Name)
                .Where(n => !string.IsNullOrEmpty(n))
                .Distinct()
                .ToList()!;
            
            // Preload tax exposure and transaction counts for visible trips
            await PreloadTripMetrics();
            
            CalculateSummary();
        }
        catch (Exception ex)
        {
            ShowAlert("Error Loading Trips", $"Failed to load trip data: {ex.Message}", AlertDialog.AlertType.Error);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    
    private async Task PreloadTripMetrics()
    {
        // Calculate metrics for all trips
        foreach (var trip in trips)
        {
            try
            {
                // Get tax exposure
                var taxExposure = await TaxCalculationService.CalculateTaxExposureAsync(trip.TripId);
                taxExposureCache[trip.TripId] = taxExposure;
                
                // Count transactions
                var transactions = trip.Transactions?.ToList() ?? new List<Transaction>();
                transactionCountCache[trip.TripId] = transactions.Count;
                
                // Count missing documents
                missingDocsCache[trip.TripId] = transactions.Count(t => string.IsNullOrEmpty(t.DocumentUrl));
            }
            catch
            {
                // If calculation fails, use defaults
                taxExposureCache[trip.TripId] = new TaxExposureResult { TripId = trip.TripId };
                transactionCountCache[trip.TripId] = 0;
                missingDocsCache[trip.TripId] = 0;
            }
        }
    }

    private void CalculateSummary()
    {
        readyToValidateCount = trips.Count(t => t.ValidationStatus?.Name == "Ready to validate");
        validatedCount = trips.Count(t => t.ValidationStatus?.Name == "Validated");
        notReadyCount = trips.Count(t => t.ValidationStatus?.Name == "Not ready to validate");
    }

    private async Task FilterTrips()
    {
        currentPage = 1;
        
        // Reload with server-side pagination
        await LoadTrips();
        StateHasChanged();
    }

    private bool FilterByDateRange(Trip trip)
    {
        return selectedDateRange switch
        {
            "last-30" => trip.StartDate >= DateTime.Today.AddDays(-30),
            "last-90" => trip.StartDate >= DateTime.Today.AddDays(-90),
            "this-year" => trip.StartDate.Year == DateTime.Today.Year,
            _ => true
        };
    }

    private async Task PreviousPage()
    {
        if (pagedResult.HasPreviousPage)
        {
            currentPage--;
            await LoadTrips();
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (pagedResult.HasNextPage)
        {
            currentPage++;
            await LoadTrips();
            StateHasChanged();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= pagedResult.TotalPages)
        {
            currentPage = page;
            await LoadTrips();
            StateHasChanged();
        }
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            pageSize = newSize;
            currentPage = 1;
            await LoadTrips();
            StateHasChanged();
        }
    }

    private async Task RefreshValidation()
    {
        await LoadTrips();
        CalculateSummary();
    }

    private async Task ValidateTrip(Trip trip)
    {
        ShowConfirm(
            "Validate Trip",
            $"Are you sure you want to validate trip '{trip.TripName}'?\n\nThis will mark the trip as validated and approved.",
            async () =>
            {
                try
                {
                    // Call service to validate trip
                    await TripService.ValidateTripAsync(trip.TripId);
                    
                    // Update local trip object
                    trip.ValidationStatusId = 3; // Validated
                    if (trip.ValidationStatus != null)
                    {
                        trip.ValidationStatus.ValidationStatusId = 3;
                        trip.ValidationStatus.Name = "Validated";
                        trip.ValidationStatus.Emoji = "üü¢";
                    }
                    
                    CalculateSummary();
                    await FilterTrips();
                    ShowAlert("Trip Validated", $"Trip '{trip.TripName}' has been validated successfully!", AlertDialog.AlertType.Success);
                }
                catch (Exception ex)
                {
                    ShowAlert("Validation Error", $"Failed to validate trip: {ex.Message}", AlertDialog.AlertType.Error);
                }
            },
            "‚úÖ",
            "Validate",
            "Cancel",
            "btn-success"
        );
    }

    private async Task ValidateAllReady()
    {
        var readyTrips = trips.Where(t => t.ValidationStatus?.Name == "Ready to validate").ToList();
        if (!readyTrips.Any())
        {
            ShowAlert("No Trips Ready", "There are no trips ready for validation at this time.", AlertDialog.AlertType.Info);
            return;
        }

        ShowConfirm(
            "Validate All Ready Trips",
            $"Are you sure you want to validate all {readyTrips.Count} ready trips?\n\nThis will mark all of them as validated and approved.",
            async () =>
            {
                try
                {
                    int successCount = 0;
                    int failCount = 0;
                    
                    foreach (var trip in readyTrips)
                    {
                        try
                        {
                            await TripService.ValidateTripAsync(trip.TripId);
                            trip.ValidationStatusId = 3; // Validated
                            if (trip.ValidationStatus != null)
                            {
                                trip.ValidationStatus.ValidationStatusId = 3;
                                trip.ValidationStatus.Name = "Validated";
                                trip.ValidationStatus.Emoji = "üü¢";
                            }
                            successCount++;
                        }
                        catch
                        {
                            failCount++;
                        }
                    }
                    
                    CalculateSummary();
                    await FilterTrips();
                    
                    if (failCount == 0)
                    {
                        ShowAlert("All Trips Validated", $"Successfully validated all {successCount} trips!", AlertDialog.AlertType.Success);
                    }
                    else
                    {
                        ShowAlert("Partial Validation", $"{successCount} trips validated successfully, but {failCount} failed.", AlertDialog.AlertType.Warning);
                    }
                }
                catch (Exception ex)
                {
                    ShowAlert("Bulk Validation Error", $"An error occurred during bulk validation: {ex.Message}", AlertDialog.AlertType.Error);
                }
            },
            "‚úÖ",
            "Validate All",
            "Cancel",
            "btn-success"
        );
    }

    private async Task ViewTripDetails(Trip trip)
    {
        // Navigate to trip details or show modal
        ShowAlert("Feature Coming Soon", $"Viewing details for '{trip.TripName}' - Full implementation pending", AlertDialog.AlertType.Info);
    }

    private async Task EditTrip(Trip trip)
    {
        // Navigate to edit trip
        ShowAlert("Feature Coming Soon", $"Editing '{trip.TripName}' - Navigation pending", AlertDialog.AlertType.Info);
    }

    private string GetValidationBorderClass(string? status)
    {
        return status switch
        {
            "Ready to validate" => "border-yellow-400",
            "Validated" => "border-green-400",
            "Not ready to validate" => "border-gray-400",
            _ => "border-gray-300"
        };
    }

    private string GetValidationBadgeClass(string? status)
    {
        return status switch
        {
            "Ready to validate" => "badge-warning",
            "Validated" => "badge-success",
            "Not ready to validate" => "badge-ghost",
            _ => "badge-ghost"
        };
    }

    private int GetTransactionCount(int tripId)
    {
        return transactionCountCache.GetValueOrDefault(tripId, 0);
    }

    private decimal GetTotalAmount(int tripId)
    {
        var trip = trips.FirstOrDefault(t => t.TripId == tripId);
        if (trip?.Transactions == null) return 0;
        return trip.Transactions.Sum(t => t.AmountUSD ?? 0);
    }

    private decimal GetPerDayCost(int tripId)
    {
        var trip = trips.FirstOrDefault(t => t.TripId == tripId);
        if (trip == null || trip.Duration == 0) return 0;
        return GetTotalAmount(tripId) / trip.Duration;
    }

    private decimal GetTaxExposure(int tripId)
    {
        return taxExposureCache.GetValueOrDefault(tripId)?.TotalTaxExposure ?? 0;
    }

    private int GetMissingDocs(int tripId)
    {
        return missingDocsCache.GetValueOrDefault(tripId, 0);
    }

    private List<string> GetValidationIssues(int tripId)
    {
        var issues = new List<string>();
        var trip = trips.FirstOrDefault(t => t.TripId == tripId);
        if (trip?.Transactions == null) return issues;
        
        var transactions = trip.Transactions.ToList();
        
        // Check for high meal expenses
        var highMeals = transactions.Where(t => 
            t.Category?.Name == "Meals" && 
            Math.Abs(t.AmountUSD ?? 0) >= 80).Count();
        if (highMeals > 0)
            issues.Add($"{highMeals} high-value meal transaction(s) detected (‚â•$80)");
        
        // Check for missing cabin class on airfare
        var missingCabinClass = transactions.Where(t => 
            t.Category?.Name == "Airfare" && 
            t.CabinClassId == null).Count();
        if (missingCabinClass > 0)
            issues.Add($"{missingCabinClass} airfare transaction(s) missing cabin class");
        
        // Check for client entertainment missing participants
        var missingParticipants = transactions.Where(t => 
            t.Category?.Name == "Client entertainment" && 
            !t.ParticipantsValidated).Count();
        if (missingParticipants > 0)
            issues.Add($"{missingParticipants} client entertainment transaction(s) missing participant details");
        
        // Check for missing documentation
        var missingDocs = GetMissingDocs(tripId);
        if (missingDocs > 0)
            issues.Add($"{missingDocs} transaction(s) missing receipts");
        
        // Check tax exposure
        var taxExposure = GetTaxExposure(tripId);
        if (taxExposure > 0)
            issues.Add($"Tax exposure detected: ${taxExposure:N2}");
        
        // Check for premium cabin classes
        var taxResult = taxExposureCache.GetValueOrDefault(tripId);
        if (taxResult?.HasPremiumAirfare == true)
            issues.Add($"Premium cabin classes detected: {string.Join(", ", taxResult.PremiumCabinClasses)}");
        
        return issues;
    }
    
    // Alert Dialog Methods
    private void ShowAlert(string title, string message, AlertDialog.AlertType type = AlertDialog.AlertType.Info, string okText = "OK")
    {
        alertTitle = title;
        alertMessage = message;
        alertType = type;
        alertOkText = okText;
        showAlertDialog = true;
        StateHasChanged();
    }

    private void CloseAlertDialog()
    {
        showAlertDialog = false;
        StateHasChanged();
    }

    // Confirmation Dialog Methods
    private void ShowConfirm(string title, string message, Func<Task> onConfirm, string icon = "‚ùì", 
        string confirmText = "Yes", string cancelText = "No", string buttonClass = "btn-primary")
    {
        confirmTitle = title;
        confirmMessage = message;
        confirmIcon = icon;
        confirmButtonText = confirmText;
        cancelButtonText = cancelText;
        confirmButtonClass = buttonClass;
        pendingConfirmAction = onConfirm;
        showConfirmDialog = true;
        StateHasChanged();
    }

    private async Task HandleConfirmResult(bool confirmed)
    {
        showConfirmDialog = false;
        
        if (confirmed && pendingConfirmAction != null)
        {
            await pendingConfirmAction.Invoke();
        }
        
        pendingConfirmAction = null;
        StateHasChanged();
    }
}