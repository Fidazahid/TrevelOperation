@page "/settings/tax"
@using TravelOperation.Core.Models.Entities
@using TrevelOperation.Service
@using TrevelOperation.RazorLib.Components
@inject IJSRuntime JSRuntime
@inject ISettingsService SettingsService

<PageTitle>Tax Settings - Travel Expense Management</PageTitle>

<AuthorizeRoleView RequiredRole="Finance">
<div class="p-6">
    <div class="mb-6">
        <h1 class="text-3xl font-bold text-base-content mb-2">Tax settings</h1>
        <p class="text-base-content/70">Manage tax caps and shields by fiscal year, country, and subsidiary for compliance calculations</p>
    </div>

    <!-- Actions Bar -->
    <div class="bg-base-200 rounded-lg p-4 mb-6">
        <div class="flex flex-wrap gap-4 items-center justify-between">
            <div class="flex flex-wrap gap-4 items-center">
                <!-- Fiscal Year Filter -->
                <div class="form-control">
                    <select class="select select-bordered" @bind="selectedFiscalYear" @bind:after="FilterTaxSettings">
                        <option value="">All fiscal years</option>
                        @foreach (var year in GetFiscalYears())
                        {
                            <option value="@year">@year</option>
                        }
                    </select>
                </div>
                
                <!-- Country Filter -->
                <div class="form-control">
                    <select class="select select-bordered" @bind="selectedCountry" @bind:after="FilterTaxSettings">
                        <option value="">All countries</option>
                        @foreach (var country in GetCountries())
                        {
                            <option value="@country">@country</option>
                        }
                    </select>
                </div>
                
                <!-- Subsidiary Filter -->
                <div class="form-control">
                    <select class="select select-bordered" @bind="selectedSubsidiary" @bind:after="FilterTaxSettings">
                        <option value="">All subsidiaries</option>
                        @foreach (var subsidiary in GetSubsidiaries())
                        {
                            <option value="@subsidiary">@subsidiary</option>
                        }
                    </select>
                </div>
            </div>
            
            <div class="flex gap-2">
                <button class="btn btn-secondary" @onclick="ImportTaxData">
                    üì• Import CSV
                </button>
                <button class="btn btn-primary" @onclick="ShowAddModal">
                    ‚ûï Add Tax Setting
                </button>
                <button class="btn btn-outline" @onclick="ExportTaxData">
                    üìÑ Export CSV
                </button>
            </div>
        </div>
    </div>

    <!-- Tax Settings Table -->
    <div class="bg-base-100 rounded-lg shadow-lg overflow-hidden">
        <div class="overflow-x-auto">
            <table class="table table-zebra w-full">
                <thead class="bg-base-300">
                    <tr>
                        <th class="cursor-pointer" @onclick="() => SortBy(nameof(Tax.FiscalYear))">
                            Fiscal Year
                            @if (sortColumn == nameof(Tax.FiscalYear))
                            {
                                <span class="ml-2">@(sortAscending ? "‚Üë" : "‚Üì")</span>
                            }
                        </th>
                        <th class="cursor-pointer" @onclick="() => SortBy(nameof(Tax.Country))">
                            Country
                            @if (sortColumn == nameof(Tax.Country))
                            {
                                <span class="ml-2">@(sortAscending ? "‚Üë" : "‚Üì")</span>
                            }
                        </th>
                        <th class="cursor-pointer" @onclick="() => SortBy(nameof(Tax.Subsidiary))">
                            Subsidiary
                            @if (sortColumn == nameof(Tax.Subsidiary))
                            {
                                <span class="ml-2">@(sortAscending ? "‚Üë" : "‚Üì")</span>
                            }
                        </th>
                        <th class="text-right">Meals Cap ($)</th>
                        <th class="text-right">Lodging Cap ($)</th>
                        <th class="text-right">Tax Shield ($)</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredTaxSettings.Any())
                    {
                        @foreach (var setting in filteredTaxSettings.Skip((currentPage - 1) * pageSize).Take(pageSize))
                        {
                            <tr class="hover">
                                <td>
                                    <span class="badge badge-neutral">@setting.FiscalYear</span>
                                </td>
                                <td class="font-semibold">@setting.Country</td>
                                <td>
                                    <span class="badge badge-outline">@setting.Subsidiary</span>
                                </td>
                                <td class="text-right font-mono">
                                    $@setting.MealsCap.GetValueOrDefault().ToString("N2")
                                    <div class="text-xs text-base-content/60">per day</div>
                                </td>
                                <td class="text-right font-mono">
                                    $@setting.LodgingCap.GetValueOrDefault().ToString("N2")
                                    <div class="text-xs text-base-content/60">per night</div>
                                </td>
                                <td class="text-right font-mono">
                                    @if (setting.TaxShield.GetValueOrDefault() > 0)
                                    {
                                        <span class="text-success">$@setting.TaxShield.GetValueOrDefault().ToString("N2")</span>
                                    }
                                    else
                                    {
                                        <span class="text-base-content/50">None</span>
                                    }
                                </td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-sm">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-200 rounded-box w-52">
                                            <li><a @onclick="@(() => EditTaxSetting(setting))">‚úèÔ∏è Edit</a></li>
                                            <li><a @onclick="@(() => ViewCalculationExample(setting))">üßÆ View Example</a></li>
                                            <li><a @onclick="@(() => DuplicateTaxSetting(setting))">üìã Duplicate</a></li>
                                            <li><a @onclick="@(() => DeleteTaxSetting(setting))" class="text-error">üóëÔ∏è Delete</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="8" class="text-center py-8 text-base-content/60">
                                @if (string.IsNullOrEmpty(selectedFiscalYear) && string.IsNullOrEmpty(selectedCountry))
                                {
                                    <span>No tax settings configured. Click "Add Tax Setting" to get started.</span>
                                }
                                else
                                {
                                    <span>No tax settings found matching your criteria.</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        @if (filteredTaxSettings.Count() > pageSize)
        {
            <div class="flex justify-between items-center p-4 bg-base-200">
                <div class="text-sm text-base-content/70">
                    Showing @Math.Min(pageSize, filteredTaxSettings.Count()) of @filteredTaxSettings.Count() settings
                </div>
                <div class="btn-group">
                    <button class="btn btn-sm" disabled="@(currentPage == 1)" @onclick="PreviousPage">‚ùÆ</button>
                    <span class="btn btn-sm btn-active">@currentPage</span>
                    <button class="btn btn-sm" disabled="@(currentPage * pageSize >= filteredTaxSettings.Count())" @onclick="NextPage">‚ùØ</button>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add/Edit Modal -->
@if (showModal)
{
    <div class="modal modal-open">
        <div class="modal-box max-w-2xl">
            <h3 class="font-bold text-lg mb-4">@(isEditing ? "Edit" : "Add") Tax Setting</h3>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Fiscal Year *</span>
                    </label>
                    <input type="number" class="input input-bordered" @bind="editingTaxSetting.FiscalYear" 
                           min="2020" max="2030" placeholder="e.g., 2024" />
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Country *</span>
                    </label>
                    <input type="text" class="input input-bordered" @bind="editingTaxSetting.Country" 
                           placeholder="e.g., United States" />
                </div>
            </div>
            
            <div class="form-control mb-4">
                <label class="label">
                    <span class="label-text">Subsidiary *</span>
                </label>
                <select class="select select-bordered" @bind="editingTaxSetting.Subsidiary">
                    <option value="">Select subsidiary...</option>
                    <option value="WSC IL">WSC IL</option>
                    <option value="WSC US">WSC US</option>
                    <option value="WSC UK">WSC UK</option>
                    <option value="WSC Germany">WSC Germany</option>
                    <option value="WSC France">WSC France</option>
                    <option value="WSC Japan">WSC Japan</option>
                </select>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Meals Cap ($) *</span>
                        <span class="label-text-alt">per day</span>
                    </label>
                    <input type="number" class="input input-bordered" @bind="editingTaxSetting.MealsCap" 
                           min="0" step="0.01" placeholder="0.00" />
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Lodging Cap ($) *</span>
                        <span class="label-text-alt">per night</span>
                    </label>
                    <input type="number" class="input input-bordered" @bind="editingTaxSetting.LodgingCap" 
                           min="0" step="0.01" placeholder="0.00" />
                </div>
                
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Tax Shield ($)</span>
                        <span class="label-text-alt">optional</span>
                    </label>
                    <input type="number" class="input input-bordered" @bind="editingTaxSetting.TaxShield" 
                           min="0" step="0.01" placeholder="0.00" />
                </div>
            </div>
            
            <div class="modal-action">
                <button class="btn btn-ghost" @onclick="HideModal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveTaxSetting" 
                        disabled="@(editingTaxSetting.FiscalYear == 0 || string.IsNullOrWhiteSpace(editingTaxSetting.Country) || string.IsNullOrWhiteSpace(editingTaxSetting.Subsidiary))">
                    @(isEditing ? "Update" : "Add") Setting
                </button>
            </div>
        </div>
    </div>
}

<!-- Calculation Example Modal -->
@if (showExampleModal && exampleTaxSetting != null)
{
    <div class="modal modal-open">
        <div class="modal-box max-w-3xl">
            <h3 class="font-bold text-lg mb-4">Tax Calculation Example</h3>
            
            <div class="bg-base-200 p-4 rounded-lg mb-4">
                <h4 class="font-semibold mb-2">Tax Settings</h4>
                <div class="grid grid-cols-2 gap-4 text-sm">
                    <div>Fiscal Year: @exampleTaxSetting.FiscalYear</div>
                    <div>Country: @exampleTaxSetting.Country</div>
                    <div>Subsidiary: @exampleTaxSetting.Subsidiary</div>
                    <div>Meals Cap: $@exampleTaxSetting.MealsCap.GetValueOrDefault().ToString("N2")/day</div>
                    <div>Lodging Cap: $@exampleTaxSetting.LodgingCap.GetValueOrDefault().ToString("N2")/night</div>
                    <div>Tax Shield: $@exampleTaxSetting.TaxShield.GetValueOrDefault().ToString("N2")</div>
                </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Example Trip -->
                <div class="bg-info bg-opacity-10 p-4 rounded-lg">
                    <h4 class="font-semibold mb-3 text-info">Example Trip (5 days)</h4>
                    <div class="space-y-2 text-sm">
                        <div class="flex justify-between">
                            <span>Meals per day:</span>
                            <span class="font-mono">$@exampleMealsPerDay.ToString("N2")</span>
                        </div>
                        <div class="flex justify-between">
                            <span>Lodging per night:</span>
                            <span class="font-mono">$@exampleLodgingPerNight.ToString("N2")</span>
                        </div>
                        <div class="flex justify-between">
                            <span>Total meals (5 days):</span>
                            <span class="font-mono">$@(exampleMealsPerDay * 5).ToString("N2")</span>
                        </div>
                        <div class="flex justify-between">
                            <span>Total lodging (5 nights):</span>
                            <span class="font-mono">$@(exampleLodgingPerNight * 5).ToString("N2")</span>
                        </div>
                    </div>
                </div>
                
                <!-- Tax Calculation -->
                <div class="bg-warning bg-opacity-10 p-4 rounded-lg">
                    <h4 class="font-semibold mb-3 text-warning">Tax Exposure Calculation</h4>
                    <div class="space-y-2 text-sm">
                        <div class="flex justify-between">
                            <span>Meals exposure/day:</span>
                            <span class="font-mono @(GetMealsExposure() > 0 ? "text-error" : "text-success")">
                                $@GetMealsExposure().ToString("N2")
                            </span>
                        </div>
                        <div class="flex justify-between">
                            <span>Lodging exposure/night:</span>
                            <span class="font-mono @(GetLodgingExposure() > 0 ? "text-error" : "text-success")">
                                $@GetLodgingExposure().ToString("N2")
                            </span>
                        </div>
                        <hr class="my-2">
                        <div class="flex justify-between">
                            <span>Total meals exposure:</span>
                            <span class="font-mono font-bold @(GetMealsExposure() * 5 > 0 ? "text-error" : "text-success")">
                                $@(GetMealsExposure() * 5).ToString("N2")
                            </span>
                        </div>
                        <div class="flex justify-between">
                            <span>Total lodging exposure:</span>
                            <span class="font-mono font-bold @(GetLodgingExposure() * 5 > 0 ? "text-error" : "text-success")">
                                $@(GetLodgingExposure() * 5).ToString("N2")
                            </span>
                        </div>
                        <hr class="my-2">
                        <div class="flex justify-between text-lg">
                            <span class="font-bold">Total Tax Exposure:</span>
                            <span class="font-mono font-bold @(GetTotalExposure() > 0 ? "text-error" : "text-success")">
                                $@GetTotalExposure().ToString("N2")
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <div class="flex gap-4 mb-2">
                    <label class="label">
                        <span class="label-text">Adjust example amounts:</span>
                    </label>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="form-control">
                        <input type="number" class="input input-bordered input-sm" 
                               @bind="exampleMealsPerDay" @bind:after="StateHasChanged" 
                               step="0.01" placeholder="Meals per day" />
                    </div>
                    <div class="form-control">
                        <input type="number" class="input input-bordered input-sm" 
                               @bind="exampleLodgingPerNight" @bind:after="StateHasChanged" 
                               step="0.01" placeholder="Lodging per night" />
                    </div>
                </div>
            </div>
            
            <div class="modal-action">
                <button class="btn btn-ghost" @onclick="HideExampleModal">Close</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Tax> taxSettings = new();
    private IEnumerable<Tax> filteredTaxSettings = new List<Tax>();
    
    private string selectedFiscalYear = "";
    private string selectedCountry = "";
    private string selectedSubsidiary = "";
    
    private string sortColumn = nameof(Tax.FiscalYear);
    private bool sortAscending = false; // Newest first
    
    private int currentPage = 1;
    private int pageSize = 20;
    
    // Modal state
    private bool showModal = false;
    private bool isEditing = false;
    private Tax editingTaxSetting = new();
    
    // Example modal state
    private bool showExampleModal = false;
    private Tax? exampleTaxSetting;
    private decimal exampleMealsPerDay = 85.00m;
    private decimal exampleLodgingPerNight = 250.00m;
    
    // Alert Dialog state
    private bool showAlertDialog = false;
    private string alertTitle = "";
    private string alertMessage = "";
    private AlertDialog.AlertType alertType = AlertDialog.AlertType.Info;
    private string alertOkText = "OK";
    
    // Confirmation Dialog state
    private bool showConfirmDialog = false;
    private string confirmTitle = "";
    private string confirmMessage = "";
    private string confirmIcon = "‚ùì";
    private string confirmButtonText = "Yes";
    private string cancelButtonText = "No";
    private string confirmButtonClass = "btn-primary";
    private Func<Task>? pendingConfirmAction = null;
    
    private bool isLoading = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTaxSettings();
    }

    private async Task LoadTaxSettings()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            taxSettings = await SettingsService.GetTaxSettingsAsync();
            FilterTaxSettings();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading tax settings: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterTaxSettings()
    {
        filteredTaxSettings = taxSettings.AsEnumerable();

        if (!string.IsNullOrEmpty(selectedFiscalYear))
        {
            if (int.TryParse(selectedFiscalYear, out var year))
            {
                filteredTaxSettings = filteredTaxSettings.Where(t => t.FiscalYear == year);
            }
        }

        if (!string.IsNullOrEmpty(selectedCountry))
        {
            filteredTaxSettings = filteredTaxSettings.Where(t => t.Country == selectedCountry);
        }

        if (!string.IsNullOrEmpty(selectedSubsidiary))
        {
            filteredTaxSettings = filteredTaxSettings.Where(t => t.Subsidiary == selectedSubsidiary);
        }

        // Apply sorting
        if (sortColumn == nameof(Tax.FiscalYear))
        {
            filteredTaxSettings = sortAscending 
                ? filteredTaxSettings.OrderBy(t => t.FiscalYear)
                : filteredTaxSettings.OrderByDescending(t => t.FiscalYear);
        }
        else if (sortColumn == nameof(Tax.Country))
        {
            filteredTaxSettings = sortAscending 
                ? filteredTaxSettings.OrderBy(t => t.Country)
                : filteredTaxSettings.OrderByDescending(t => t.Country);
        }
        else if (sortColumn == nameof(Tax.Subsidiary))
        {
            filteredTaxSettings = sortAscending 
                ? filteredTaxSettings.OrderBy(t => t.Subsidiary)
                : filteredTaxSettings.OrderByDescending(t => t.Subsidiary);
        }

        currentPage = 1;
        StateHasChanged();
    }

    private void SortBy(string columnName)
    {
        if (sortColumn == columnName)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = columnName;
            sortAscending = true;
        }
        FilterTaxSettings();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage * pageSize < filteredTaxSettings.Count())
        {
            currentPage++;
            StateHasChanged();
        }
    }

    private IEnumerable<string> GetFiscalYears()
    {
        return taxSettings.Select(t => t.FiscalYear.ToString()).Distinct().OrderDescending();
    }

    private IEnumerable<string> GetCountries()
    {
        return taxSettings.Select(t => t.Country).Distinct().OrderBy(c => c);
    }

    private IEnumerable<string> GetSubsidiaries()
    {
        return taxSettings.Select(t => t.Subsidiary).Distinct().OrderBy(s => s);
    }

    private void ShowAddModal()
    {
        editingTaxSetting = new Tax 
        { 
            FiscalYear = DateTime.Now.Year
        };
        isEditing = false;
        showModal = true;
    }

    private void EditTaxSetting(Tax setting)
    {
        editingTaxSetting = new Tax
        {
            TaxId = setting.TaxId,
            FiscalYear = setting.FiscalYear,
            Country = setting.Country,
            Subsidiary = setting.Subsidiary,
            MealsCap = setting.MealsCap,
            LodgingCap = setting.LodgingCap,
            TaxShield = setting.TaxShield
        };
        isEditing = true;
        showModal = true;
    }

    private async Task SaveTaxSetting()
    {
        if (editingTaxSetting.FiscalYear == 0 || string.IsNullOrWhiteSpace(editingTaxSetting.Country) || 
            string.IsNullOrWhiteSpace(editingTaxSetting.Subsidiary))
            return;

        try
        {
            if (isEditing)
            {
                await SettingsService.UpdateTaxSettingAsync(
                    editingTaxSetting.TaxId,
                    editingTaxSetting.FiscalYear,
                    editingTaxSetting.Country.Trim(),
                    editingTaxSetting.Subsidiary,
                    editingTaxSetting.MealsCap ?? 0,
                    editingTaxSetting.LodgingCap ?? 0,
                    editingTaxSetting.TaxShield ?? 0);
            }
            else
            {
                await SettingsService.CreateTaxSettingAsync(
                    editingTaxSetting.FiscalYear,
                    editingTaxSetting.Country.Trim(),
                    editingTaxSetting.Subsidiary,
                    editingTaxSetting.MealsCap ?? 0,
                    editingTaxSetting.LodgingCap ?? 0,
                    editingTaxSetting.TaxShield ?? 0);
            }

            HideModal();
            await LoadTaxSettings();
            ShowAlert("Success", $"Tax setting {(isEditing ? "updated" : "added")} successfully!", AlertDialog.AlertType.Success);
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Failed to save tax setting: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task DeleteTaxSetting(Tax setting)
    {
        ShowConfirm(
            "Delete Tax Setting",
            $"Are you sure you want to delete the tax setting for {setting.Country} ({setting.FiscalYear})?\n\nThis action cannot be undone.",
            async () =>
            {
                try
                {
                    await SettingsService.DeleteTaxSettingAsync(setting.TaxId);
                    await LoadTaxSettings();
                    ShowAlert("Deleted", "Tax setting deleted successfully!", AlertDialog.AlertType.Success);
                }
                catch (Exception ex)
                {
                    ShowAlert("Error", $"Failed to delete tax setting: {ex.Message}", AlertDialog.AlertType.Error);
                }
            },
            "üóëÔ∏è",
            "Delete",
            "Cancel",
            "btn-error"
        );
    }

    private async Task DuplicateTaxSetting(Tax setting)
    {
        try
        {
            await SettingsService.CreateTaxSettingAsync(
                setting.FiscalYear + 1, // Next year
                setting.Country,
                setting.Subsidiary,
                setting.MealsCap ?? 0,
                setting.LodgingCap ?? 0,
                setting.TaxShield ?? 0);
            
            await LoadTaxSettings();
            ShowAlert("Duplicated", $"Tax setting duplicated successfully for fiscal year {setting.FiscalYear + 1}!", AlertDialog.AlertType.Success);
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Failed to duplicate tax setting: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private void ViewCalculationExample(Tax setting)
    {
        exampleTaxSetting = setting;
        exampleMealsPerDay = 85.00m;
        exampleLodgingPerNight = 250.00m;
        showExampleModal = true;
    }

    private decimal GetMealsExposure()
    {
        if (exampleTaxSetting == null) return 0;
        return Math.Max(0, exampleMealsPerDay - exampleTaxSetting.MealsCap.GetValueOrDefault());
    }

    private decimal GetLodgingExposure()
    {
        if (exampleTaxSetting == null) return 0;
        return Math.Max(0, exampleLodgingPerNight - exampleTaxSetting.LodgingCap.GetValueOrDefault());
    }

    private decimal GetTotalExposure()
    {
        return (GetMealsExposure() * 5) + (GetLodgingExposure() * 5);
    }

    private void HideModal()
    {
        showModal = false;
        editingTaxSetting = new Tax();
    }

    private void HideExampleModal()
    {
        showExampleModal = false;
        exampleTaxSetting = null;
    }

    private async Task ImportTaxData()
    {
        ShowAlert("Feature Coming Soon", "CSV import functionality will be implemented here.", AlertDialog.AlertType.Info);
    }

    private async Task ExportTaxData()
    {
        try
        {
            var csv = "FiscalYear,Country,Subsidiary,MealsCap,LodgingCap,TaxShield\n";
            foreach (var setting in taxSettings.OrderBy(t => t.FiscalYear).ThenBy(t => t.Country))
            {
                csv += $"{setting.FiscalYear},\"{setting.Country}\",\"{setting.Subsidiary}\",{setting.MealsCap.GetValueOrDefault()},{setting.LodgingCap.GetValueOrDefault()},{setting.TaxShield.GetValueOrDefault()}\n";
            }
            
            await JSRuntime.InvokeVoidAsync("downloadFile", "tax-settings.csv", "text/csv", csv);
        }
        catch (Exception ex)
        {
            ShowAlert("Export Failed", $"Failed to export tax settings: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }
    
    // Alert Dialog Methods
    private void ShowAlert(string title, string message, AlertDialog.AlertType type = AlertDialog.AlertType.Info, string okText = "OK")
    {
        alertTitle = title;
        alertMessage = message;
        alertType = type;
        alertOkText = okText;
        showAlertDialog = true;
        StateHasChanged();
    }

    private void CloseAlertDialog()
    {
        showAlertDialog = false;
        StateHasChanged();
    }

    // Confirmation Dialog Methods
    private void ShowConfirm(string title, string message, Func<Task> onConfirm, string icon = "‚ùì", 
        string confirmText = "Yes", string cancelText = "No", string buttonClass = "btn-primary")
    {
        confirmTitle = title;
        confirmMessage = message;
        confirmIcon = icon;
        confirmButtonText = confirmText;
        cancelButtonText = cancelText;
        confirmButtonClass = buttonClass;
        pendingConfirmAction = onConfirm;
        showConfirmDialog = true;
        StateHasChanged();
    }

    private async Task HandleConfirmResult(bool confirmed)
    {
        showConfirmDialog = false;
        
        if (confirmed && pendingConfirmAction != null)
        {
            await pendingConfirmAction.Invoke();
        }
        
        pendingConfirmAction = null;
        StateHasChanged();
    }
}
</AuthorizeRoleView>

<!-- Alert Dialog -->
<AlertDialog 
    IsVisible="showAlertDialog"
    Title="@alertTitle"
    Message="@alertMessage"
    Type="@alertType"
    OkButtonText="@alertOkText"
    OnClose="CloseAlertDialog" />

<!-- Confirmation Dialog -->
<ConfirmDialog 
    IsVisible="showConfirmDialog"
    Title="@confirmTitle"
    Message="@confirmMessage"
    Icon="@confirmIcon"
    ConfirmButtonText="@confirmButtonText"
    CancelButtonText="@cancelButtonText"
    ConfirmButtonClass="@confirmButtonClass"
    OnResult="HandleConfirmResult" />