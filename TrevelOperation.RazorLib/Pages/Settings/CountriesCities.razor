@page "/settings/countries-cities"
@using TravelOperation.Core.Models.Entities
@using Microsoft.AspNetCore.Components.Forms
@using TrevelOperation.Service
@inject IJSRuntime JSRuntime
@inject ISettingsService SettingsService

<PageTitle>Countries & Cities - Travel Expense Management</PageTitle>

<div class="p-6">
    <div class="mb-6">
        <h1 class="text-3xl font-bold text-base-content mb-2">Countries & cities</h1>
        <p class="text-base-content/70">Manage the list of countries and cities for trip destinations</p>
    </div>

    <!-- Actions Bar -->
    <div class="bg-base-200 rounded-lg p-4 mb-6">
        <div class="flex flex-wrap gap-4 items-center justify-between">
            <div class="flex flex-wrap gap-4 items-center">
                <!-- Search -->
                <div class="form-control">
                    <input type="text" placeholder="Search countries or cities..." 
                           class="input input-bordered w-64" @bind="searchTerm" @oninput="FilterCountries" />
                </div>
                
                <!-- Country Filter -->
                <div class="form-control">
                    <select class="select select-bordered" @bind="selectedCountryFilter" @bind:after="FilterCountries">
                        <option value="">All countries</option>
                        @foreach (var country in countries.Select(c => c.Country).Distinct().OrderBy(c => c))
                        {
                            <option value="@country">@country</option>
                        }
                    </select>
                </div>
            </div>
            
            <div class="flex gap-2">
                <button class="btn btn-secondary" @onclick="ImportFromCSV">
                    üì• Import CSV
                </button>
                <button class="btn btn-primary" @onclick="ShowAddModal">
                    ‚ûï Add Country/City
                </button>
                <button class="btn btn-outline" @onclick="ExportToCSV">
                    üìÑ Export CSV
                </button>
            </div>
        </div>
    </div>

    <!-- Countries & Cities Table -->
    <div class="bg-base-100 rounded-lg shadow-lg overflow-hidden">
        <div class="overflow-x-auto">
            <table class="table table-zebra w-full">
                <thead class="bg-base-300">
                    <tr>
                        <th class="cursor-pointer" @onclick="() => SortBy(nameof(CountryCity.Country))">
                            Country
                            @if (sortColumn == nameof(CountryCity.Country))
                            {
                                <span class="ml-2">@(sortAscending ? "‚Üë" : "‚Üì")</span>
                            }
                        </th>
                        <th class="cursor-pointer" @onclick="() => SortBy(nameof(CountryCity.City))">
                            City
                            @if (sortColumn == nameof(CountryCity.City))
                            {
                                <span class="ml-2">@(sortAscending ? "‚Üë" : "‚Üì")</span>
                            }
                        </th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (filteredCountries.Any())
                    {
                        @foreach (var item in filteredCountries.Skip((currentPage - 1) * pageSize).Take(pageSize))
                        {
                            <tr class="hover">
                                <td class="font-semibold">@item.Country</td>
                                <td>@item.City</td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-sm">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-200 rounded-box w-40">
                                            <li><a @onclick="@(() => EditCountryCity(item))">‚úèÔ∏è Edit</a></li>
                                            <li><a @onclick="@(() => DeleteCountryCity(item))" class="text-error">üóëÔ∏è Delete</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center py-8 text-base-content/60">
                                @if (string.IsNullOrEmpty(searchTerm) && string.IsNullOrEmpty(selectedCountryFilter))
                                {
                                    <span>No countries and cities configured. Click "Add Country/City" to get started.</span>
                                }
                                else
                                {
                                    <span>No countries or cities found matching your criteria.</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        @if (filteredCountries.Count() > pageSize)
        {
            <div class="flex justify-between items-center p-4 bg-base-200">
                <div class="text-sm text-base-content/70">
                    Showing @Math.Min(pageSize, filteredCountries.Count()) of @filteredCountries.Count() entries
                </div>
                <div class="btn-group">
                    <button class="btn btn-sm" disabled="@(currentPage == 1)" @onclick="PreviousPage">‚ùÆ</button>
                    <span class="btn btn-sm btn-active">@currentPage</span>
                    <button class="btn btn-sm" disabled="@(currentPage * pageSize >= filteredCountries.Count())" @onclick="NextPage">‚ùØ</button>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add/Edit Modal -->
@if (showModal)
{
    <div class="modal modal-open">
        <div class="modal-box">
            <h3 class="font-bold text-lg mb-4">@(isEditing ? "Edit" : "Add") Country/City</h3>
            
            <div class="form-control mb-4">
                <label class="label">
                    <span class="label-text">Country *</span>
                </label>
                <input type="text" class="input input-bordered" @bind="editingItem.Country" placeholder="Enter country name" />
            </div>
            
            <div class="form-control mb-4">
                <label class="label">
                    <span class="label-text">City *</span>
                </label>
                <input type="text" class="input input-bordered" @bind="editingItem.City" placeholder="Enter city name" />
            </div>
            
            <div class="modal-action">
                <button class="btn btn-ghost" @onclick="HideModal">Cancel</button>
                <button class="btn btn-primary" @onclick="SaveCountryCity" 
                        disabled="@(string.IsNullOrWhiteSpace(editingItem.Country) || string.IsNullOrWhiteSpace(editingItem.City))">
                    @(isEditing ? "Update" : "Add")
                </button>
            </div>
        </div>
    </div>
}

<!-- Import CSV Modal -->
@if (showImportModal)
{
    <div class="modal modal-open">
        <div class="modal-box">
            <h3 class="font-bold text-lg mb-4">Import Countries & Cities from CSV</h3>
            
            <div class="alert alert-info mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>CSV format: Country,City (header row required)</span>
            </div>
            
            <div class="form-control mb-4">
                <label class="label">
                    <span class="label-text">Select CSV File</span>
                </label>
                <InputFile class="file-input file-input-bordered" accept=".csv" OnChange="HandleFileSelection" />
            </div>
            
            @if (!string.IsNullOrEmpty(importPreview))
            {
                <div class="form-control mb-4">
                    <label class="label">
                        <span class="label-text">Preview (first 5 rows)</span>
                    </label>
                    <textarea class="textarea textarea-bordered h-32" readonly>@importPreview</textarea>
                </div>
            }
            
            <div class="modal-action">
                <button class="btn btn-ghost" @onclick="HideImportModal">Cancel</button>
                <button class="btn btn-primary" @onclick="ProcessImport" disabled="@(selectedFile == null)">
                    Import Data
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<CountryCity> countries = new();
    private IEnumerable<CountryCity> filteredCountries = new List<CountryCity>();
    
    private string searchTerm = "";
    private string selectedCountryFilter = "";
    
    private string sortColumn = nameof(CountryCity.Country);
    private bool sortAscending = true;
    
    private int currentPage = 1;
    private int pageSize = 20;
    
    // Modal state
    private bool showModal = false;
    private bool isEditing = false;
    private CountryCity editingItem = new();
    
    // Import state
    private bool showImportModal = false;
    private IBrowserFile? selectedFile;
    private string importPreview = "";
    
    // Loading state
    private bool isLoading = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCountries();
    }

    private async Task LoadCountries()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            countries = await SettingsService.GetCountriesCitiesAsync();
            FilterCountries();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading countries and cities: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterCountries()
    {
        filteredCountries = countries.AsEnumerable();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredCountries = filteredCountries.Where(c => 
                c.Country.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.City.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(selectedCountryFilter))
        {
            filteredCountries = filteredCountries.Where(c => c.Country == selectedCountryFilter);
        }

        // Apply sorting
        if (sortColumn == nameof(CountryCity.Country))
        {
            filteredCountries = sortAscending 
                ? filteredCountries.OrderBy(c => c.Country)
                : filteredCountries.OrderByDescending(c => c.Country);
        }
        else if (sortColumn == nameof(CountryCity.City))
        {
            filteredCountries = sortAscending 
                ? filteredCountries.OrderBy(c => c.City)
                : filteredCountries.OrderByDescending(c => c.City);
        }

        currentPage = 1;
        StateHasChanged();
    }

    private void SortBy(string columnName)
    {
        if (sortColumn == columnName)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = columnName;
            sortAscending = true;
        }
        FilterCountries();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage * pageSize < filteredCountries.Count())
        {
            currentPage++;
            StateHasChanged();
        }
    }

    private void ShowAddModal()
    {
        editingItem = new CountryCity();
        isEditing = false;
        showModal = true;
    }

    private void EditCountryCity(CountryCity item)
    {
        editingItem = new CountryCity
        {
            CountryCityId = item.CountryCityId,
            Country = item.Country,
            City = item.City
        };
        isEditing = true;
        showModal = true;
    }

    private async Task SaveCountryCity()
    {
        if (string.IsNullOrWhiteSpace(editingItem.Country) || string.IsNullOrWhiteSpace(editingItem.City))
            return;

        try
        {
            if (isEditing)
            {
                await SettingsService.UpdateCountryCityAsync(
                    editingItem.CountryCityId,
                    editingItem.Country.Trim(),
                    editingItem.City.Trim());
            }
            else
            {
                await SettingsService.CreateCountryCityAsync(
                    editingItem.Country.Trim(),
                    editingItem.City.Trim());
            }

            HideModal();
            await LoadCountries();
            await JSRuntime.InvokeVoidAsync("alert", $"Country/City {(isEditing ? "updated" : "added")} successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving country/city: {ex.Message}");
        }
    }

    private async Task DeleteCountryCity(CountryCity item)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Delete {item.City}, {item.Country}? This action cannot be undone.");
        
        if (confirmed)
        {
            try
            {
                await SettingsService.DeleteCountryCityAsync(item.CountryCityId);
                await LoadCountries();
                await JSRuntime.InvokeVoidAsync("alert", "Country/City deleted successfully!");
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting country/city: {ex.Message}");
            }
        }
    }

    private void HideModal()
    {
        showModal = false;
        editingItem = new CountryCity();
    }

    private void ImportFromCSV()
    {
        showImportModal = true;
    }

    private void HideImportModal()
    {
        showImportModal = false;
        selectedFile = null;
        importPreview = "";
    }

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        
        if (selectedFile != null)
        {
            try
            {
                using var stream = selectedFile.OpenReadStream();
                using var reader = new StreamReader(stream);
                
                var lines = new List<string>();
                for (int i = 0; i < 5 && !reader.EndOfStream; i++)
                {
                    lines.Add(await reader.ReadLineAsync() ?? "");
                }
                
                importPreview = string.Join("\n", lines);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error reading file: {ex.Message}");
            }
        }
    }

    private async Task ProcessImport()
    {
        if (selectedFile == null) return;

        try
        {
            using var stream = selectedFile.OpenReadStream();
            using var reader = new StreamReader(stream);
            
            var importedCount = 0;
            var line = await reader.ReadLineAsync(); // Skip header
            
            while (!reader.EndOfStream)
            {
                line = await reader.ReadLineAsync();
                if (string.IsNullOrWhiteSpace(line)) continue;
                
                var parts = line.Split(',');
                if (parts.Length >= 2)
                {
                    var country = parts[0].Trim();
                    var city = parts[1].Trim();
                    
                    if (!string.IsNullOrEmpty(country) && !string.IsNullOrEmpty(city))
                    {
                        // Check for duplicates
                        if (!countries.Any(c => c.Country.Equals(country, StringComparison.OrdinalIgnoreCase) && 
                                               c.City.Equals(city, StringComparison.OrdinalIgnoreCase)))
                        {
                            await SettingsService.CreateCountryCityAsync(country, city);
                            importedCount++;
                        }
                    }
                }
            }
            
            HideImportModal();
            await LoadCountries();
            await JSRuntime.InvokeVoidAsync("alert", $"Successfully imported {importedCount} countries/cities!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Import failed: {ex.Message}");
        }
    }

    private async Task ExportToCSV()
    {
        var csv = "Country,City\n";
        foreach (var item in filteredCountries)
        {
            csv += $"{item.Country},{item.City}\n";
        }
        
        await JSRuntime.InvokeVoidAsync("downloadFile", "countries-cities.csv", "text/csv", csv);
    }
}
