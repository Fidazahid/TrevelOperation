@page "/missing-documentation-control"
@using TravelOperation.Core.Models
@using TravelOperation.Core.Models.Entities
@using TravelOperation.Core.Models.Lookup
@using TravelOperation.Core.Services
@using TravelOperation.Core.Services.Interfaces
@using TrevelOperation.Service
@using TrevelOperation.RazorLib.Components
@inject ITransactionService TransactionService
@inject ILookupService LookupService
@inject IMessageTemplateService MessageTemplateService
@inject IJSRuntime JSRuntime

<AuthorizeRoleView RequiredRole="Finance">
<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">üìÑ Missing Documentation Control</h1>
            <p class="text-gray-600">Flag transactions without receipts</p>
        </div>
        <div class="flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshData">
                üîÑ Refresh
            </button>
            <button class="btn btn-primary" @onclick="RequestAllDocuments">
                üìß Request All
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="card bg-red-50 border-l-4 border-red-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üìÑ</div>
                    <div>
                        <div class="text-2xl font-bold text-red-700">@missingDocCount</div>
                        <div class="text-red-600">Missing Docs</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-orange-50 border-l-4 border-orange-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üí∞</div>
                    <div>
                        <div class="text-2xl font-bold text-orange-700">$@missingDocAmount.ToString("N0")</div>
                        <div class="text-orange-600">Amount at Risk</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-yellow-50 border-l-4 border-yellow-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚ö†Ô∏è</div>
                    <div>
                        <div class="text-2xl font-bold text-yellow-700">@highValueMissingCount</div>
                        <div class="text-yellow-600">High Value (>$100)</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-blue-50 border-l-4 border-blue-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üìä</div>
                    <div>
                        <div class="text-2xl font-bold text-blue-700">@complianceRate.ToString("N1")%</div>
                        <div class="text-blue-600">Compliance Rate</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-md mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedOwner" @bind:after="FilterTransactions">
                        <option value="">All Owners</option>
                        @foreach (var owner in availableOwners)
                        {
                            <option value="@owner">@owner</option>
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Category</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedCategory" @bind:after="FilterTransactions">
                        <option value="">All Categories</option>
                        <option value="Airfare">‚úà Airfare</option>
                        <option value="Lodging">üè® Lodging</option>
                        <option value="Transportation">üöï Transportation</option>
                        <option value="Meals">üçΩ Meals</option>
                        <option value="Client entertainment">üç∏ Client entertainment</option>
                        <option value="Other">‚ùî Other</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Amount Range</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedAmountRange" @bind:after="FilterTransactions">
                        <option value="">All Amounts</option>
                        <option value="high">‚â• $100 (High Risk)</option>
                        <option value="medium">$50 - $100</option>
                        <option value="low">&lt; $50</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Age</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedAge" @bind:after="FilterTransactions">
                        <option value="">All</option>
                        <option value="recent">Last 30 days</option>
                        <option value="old">30+ days</option>
                        <option value="urgent">60+ days (Urgent)</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" placeholder="Search vendor..." @bind="searchText" @bind:after="FilterTransactions">
                </div>
            </div>
        </div>
    </div>

    <!-- Transactions Table -->
    <div class="card bg-base-100 shadow-md">
        <div class="card-body">
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" class="checkbox" @onchange="ToggleSelectAll" checked="@allSelected">
                            </th>
                            <th>Priority</th>
                            <th>Transaction ID</th>
                            <th>Email</th>
                            <th>Date</th>
                            <th>Age</th>
                            <th>Vendor</th>
                            <th>Category</th>
                            <th>Currency</th>
                            <th>Amount</th>
                            <th>Amount (USD)</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in pagedResult.Items)
                        {
                            <tr class="hover @(GetRowHighlight(transaction))">
                                <td>
                                    <input type="checkbox" class="checkbox" @onchange="(e) => ToggleSelect(transaction.TransactionId, e)" checked="@selectedTransactions.Contains(transaction.TransactionId)">
                                </td>
                                <td>
                                    <div class="badge @(GetPriorityBadgeClass(transaction))">
                                        @GetPriorityText(transaction)
                                    </div>
                                </td>
                                <td>
                                    <div class="font-mono text-sm">@transaction.TransactionId</div>
                                </td>
                                <td>@transaction.Email</td>
                                <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                <td>
                                    <div class="text-sm @(GetAgeColorClass(transaction))">
                                        @GetAgeText(transaction) days
                                    </div>
                                </td>
                                <td>@transaction.Vendor</td>
                                <td>
                                    <span class="badge badge-outline">@GetCategoryIcon(transaction.Category?.Name) @transaction.Category?.Name</span>
                                </td>
                                <td>@transaction.Currency</td>
                                <td>@transaction.Amount.ToString("N2")</td>
                                <td>
                                    <div class="font-bold @(GetAmountColorClass(transaction.AmountUSD ?? 0))">
                                        $@((transaction.AmountUSD ?? 0).ToString("N2"))
                                    </div>
                                </td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-sm">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                                            <li><a @onclick="() => ViewDetails(transaction.TransactionId)">üëÅÔ∏è View Details</a></li>
                                            <li><a @onclick="() => RequestDocument(transaction.TransactionId)">üìß Request Document</a></li>
                                            <li><a @onclick="() => UploadDocument(transaction.TransactionId)">üì§ Upload Document</a></li>
                                            <li><hr /></li>
                                            <li><a @onclick="() => MarkAsExempt(transaction.TransactionId)">‚úì Mark as Exempt</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Bulk Actions -->
            @if (selectedTransactions.Any())
            {
                <div class="alert alert-warning mt-4">
                    <div class="flex justify-between items-center w-full">
                        <span>@selectedTransactions.Count transaction(s) selected - Total: $@GetSelectedAmount().ToString("N2")</span>
                        <div class="flex gap-2">
                            <button class="btn btn-sm btn-primary" @onclick="BulkRequestDocuments">
                                üìß Request Documents
                            </button>
                            <button class="btn btn-sm btn-success" @onclick="BulkMarkAsExempt">
                                ‚úì Mark as Exempt
                            </button>
                            <button class="btn btn-sm btn-secondary" @onclick="ClearSelection">
                                ‚ùå Clear Selection
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-500">
                    Showing @pagedResult.FirstItemOnPage to @pagedResult.LastItemOnPage of @pagedResult.TotalCount transactions
                    <select class="select select-bordered select-sm ml-4" @onchange="OnPageSizeChanged">
                        <option value="25" selected="@(pageSize == 25)">25 per page</option>
                        <option value="50" selected="@(pageSize == 50)">50 per page</option>
                        <option value="100" selected="@(pageSize == 100)">100 per page</option>
                    </select>
                </div>
                <div class="join">
                    <button class="join-item btn btn-sm" disabled="@(!pagedResult.HasPreviousPage)" @onclick="PreviousPage">¬´</button>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                    {
                        int pageNumber = i;
                        <button class="join-item btn btn-sm @(i == currentPage ? "btn-active" : "")" @onclick="() => GoToPage(pageNumber)">@i</button>
                    }
                    <button class="join-item btn btn-sm" disabled="@(!pagedResult.HasNextPage)" @onclick="NextPage">¬ª</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Transaction> transactions = new();
    private List<Transaction> filteredTransactions = new();
    private PagedResult<Transaction> pagedResult = new();
    private List<string> availableOwners = new();
    private HashSet<string> selectedTransactions = new();
    
    // Filters
    private string selectedOwner = "";
    private string selectedCategory = "";
    private string selectedAmountRange = "";
    private string selectedAge = "";
    private string searchText = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 25;
    
    // Summary data
    private int missingDocCount = 0;
    private decimal missingDocAmount = 0;
    private int highValueMissingCount = 0;
    private decimal complianceRate = 0;
    private bool allSelected = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMissingDocTransactions();
        CalculateSummary();
        FilterTransactions();
    }

    private async Task LoadMissingDocTransactions()
    {
        // Load paged data from server
        var paginationParams = new PaginationParams
        {
            PageNumber = currentPage,
            PageSize = pageSize,
            SortBy = "TransactionDate",
            SortDirection = "desc"
        };
        
        pagedResult = await TransactionService.GetTransactionsWithoutDocumentationPagedAsync(paginationParams);
        
        // Also get all for summary calculations
        var allMissing = await TransactionService.GetTransactionsWithoutDocumentationAsync();
        transactions = allMissing.ToList();
        filteredTransactions = transactions;
        
        availableOwners = transactions
            .Where(t => t.Trip?.Owner?.Name != null)
            .Select(t => t.Trip!.Owner!.Name)
            .Distinct()
            .ToList();
    }

    private void CalculateSummary()
    {
        missingDocCount = filteredTransactions.Count;
        missingDocAmount = filteredTransactions.Sum(t => t.AmountUSD ?? 0);
        highValueMissingCount = filteredTransactions.Count(t => (t.AmountUSD ?? 0) >= 100);
        
        // Simulate compliance rate - in real app, would need total transaction count
        var totalTransactions = filteredTransactions.Count + 150; // Mock total
        complianceRate = totalTransactions > 0 ? (150.0m / totalTransactions) * 100 : 0;
    }

    private async Task FilterTransactions()
    {
        currentPage = 1;
        selectedTransactions.Clear();
        
        // Reload with server-side pagination
        await LoadMissingDocTransactions();
        CalculateSummary();
        StateHasChanged();
    }

    private bool FilterByAmountRange(Transaction transaction)
    {
        var amount = transaction.AmountUSD ?? 0;
        return selectedAmountRange switch
        {
            "high" => amount >= 100,
            "medium" => amount >= 50 && amount < 100,
            "low" => amount < 50,
            _ => true
        };
    }

    private bool FilterByAge(Transaction transaction)
    {
        var ageInDays = GetAgeInDays(transaction);
        return selectedAge switch
        {
            "recent" => ageInDays <= 30,
            "old" => ageInDays > 30,
            "urgent" => ageInDays > 60,
            _ => true
        };
    }

    private string GetRowHighlight(Transaction transaction)
    {
        var priority = GetPriority(transaction);
        return priority switch
        {
            3 => "bg-red-50",   // Critical
            2 => "bg-orange-50", // High
            1 => "bg-yellow-50", // Medium
            _ => ""              // Low
        };
    }

    private int GetPriority(Transaction transaction)
    {
        var ageInDays = GetAgeInDays(transaction);
        var amount = transaction.AmountUSD ?? 0;
        
        // Critical: High amount + old OR very high amount
        if ((amount >= 100 && ageInDays > 60) || amount >= 300) return 3;
        
        // High: Medium amount + old OR high amount
        if ((amount >= 50 && ageInDays > 30) || amount >= 150) return 2;
        
        // Medium: Any amount + old OR medium amount
        if (ageInDays > 30 || amount >= 75) return 1;
        
        // Low: Recent + low amount
        return 0;
    }

    private string GetPriorityText(Transaction transaction)
    {
        return GetPriority(transaction) switch
        {
            3 => "Critical",
            2 => "High",
            1 => "Medium",
            _ => "Low"
        };
    }

    private string GetPriorityBadgeClass(Transaction transaction)
    {
        return GetPriority(transaction) switch
        {
            3 => "badge-error",
            2 => "badge-warning",
            1 => "badge-info",
            _ => "badge-ghost"
        };
    }

    private int GetAgeInDays(Transaction transaction)
    {
        return (DateTime.Today - transaction.TransactionDate).Days;
    }

    private string GetAgeText(Transaction transaction)
    {
        return GetAgeInDays(transaction).ToString();
    }

    private string GetAgeColorClass(Transaction transaction)
    {
        var ageInDays = GetAgeInDays(transaction);
        if (ageInDays > 60) return "text-red-600 font-bold";
        if (ageInDays > 30) return "text-orange-600 font-semibold";
        return "text-gray-600";
    }

    private string GetAmountColorClass(decimal amount)
    {
        if (amount >= 300) return "text-red-600";
        if (amount >= 150) return "text-orange-600";
        if (amount >= 75) return "text-yellow-600";
        return "text-gray-600";
    }

    private string GetCategoryIcon(string? category)
    {
        return category switch
        {
            "Airfare" => "‚úà",
            "Lodging" => "üè®",
            "Transportation" => "üöï",
            "Meals" => "üçΩ",
            "Client entertainment" => "üç∏",
            "Communication" => "üì±",
            _ => "‚ùî"
        };
    }

    private decimal GetSelectedAmount()
    {
        return selectedTransactions.Sum(id => 
            filteredTransactions.FirstOrDefault(t => t.TransactionId == id)?.AmountUSD ?? 0);
    }

    private async Task PreviousPage()
    {
        if (pagedResult.HasPreviousPage)
        {
            currentPage--;
            await LoadMissingDocTransactions();
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (pagedResult.HasNextPage)
        {
            currentPage++;
            await LoadMissingDocTransactions();
            StateHasChanged();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= pagedResult.TotalPages)
        {
            currentPage = page;
            await LoadMissingDocTransactions();
            StateHasChanged();
        }
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            pageSize = newSize;
            currentPage = 1;
            await LoadMissingDocTransactions();
            StateHasChanged();
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            foreach (var transaction in pagedResult.Items)
            {
                selectedTransactions.Add(transaction.TransactionId);
            }
        }
        else
        {
            selectedTransactions.Clear();
        }
        allSelected = isChecked;
        StateHasChanged();
    }

    private void ToggleSelect(string transactionId, ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            selectedTransactions.Add(transactionId);
        }
        else
        {
            selectedTransactions.Remove(transactionId);
        }
        StateHasChanged();
    }

    private async Task RefreshData()
    {
        await LoadMissingDocTransactions();
        FilterTransactions();
    }

    private async Task RequestAllDocuments()
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", $"Send document requests for all {filteredTransactions.Count} transactions?");
        if (result)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Document requests sent for {filteredTransactions.Count} transactions");
        }
    }

    private async Task ViewDetails(string transactionId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"View details for transaction {transactionId} - Navigation pending");
    }

    private async Task RequestDocument(string transactionId)
    {
        var transaction = transactions.FirstOrDefault(t => t.TransactionId == transactionId);
        if (transaction != null)
        {
            var message = GenerateDocumentRequestMessage(transaction);
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", message);
            await JSRuntime.InvokeVoidAsync("alert", "Document request message copied to clipboard!");
        }
    }

    private async Task UploadDocument(string transactionId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Upload document for transaction {transactionId} - File upload pending");
    }

    private async Task MarkAsExempt(string transactionId)
    {
        // In real implementation, this would update a field like "DocumentationExempt"
        await JSRuntime.InvokeVoidAsync("alert", "Document exemption feature pending - requires DB field");
    }

    private async Task BulkRequestDocuments()
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Document requests sent for {selectedTransactions.Count} transactions");
        selectedTransactions.Clear();
        StateHasChanged();
    }

    private async Task BulkMarkAsExempt()
    {
        await JSRuntime.InvokeVoidAsync("alert", "Bulk exemption feature pending - requires DB field");
        selectedTransactions.Clear();
        StateHasChanged();
    }

    private void ClearSelection()
    {
        selectedTransactions.Clear();
        allSelected = false;
        StateHasChanged();
    }

    private string GenerateDocumentRequestMessage(Transaction transaction)
    {
        var ageInDays = GetAgeInDays(transaction);
        var urgencyText = ageInDays > 60 ? "URGENT - " : ageInDays > 30 ? "Important - " : "";
        var additionalNote = ageInDays > 60 ? "This expense is over 60 days old and requires immediate attention." : "";
        var categoryName = transaction.Category?.Name ?? "Unknown";
        
        return $@"Hi {GetFirstName(transaction.Email)},

{urgencyText}Missing Receipt Required

We are missing documentation for the following expense:

Transaction ID: {transaction.TransactionId}
Date: {transaction.TransactionDate:dd/MM/yyyy}
Vendor: {transaction.Vendor}
Category: {categoryName}
Amount: {transaction.Currency} {transaction.Amount:N2}
Age: {ageInDays} days

Please provide a receipt or other supporting documentation for this expense as soon as possible. This is required for compliance and tax reporting purposes.

{additionalNote}

You can upload the document through the expense portal or reply with an attached image/PDF.

Thank you for your prompt attention to this matter!";
    }

    private string GetFirstName(string email)
    {
        var parts = email.Split('@');
        if (parts.Length > 0)
        {
            var nameParts = parts[0].Split('.');
            return nameParts.Length > 0 ? nameParts[0] : email;
        }
        return email;
    }
}
</AuthorizeRoleView>