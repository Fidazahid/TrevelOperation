@page "/airfare-control"
@using TravelOperation.Core.Models
@using TravelOperation.Core.Models.Entities
@using TravelOperation.Core.Models.Lookup
@using TravelOperation.Core.Services
@using TravelOperation.Core.Services.Interfaces
@using TrevelOperation.RazorLib.Components
@inject ITransactionService TransactionService
@inject ILookupService LookupService
@inject ITripService TripService
@inject IJSRuntime JSRuntime

<AuthorizeRoleView RequiredRole="Finance">
<div class="container mx-auto ">
    <div class="flex justify-between items-center ">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">‚úàÔ∏è Airfare Control</h1>
            <p class="text-gray-600">Ensure all airfare transactions have cabin class assigned</p>
        </div>
        <div class="flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshData">
                üîÑ Refresh
            </button>
            <button class="btn btn-primary" @onclick="ValidateAll">
                ‚úÖ Validate All
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 ">
        <div class="card bg-yellow-50 border-l-4 border-yellow-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚ö†Ô∏è</div>
                    <div>
                        <div class="text-2xl font-bold text-yellow-700">@incompleteCount</div>
                        <div class="text-yellow-600">Missing Cabin Class</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-blue-50 border-l-4 border-blue-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚úàÔ∏è</div>
                    <div>
                        <div class="text-2xl font-bold text-blue-700">@totalAirfareTransactions</div>
                        <div class="text-blue-600">Total Airfare</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-green-50 border-l-4 border-green-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üëë</div>
                    <div>
                        <div class="text-2xl font-bold text-green-700">@premiumCount</div>
                        <div class="text-green-600">Premium Cabin</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-purple-50 border-l-4 border-purple-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üí∞</div>
                    <div>
                        <div class="text-2xl font-bold text-purple-700">$@totalAirfareAmount.ToString("N0")</div>
                        <div class="text-purple-600">Total Amount</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-md mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedOwner" @bind:after="FilterTransactions">
                        <option value="">All Owners</option>
                        @foreach (var owner in availableOwners)
                        {
                            <option value="@owner">@owner</option>
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Status</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedStatus" @bind:after="FilterTransactions">
                        <option value="">All</option>
                        <option value="missing">Missing Cabin Class</option>
                        <option value="premium">Premium Cabin</option>
                        <option value="economy">Economy</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Date Range</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedDateRange" @bind:after="FilterTransactions">
                        <option value="">All Dates</option>
                        <option value="last-30">Last 30 days</option>
                        <option value="last-90">Last 90 days</option>
                        <option value="this-year">This year</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" placeholder="Search vendor..." @bind="searchText" @bind:after="FilterTransactions">
                </div>
            </div>
        </div>
    </div>

    <!-- Transactions Table -->
    <div class="card bg-base-100 shadow-md">
        <div class="card-body">
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" class="checkbox" @onchange="ToggleSelectAll" checked="@allSelected">
                            </th>
                            <th>Document</th>
                            <th>Transaction ID</th>
                            <th>Email</th>
                            <th>Date</th>
                            <th>Vendor</th>
                            <th>Address</th>
                            <th>Currency</th>
                            <th>Amount</th>
                            <th>Amount (USD)</th>
                            <th>Cabin Class</th>
                            <th>Category</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in pagedResult.Items)
                        {
                            <tr class="hover">
                                <td>
                                    <input type="checkbox" class="checkbox" @onchange="(e) => ToggleSelect(transaction.TransactionId, e)" checked="@selectedTransactions.Contains(transaction.TransactionId)">
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(transaction.DocumentUrl))
                                    {
                                        <a href="@transaction.DocumentUrl" target="_blank" class="btn btn-ghost btn-sm">üìÑ</a>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400">No doc</span>
                                    }
                                </td>
                                <td>
                                    <div class="font-mono text-sm">@transaction.TransactionId</div>
                                </td>
                                <td>@transaction.Email</td>
                                <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                <td>@transaction.Vendor</td>
                                <td>
                                    <div class="text-sm text-gray-600">@transaction.Address</div>
                                </td>
                                <td>@transaction.Currency</td>
                                <td>@transaction.Amount.ToString("N2")</td>
                                <td>$@(transaction.AmountUSD?.ToString("N2") ?? "0.00")</td>
                                <td>
                                    <select class="select select-bordered select-sm @(transaction.CabinClassId == null ? "bg-yellow-100 border-yellow-400" : "")" 
                                            @onchange="(e) => UpdateCabinClass(transaction.TransactionId, e.Value?.ToString())">
                                        <option value="">Select...</option>
                                        @foreach (var cabin in cabinClasses)
                                        {
                                            <option value="@cabin.CabinClassId" selected="@(transaction.CabinClassId == cabin.CabinClassId)">
                                                @cabin.Emoji @cabin.Name
                                            </option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <select class="select select-bordered select-sm bg-blue-50" 
                                            @onchange="(e) => UpdateCategory(transaction.TransactionId, e.Value?.ToString())">
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.CategoryId" selected="@(transaction.CategoryId == category.CategoryId)">
                                                @category.Emoji @category.Name
                                            </option>
                                        }
                                    </select>
                                </td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-sm">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-white rounded-box w-52 z-50">
                                            <li><a @onclick="() => ViewTransactionDetails(transaction.TransactionId)">üëÅÔ∏è View details</a></li>
                                            <li><a @onclick="() => GenerateMessage(transaction.TransactionId)">üìß Generate message</a></li>
                                            <li><a @onclick="() => LinkToTrip(transaction.TransactionId)">üîó Link to trip</a></li>
                                            <li><hr /></li>
                                            <li><a @onclick="() => MarkAsValid(transaction.TransactionId)">‚úÖ Mark valid</a></li>
                                            <li><a @onclick="() => ExportTransaction(transaction.TransactionId)" class="text-info">üìÑ Export</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Bulk Actions -->
            @if (selectedTransactions.Any())
            {
                <div class="alert alert-info mt-4">
                    <div class="flex justify-between items-center w-full">
                        <span>@selectedTransactions.Count transaction(s) selected</span>
                        <div class="flex gap-2">
                            <button class="btn btn-sm btn-success" @onclick="MarkSelectedAsValid">
                                ‚úÖ Mark Selected as Valid
                            </button>
                            <button class="btn btn-sm btn-secondary" @onclick="ClearSelection">
                                ‚ùå Clear Selection
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-500">
                    Showing @pagedResult.FirstItemOnPage to @pagedResult.LastItemOnPage of @pagedResult.TotalCount transactions
                    <select class="select select-bordered select-sm ml-4" @onchange="OnPageSizeChanged">
                        <option value="25" selected="@(pageSize == 25)">25 per page</option>
                        <option value="50" selected="@(pageSize == 50)">50 per page</option>
                        <option value="100" selected="@(pageSize == 100)">100 per page</option>
                    </select>
                </div>
                <div class="join">
                    <button class="join-item btn btn-sm" disabled="@(!pagedResult.HasPreviousPage)" @onclick="PreviousPage">¬´</button>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                    {
                        int pageNumber = i;
                        <button class="join-item btn btn-sm @(i == currentPage ? "btn-active" : "")" @onclick="() => GoToPage(pageNumber)">@i</button>
                    }
                    <button class="join-item btn btn-sm" disabled="@(!pagedResult.HasNextPage)" @onclick="NextPage">¬ª</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Transaction Detail Modal -->
<TransactionDetailModal 
    Transaction="selectedTransaction" 
    IsVisible="showDetailModal" 
    OnClose="CloseDetailModal" />

<!-- Link to Trip Modal -->
<LinkTransactionsModal 
    @ref="linkTransactionsModal"
    IsVisible="showLinkModal"
    TripId="@(selectedTripForLink?.TripId ?? 0)"
    Trip="selectedTripForLink"
    OnClose="CloseLinkModal"
    OnTransactionsLinked="HandleTransactionsLinked" />

</AuthorizeRoleView>

<!-- Alert Dialog (for messages) - OUTSIDE AuthorizeRoleView -->
<AlertDialog 
    IsVisible="showAlertDialog"
    Title="@alertTitle"
    Message="@alertMessage"
    Type="@alertType"
    OkButtonText="@alertOkText"
    OnClose="CloseAlertDialog" />

<!-- Confirmation Dialog (for confirmations) - OUTSIDE AuthorizeRoleView -->
<ConfirmDialog 
    IsVisible="showConfirmDialog"
    Title="@confirmTitle"
    Message="@confirmMessage"
    Icon="@confirmIcon"
    ConfirmButtonText="@confirmButtonText"
    CancelButtonText="@cancelButtonText"
    ConfirmButtonClass="@confirmButtonClass"
    OnResult="HandleConfirmResult" />

@code {
    private List<Transaction> transactions = new();
    private List<Transaction> filteredTransactions = new();
    private PagedResult<Transaction> pagedResult = new();
    private List<CabinClass> cabinClasses = new();
    private List<Category> categories = new();
    private List<string> availableOwners = new();
    private HashSet<string> selectedTransactions = new();
    
    // Filters
    private string selectedOwner = "";
    private string selectedStatus = "";
    private string selectedDateRange = "";
    private string searchText = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 25;
    
    // Summary data
    private int incompleteCount = 0;
    private int totalAirfareTransactions = 0;
    private int premiumCount = 0;
    private decimal totalAirfareAmount = 0;
    private bool allSelected = false;
    
    // Modal state
    private Transaction? selectedTransaction = null;
    private bool showDetailModal = false;
    private bool showLinkModal = false;
    private LinkTransactionsModal? linkTransactionsModal;
    private Trip? selectedTripForLink = null;
    
    // Alert Dialog state
    private bool showAlertDialog = false;
    private string alertTitle = "";
    private string alertMessage = "";
    private AlertDialog.AlertType alertType = AlertDialog.AlertType.Info;
    private string alertOkText = "OK";
    
    // Confirmation Dialog state
    private bool showConfirmDialog = false;
    private string confirmTitle = "";
    private string confirmMessage = "";
    private string confirmIcon = "‚ùì";
    private string confirmButtonText = "Yes";
    private string cancelButtonText = "No";
    private string confirmButtonClass = "btn-primary";
    private Func<Task>? pendingConfirmAction = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadLookupData();
        await LoadAirfareTransactions();
        CalculateSummary();
        FilterTransactions();
    }

    private async Task LoadLookupData()
    {
        cabinClasses = (await LookupService.GetCabinClassesAsync()).ToList();
        categories = (await LookupService.GetCategoriesAsync()).ToList();
    }

    private async Task LoadAirfareTransactions()
    {
        // Load paged data from server
        var paginationParams = new PaginationParams
        {
            PageNumber = currentPage,
            PageSize = pageSize,
            SortBy = "TransactionDate",
            SortDirection = "desc"
        };
        
        pagedResult = await TransactionService.GetAirfareWithoutCabinClassPagedAsync(paginationParams);
        
        // Also get all airfare for summary calculations and owner filter
        var allAirfare = await TransactionService.GetAirfareWithoutCabinClassAsync();
        transactions = allAirfare.ToList();
        filteredTransactions = transactions; // For summary calculations
        
        // Extract unique owners
        availableOwners = transactions
            .Where(t => t.Trip?.Owner?.Name != null)
            .Select(t => t.Trip!.Owner!.Name)
            .Distinct()
            .ToList();
    }

    private void CalculateSummary()
    {
        incompleteCount = filteredTransactions.Count(t => t.CabinClassId == null);
        totalAirfareTransactions = filteredTransactions.Count;
        
        // Premium cabin classes (Business, First)
        var premiumCabinClasses = cabinClasses.Where(c => c.Name == "Business" || c.Name == "First").Select(c => c.CabinClassId).ToList();
        premiumCount = filteredTransactions.Count(t => t.CabinClassId.HasValue && premiumCabinClasses.Contains(t.CabinClassId.Value));
        
        totalAirfareAmount = filteredTransactions.Sum(t => t.AmountUSD ?? 0);
    }

    private async Task FilterTransactions()
    {
        // Apply client-side filtering for summary
        filteredTransactions = transactions.Where(t =>
            (string.IsNullOrEmpty(selectedOwner) || (t.Trip?.Owner?.Name == selectedOwner)) &&
            (string.IsNullOrEmpty(searchText) || 
             (t.Vendor?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
             t.TransactionId.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
            FilterByStatus(t) &&
            FilterByDateRange(t)
        ).OrderByDescending(t => t.TransactionDate).ToList();
        
        CalculateSummary();
        currentPage = 1;
        selectedTransactions.Clear();
        
        // Reload with server-side pagination
        await LoadAirfareTransactions();
        StateHasChanged();
    }

    private bool FilterByStatus(Transaction transaction)
    {
        if (string.IsNullOrEmpty(selectedStatus))
            return true;

        var premiumCabinClasses = cabinClasses.Where(c => c.Name == "Business" || c.Name == "First").Select(c => c.CabinClassId).ToList();
        
        return selectedStatus switch
        {
            "missing" => transaction.CabinClassId == null,
            "premium" => transaction.CabinClassId.HasValue && premiumCabinClasses.Contains(transaction.CabinClassId.Value),
            "economy" => transaction.CabinClass?.Name == "Economy",
            _ => true
        };
    }

    private bool FilterByDateRange(Transaction transaction)
    {
        return selectedDateRange switch
        {
            "last-30" => transaction.TransactionDate >= DateTime.Today.AddDays(-30),
            "last-90" => transaction.TransactionDate >= DateTime.Today.AddDays(-90),
            "this-year" => transaction.TransactionDate.Year == DateTime.Today.Year,
            _ => true
        };
    }

    private async Task PreviousPage()
    {
        if (pagedResult.HasPreviousPage)
        {
            currentPage--;
            await LoadAirfareTransactions();
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (pagedResult.HasNextPage)
        {
            currentPage++;
            await LoadAirfareTransactions();
            StateHasChanged();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= pagedResult.TotalPages)
        {
            currentPage = page;
            await LoadAirfareTransactions();
            StateHasChanged();
        }
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            pageSize = newSize;
            currentPage = 1;
            await LoadAirfareTransactions();
            StateHasChanged();
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            foreach (var transaction in pagedResult.Items)
            {
                selectedTransactions.Add(transaction.TransactionId);
            }
        }
        else
        {
            selectedTransactions.Clear();
        }
        allSelected = isChecked;
        StateHasChanged();
    }

    private void ToggleSelect(string transactionId, ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            selectedTransactions.Add(transactionId);
        }
        else
        {
            selectedTransactions.Remove(transactionId);
        }
        allSelected = selectedTransactions.Count == pageSize;
        StateHasChanged();
    }

    private async Task UpdateCabinClass(string transactionId, string? cabinClassIdStr)
    {
        try
        {
            var transaction = transactions.FirstOrDefault(t => t.TransactionId == transactionId);
            if (transaction != null && !string.IsNullOrEmpty(cabinClassIdStr))
            {
                transaction.CabinClassId = int.Parse(cabinClassIdStr);
                await TransactionService.UpdateTransactionAsync(transaction);
                
                ShowAlert("Success", "Cabin class updated successfully", AlertDialog.AlertType.Success);
                CalculateSummary();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error updating cabin class: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task UpdateCategory(string transactionId, string? categoryIdStr)
    {
        try
        {
            var transaction = transactions.FirstOrDefault(t => t.TransactionId == transactionId);
            if (transaction != null && !string.IsNullOrEmpty(categoryIdStr))
            {
                transaction.CategoryId = int.Parse(categoryIdStr);
                await TransactionService.UpdateTransactionAsync(transaction);
                
                ShowAlert("Success", "Category updated successfully", AlertDialog.AlertType.Success);
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error updating category: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task RefreshData()
    {
        await LoadAirfareTransactions();
        ShowAlert("Refreshed", "Data refreshed successfully", AlertDialog.AlertType.Info);
        FilterTransactions();
    }

    private async Task ValidateAll()
    {
        try
        {
            ShowConfirm(
                "Validate All Transactions",
                $"Mark all {filteredTransactions.Count} visible transactions as valid?",
                async () =>
                {
                    foreach (var transaction in filteredTransactions)
                    {
                        await TransactionService.MarkAsValidAsync(transaction.TransactionId);
                    }
                    ShowAlert("Success", $"Marked {filteredTransactions.Count} transactions as valid", AlertDialog.AlertType.Success);
                    await RefreshData();
                },
                "‚úÖ",
                "Validate All",
                "Cancel",
                "btn-success"
            );
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error validating transactions: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    // Modal and Detail Functions
    private async Task ViewTransactionDetails(string transactionId)
    {
        try
        {
            selectedTransaction = await TransactionService.GetTransactionByIdAsync(transactionId);
            showDetailModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error loading transaction: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private void CloseDetailModal()
    {
        showDetailModal = false;
        selectedTransaction = null;
        StateHasChanged();
    }

    private async Task LinkToTrip(string transactionId)
    {
        try
        {
            // Load the transaction to get the email and date
            var transaction = await TransactionService.GetTransactionByIdAsync(transactionId);
            if (transaction == null)
            {
                ShowAlert("Transaction Not Found", "The selected transaction could not be found.", AlertDialog.AlertType.Error);
                return;
            }

            // Find trips for this user around the transaction date
            var userTrips = await TripService.GetTripsByEmailAsync(transaction.Email);
            var relevantTrips = userTrips.Where(t => 
                transaction.TransactionDate >= t.StartDate.AddDays(-5) && 
                transaction.TransactionDate <= t.EndDate.AddDays(5)
            ).ToList();

            if (!relevantTrips.Any())
            {
                // No trips found - suggest creating one
                ShowAlert(
                    "No Trips Available", 
                    "No trips found for this user and date range. Please create a trip first.", 
                    AlertDialog.AlertType.Warning
                );
                return;
            }

            // If only one trip, confirm before linking
            if (relevantTrips.Count == 1)
            {
                selectedTripForLink = relevantTrips.First();
                
                ShowConfirm(
                    "Link Transaction",
                    $"Link this transaction to trip:\n\n{selectedTripForLink.TripName}\n{selectedTripForLink.StartDate:dd/MM/yyyy} - {selectedTripForLink.EndDate:dd/MM/yyyy}",
                    async () =>
                    {
                        await TransactionService.LinkTransactionToTripAsync(transactionId, selectedTripForLink.TripId);
                        ShowAlert("Success", $"Transaction linked to trip: {selectedTripForLink.TripName}", AlertDialog.AlertType.Success);
                        await RefreshData();
                    },
                    "üß≥",
                    "Link",
                    "Cancel",
                    "btn-primary"
                );
            }
            else
            {
                // Multiple trips found - let user choose via modal
                selectedTripForLink = relevantTrips.First();
                showLinkModal = true;
                ShowAlert(
                    "Multiple Trips Found", 
                    $"Found {relevantTrips.Count} possible trips. Please select one from the modal.", 
                    AlertDialog.AlertType.Info
                );
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error linking transaction: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private void CloseLinkModal()
    {
        showLinkModal = false;
        selectedTripForLink = null;
        StateHasChanged();
    }

    private async Task HandleTransactionsLinked()
    {
        await RefreshData();
        ShowAlert("Success", "Transaction linked to trip successfully", AlertDialog.AlertType.Success);
    }

    private async Task ExportTransaction(string transactionId)
    {
        try
        {
            var transaction = transactions.FirstOrDefault(t => t.TransactionId == transactionId);
            if (transaction != null)
            {
                var csv = $"Transaction ID,Date,Email,Vendor,Amount,Currency,Cabin Class,Category\n";
                csv += $"{transaction.TransactionId},{transaction.TransactionDate:dd/MM/yyyy},{transaction.Email},{transaction.Vendor},{transaction.Amount},{transaction.Currency},{transaction.CabinClass?.Name ?? "Not Set"},{transaction.Category?.Name ?? "Airfare"}\n";
                
                await JSRuntime.InvokeVoidAsync("downloadFile", $"transaction-{transactionId}.csv", "text/csv", csv);
                ShowAlert("Success", "Transaction exported successfully", AlertDialog.AlertType.Success);
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error exporting transaction: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task GenerateMessage(string transactionId)
    {
        try
        {
            // First try from current page, then from all transactions
            var transaction = pagedResult.Items.FirstOrDefault(t => t.TransactionId == transactionId) 
                           ?? transactions.FirstOrDefault(t => t.TransactionId == transactionId);
            
            if (transaction != null)
            {
                var message = GenerateAirfareMessage(transaction);
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", message);
                ShowAlert("Success", "Message copied to clipboard!", AlertDialog.AlertType.Success);
                StateHasChanged();
            }
            else
            {
                ShowAlert("Error", "Transaction not found", AlertDialog.AlertType.Error);
            }
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error generating message: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task MarkAsValid(string transactionId)
    {
        try
        {
            await TransactionService.MarkAsValidAsync(transactionId);
            var transaction = transactions.FirstOrDefault(t => t.TransactionId == transactionId);
            if (transaction != null)
            {
                transaction.IsValid = true;
                StateHasChanged();
            }
            ShowAlert("Success", "Transaction marked as valid", AlertDialog.AlertType.Success);
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error marking as valid: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task MarkSelectedAsValid()
    {
        try
        {
            foreach (var transactionId in selectedTransactions)
            {
                await TransactionService.MarkAsValidAsync(transactionId);
            }
            selectedTransactions.Clear();
            ShowAlert("Success", "Selected transactions marked as valid", AlertDialog.AlertType.Success);
            await RefreshData();
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error marking transactions as valid: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private void ClearSelection()
    {
        selectedTransactions.Clear();
        allSelected = false;
        StateHasChanged();
    }

    private string GenerateAirfareMessage(Transaction transaction)
    {
        var cabinClassName = transaction.CabinClass?.Name ?? "Unknown";
        var categoryName = transaction.Category?.Name ?? "Airfare";
        return $@"Hi {GetFirstName(transaction.Email)},

I have a question about the following travel-related transaction:

Transaction ID: {transaction.TransactionId}
Date: {transaction.TransactionDate:dd/MM/yyyy}
Category: {categoryName}
Vendor: {transaction.Vendor}
Address: {transaction.Address}
Amount: {transaction.Currency} {transaction.Amount:N2}
Documentation: {transaction.DocumentUrl}

The system detected this as an airfare transaction but couldn't determine the cabin class. Could you please confirm which cabin class was booked (Economy, Premium Economy, Business, or First)?

This information is required for tax reporting purposes.

Thank you!";
    }

    private string GetFirstName(string email)
    {
        var parts = email.Split('@');
        if (parts.Length > 0)
        {
            var nameParts = parts[0].Split('.');
            return nameParts.Length > 0 ? nameParts[0] : email;
        }
        return email;
    }
    
    // Alert Dialog Methods
    private void ShowAlert(string title, string message, AlertDialog.AlertType type = AlertDialog.AlertType.Info, string okText = "OK")
    {
        Console.WriteLine($"ShowAlert called - Title: {title}, IsVisible: {showAlertDialog}");
        alertTitle = title;
        alertMessage = message;
        alertType = type;
        alertOkText = okText;
        showAlertDialog = true;
        Console.WriteLine($"After set - IsVisible: {showAlertDialog}");
        StateHasChanged();
    }
    
    private void CloseAlertDialog()
    {
        showAlertDialog = false;
        StateHasChanged();
    }
    
    // Confirmation Dialog Methods
    private void ShowConfirm(string title, string message, Func<Task> onConfirm, string icon = "‚ùì", 
        string confirmText = "Yes", string cancelText = "No", string buttonClass = "btn-primary")
    {
        confirmTitle = title;
        confirmMessage = message;
        confirmIcon = icon;
        confirmButtonText = confirmText;
        cancelButtonText = cancelText;
        confirmButtonClass = buttonClass;
        pendingConfirmAction = onConfirm;
        showConfirmDialog = true;
        StateHasChanged();
    }
    
    private async Task HandleConfirmResult(bool confirmed)
    {
        showConfirmDialog = false;
        
        if (confirmed && pendingConfirmAction != null)
        {
            await pendingConfirmAction.Invoke();
        }
        
        pendingConfirmAction = null;
        StateHasChanged();
    }
}