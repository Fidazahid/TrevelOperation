@page "/data-integrity/split-engine"
@using TravelOperation.Core.Models.Entities
@using TravelOperation.Core.Models.Lookup
@using TravelOperation.Core.Models
@using TravelOperation.Core.Interfaces
@using TrevelOperation.Service
@using TrevelOperation.RazorLib.Components
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@inject ISplitService SplitService
@inject ISettingsService SettingsService

<AuthorizeRoleView RequiredRole="Finance">
<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">‚úÇÔ∏è Split Engine</h1>
            <p class="text-gray-600">Automatically split shared expenses and manage participant allocations</p>
        </div>
        <div class="flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshSuggestions">
                üîÑ Refresh
            </button>
            <button class="btn btn-primary" @onclick="ProcessAllSuggestions">
                ‚ö° Process All
            </button>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="card bg-blue-50 border-l-4 border-blue-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚úÇÔ∏è</div>
                    <div>
                        <div class="text-2xl font-bold text-blue-700">@splitSuggestions.Count</div>
                        <div class="text-blue-600">Split Suggestions</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-green-50 border-l-4 border-green-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üí∞</div>
                    <div>
                        <div class="text-2xl font-bold text-green-700">$@totalSplitAmount.ToString("N0")</div>
                        <div class="text-green-600">Total Amount</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-purple-50 border-l-4 border-purple-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üë•</div>
                    <div>
                        <div class="text-2xl font-bold text-purple-700">@totalParticipants</div>
                        <div class="text-purple-600">Participants</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-orange-50 border-l-4 border-orange-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚ö°</div>
                    <div>
                        <div class="text-2xl font-bold text-orange-700">@highConfidenceSuggestions</div>
                        <div class="text-orange-600">High Confidence</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-md mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Category</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedCategory" @bind:after="FilterSuggestions">
                        <option value="">All Categories</option>
                        <option value="Client entertainment">Client entertainment</option>
                        <option value="Meals">Meals</option>
                        <option value="Transportation">Transportation</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Confidence</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedConfidence" @bind:after="FilterSuggestions">
                        <option value="">All Confidence</option>
                        <option value="High">High (80%+)</option>
                        <option value="Medium">Medium (50-79%)</option>
                        <option value="Low">Low (under 50%)</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Amount Range</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedAmountRange" @bind:after="FilterSuggestions">
                        <option value="">All Amounts</option>
                        <option value="high">High ($200+)</option>
                        <option value="medium">Medium ($50-199)</option>
                        <option value="low">Low (under $50)</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" placeholder="Search vendor or participants..." 
                           @bind="searchText" @bind:after="FilterSuggestions">
                </div>
            </div>
        </div>
    </div>

    <!-- Split Suggestions Table -->
    <div class="card bg-base-100 shadow-md">
        <div class="card-body">
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" class="checkbox" @onchange="ToggleSelectAll" checked="@allSelected">
                            </th>
                            <th>Transaction</th>
                            <th>Vendor</th>
                            <th>Category</th>
                            <th>Amount</th>
                            <th>Participants</th>
                            <th>Split Suggestion</th>
                            <th>Confidence</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var suggestion in filteredSuggestions.Skip((currentPage - 1) * pageSize).Take(pageSize))
                        {
                            <tr class="hover">
                                <td>
                                    <input type="checkbox" class="checkbox" @onchange="(e) => ToggleSelect(suggestion.TransactionId, e)" 
                                           checked="@selectedSuggestions.Contains(suggestion.TransactionId)">
                                </td>
                                <td>
                                    <div class="font-mono text-sm">@suggestion.TransactionId</div>
                                    <div class="text-xs text-gray-500">@suggestion.Transaction.TransactionDate.ToString("dd/MM/yyyy")</div>
                                </td>
                                <td>
                                    <div class="font-semibold">@suggestion.Transaction.Vendor</div>
                                    <div class="text-xs text-gray-500">@(suggestion.Transaction.Address ?? "")</div>
                                </td>
                                <td>
                                    <span class="badge @GetCategoryBadgeClass(suggestion.Transaction.Category?.Name ?? "Other")">
                                        @GetCategoryIcon(suggestion.Transaction.Category?.Name ?? "Other") @(suggestion.Transaction.Category?.Name ?? "Other")
                                    </span>
                                </td>
                                <td>
                                    <div class="font-bold">$@suggestion.TotalAmount.ToString("N2")</div>
                                    <div class="text-xs text-gray-500">@suggestion.Transaction.Currency</div>
                                </td>
                                <td>
                                    <div class="max-w-xs">
                                        @foreach (var participant in suggestion.SuggestedParticipants.Take(3))
                                        {
                                            <div class="badge badge-outline badge-sm mr-1 mb-1">@GetParticipantDisplay(participant)</div>
                                        }
                                        @if (suggestion.SuggestedParticipants.Count > 3)
                                        {
                                            <div class="badge badge-neutral badge-sm">+@(suggestion.SuggestedParticipants.Count - 3) more</div>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div class="text-sm">
                                        <div class="font-semibold">@(suggestion.SuggestedSplits.Any() ? "Suggested" : "Equal") split</div>
                                        <div class="text-xs text-gray-500">
                                            @if (suggestion.SuggestedSplits.Any())
                                            {
                                                <span>$@((suggestion.TotalAmount / suggestion.SuggestedSplits.Count).ToString("N2")) each</span>
                                            }
                                            else
                                            {
                                                <span>Custom allocation</span>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="radial-progress @GetConfidenceColor(suggestion.ConfidenceScore)" style="--value:@suggestion.ConfidenceScore;">
                                        <span class="text-xs">@suggestion.ConfidenceScore%</span>
                                    </div>
                                </td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-sm">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                                            <li><a @onclick="() => ViewDetails(suggestion.TransactionId)">üëÅÔ∏è View Details</a></li>
                                            <li><a @onclick="() => EditSplit(suggestion)">‚úèÔ∏è Edit Split</a></li>
                                            <li><a @onclick="() => ProcessSplit(suggestion)">‚úÖ Accept Split</a></li>
                                            <li><hr /></li>
                                            <li><a @onclick="() => RejectSplit(suggestion.TransactionId)">‚ùå Reject</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Bulk Actions -->
            @if (selectedSuggestions.Any())
            {
                <div class="alert alert-info mt-4">
                    <div class="flex justify-between items-center w-full">
                        <span>@selectedSuggestions.Count suggestion(s) selected</span>
                        <div class="flex gap-2">
                            <button class="btn btn-sm btn-success" @onclick="ProcessSelectedSplits">
                                ‚úÖ Accept Selected
                            </button>
                            <button class="btn btn-sm btn-error" @onclick="RejectSelectedSplits">
                                ‚ùå Reject Selected
                            </button>
                            <button class="btn btn-sm btn-secondary" @onclick="ClearSelection">
                                üóëÔ∏è Clear Selection
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-500">
                    Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, filteredSuggestions.Count) of @filteredSuggestions.Count suggestions
                </div>
                <div class="join">
                    <button class="join-item btn btn-sm" disabled="@(currentPage <= 1)" @onclick="() => ChangePage(currentPage - 1)">¬´</button>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        <button class="join-item btn btn-sm @(i == currentPage ? "btn-active" : "")" @onclick="() => ChangePage(i)">@i</button>
                    }
                    <button class="join-item btn btn-sm" disabled="@(currentPage >= totalPages)" @onclick="() => ChangePage(currentPage + 1)">¬ª</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Split Transaction Modal -->
<TransactionSplitModal 
    ShowModal="@showSplitModal"
    Transaction="@selectedTransaction"
    Categories="@categories"
    AvailableParticipants="@availableParticipants"
    OnSplitSaved="@HandleSplitSaved"
    OnCancel="@HandleModalCancel" />

@code {
    private List<SplitSuggestion> splitSuggestions = new();
    private List<SplitSuggestion> filteredSuggestions = new();
    private HashSet<string> selectedSuggestions = new();
    
    // Modal state
    private bool showSplitModal = false;
    private Transaction? selectedTransaction = null;
    private List<Category> categories = new();
    private List<string> availableParticipants = new();
    
    // Filters
    private string selectedCategory = "";
    private string selectedConfidence = "";
    private string selectedAmountRange = "";
    private string searchText = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 15;
    private int totalPages => (int)Math.Ceiling((double)filteredSuggestions.Count / pageSize);
    
    // Statistics
    private decimal totalSplitAmount = 0;
    private int totalParticipants = 0;
    private int highConfidenceSuggestions = 0;
    private bool allSelected = false;
    
    // Loading state
    private bool isLoading = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAndParticipants();
        await LoadSplitSuggestions();
        CalculateStatistics();
        FilterSuggestions();
    }

    private async Task LoadCategoriesAndParticipants()
    {
        try
        {
            categories = await SettingsService.GetAllCategoriesAsync();
            
            var headcount = await SettingsService.GetAllHeadcountAsync();
            availableParticipants = headcount
                .Select(h => h.Email)
                .Distinct()
                .OrderBy(e => e)
                .ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }

    private async Task LoadSplitSuggestions()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            StateHasChanged();

            var suggestions = await SplitService.GetSplitSuggestionsAsync();
            splitSuggestions = suggestions.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading split suggestions: {ex.Message}";
            splitSuggestions = new();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CalculateStatistics()
    {
        totalSplitAmount = filteredSuggestions.Sum(s => s.TotalAmount);
        totalParticipants = filteredSuggestions.SelectMany(s => s.SuggestedParticipants).Distinct().Count();
        highConfidenceSuggestions = filteredSuggestions.Count(s => s.ConfidenceScore >= 80);
    }

    private void FilterSuggestions()
    {
        filteredSuggestions = splitSuggestions.Where(s =>
            (string.IsNullOrEmpty(selectedCategory) || (s.Transaction.Category?.Name ?? "") == selectedCategory) &&
            (string.IsNullOrEmpty(selectedConfidence) || FilterByConfidence(s)) &&
            (string.IsNullOrEmpty(selectedAmountRange) || FilterByAmountRange(s)) &&
            (string.IsNullOrEmpty(searchText) || 
             (s.Transaction.Vendor?.Contains(searchText, StringComparison.OrdinalIgnoreCase) ?? false) ||
             s.SuggestedParticipants.Any(p => p.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
        ).ToList();
        
        CalculateStatistics();
        currentPage = 1;
        selectedSuggestions.Clear();
        StateHasChanged();
    }

    private bool FilterByConfidence(SplitSuggestion suggestion)
    {
        return selectedConfidence switch
        {
            "High" => suggestion.ConfidenceScore >= 80,
            "Medium" => suggestion.ConfidenceScore >= 50 && suggestion.ConfidenceScore < 80,
            "Low" => suggestion.ConfidenceScore < 50,
            _ => true
        };
    }

    private bool FilterByAmountRange(SplitSuggestion suggestion)
    {
        return selectedAmountRange switch
        {
            "high" => suggestion.TotalAmount >= 200,
            "medium" => suggestion.TotalAmount >= 50 && suggestion.TotalAmount < 200,
            "low" => suggestion.TotalAmount < 50,
            _ => true
        };
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            foreach (var suggestion in filteredSuggestions.Skip((currentPage - 1) * pageSize).Take(pageSize))
            {
                selectedSuggestions.Add(suggestion.TransactionId);
            }
        }
        else
        {
            selectedSuggestions.Clear();
        }
        allSelected = isChecked;
        StateHasChanged();
    }

    private void ToggleSelect(string transactionId, ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            selectedSuggestions.Add(transactionId);
        }
        else
        {
            selectedSuggestions.Remove(transactionId);
        }
        StateHasChanged();
    }

    private async Task RefreshSuggestions()
    {
        selectedSuggestions.Clear();
        allSelected = false;
        await LoadSplitSuggestions();
        FilterSuggestions();
    }

    private async Task ProcessAllSuggestions()
    {
        if (!filteredSuggestions.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No suggestions to process");
            return;
        }

        var result = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Process all {filteredSuggestions.Count} split suggestions? This will create split transactions for each.");
        
        if (!result) return;

        try
        {
            isLoading = true;
            errorMessage = "";
            StateHasChanged();

            var processed = 0;
            var errors = new List<string>();

            foreach (var suggestion in filteredSuggestions.ToList())
            {
                try
                {
                    await SplitService.ApplySplitAsync(suggestion.TransactionId, suggestion.SuggestedSplits, "System");
                    processed++;
                    splitSuggestions.Remove(suggestion);
                }
                catch (Exception ex)
                {
                    errors.Add($"{suggestion.TransactionId}: {ex.Message}");
                }
            }

            FilterSuggestions();
            
            var message = $"Processed {processed} split suggestions";
            if (errors.Any())
            {
                message += $"\n{errors.Count} errors occurred";
            }
            
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing suggestions: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ViewDetails(string transactionId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"View details for transaction {transactionId} - Navigation to transaction page pending");
    }

    private async Task EditSplit(SplitSuggestion suggestion)
    {
        try
        {
            var transaction = await SettingsService.GetTransactionByIdAsync(suggestion.TransactionId);
            if (transaction != null)
            {
                selectedTransaction = transaction;
                showSplitModal = true;
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Transaction not found");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error loading transaction: {ex.Message}");
        }
    }

    private async Task ProcessSplit(SplitSuggestion suggestion)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Apply suggested split for {suggestion.TransactionId}?\nThis will create {suggestion.SuggestedParticipants.Count} split transactions.");
        
        if (!result) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            await SplitService.ApplySplitAsync(suggestion.TransactionId, suggestion.SuggestedSplits, "System");
            
            splitSuggestions.Remove(suggestion);
            FilterSuggestions();
            
            await JSRuntime.InvokeVoidAsync("alert", $"Split processed successfully for {suggestion.TransactionId}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error processing split: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RejectSplit(string transactionId)
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Reject split suggestion for {transactionId}?\nYou can always manually split this transaction later.");
        
        if (!result) return;

        var suggestion = splitSuggestions.FirstOrDefault(s => s.TransactionId == transactionId);
        if (suggestion != null)
        {
            splitSuggestions.Remove(suggestion);
            FilterSuggestions();
            await JSRuntime.InvokeVoidAsync("alert", $"Split suggestion rejected for {transactionId}");
        }
    }

    private async Task ProcessSelectedSplits()
    {
        if (!selectedSuggestions.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No suggestions selected");
            return;
        }

        var result = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Process {selectedSuggestions.Count} selected split suggestions?");
        
        if (!result) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            var processed = 0;
            var errors = new List<string>();

            foreach (var transactionId in selectedSuggestions.ToList())
            {
                var suggestion = splitSuggestions.FirstOrDefault(s => s.TransactionId == transactionId);
                if (suggestion != null)
                {
                    try
                    {
                        await SplitService.ApplySplitAsync(transactionId, suggestion.SuggestedSplits, "System");
                        processed++;
                        splitSuggestions.Remove(suggestion);
                    }
                    catch (Exception ex)
                    {
                        errors.Add($"{transactionId}: {ex.Message}");
                    }
                }
            }

            selectedSuggestions.Clear();
            FilterSuggestions();
            
            var message = $"Processed {processed} split suggestions";
            if (errors.Any())
            {
                message += $"\n{errors.Count} errors occurred";
            }
            
            await JSRuntime.InvokeVoidAsync("alert", message);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing selected splits: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RejectSelectedSplits()
    {
        if (!selectedSuggestions.Any())
        {
            await JSRuntime.InvokeVoidAsync("alert", "No suggestions selected");
            return;
        }

        var result = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Reject {selectedSuggestions.Count} selected split suggestions?");
        
        if (!result) return;

        foreach (var transactionId in selectedSuggestions.ToList())
        {
            var suggestion = splitSuggestions.FirstOrDefault(s => s.TransactionId == transactionId);
            if (suggestion != null)
            {
                splitSuggestions.Remove(suggestion);
            }
        }
        selectedSuggestions.Clear();
        FilterSuggestions();
        
        await JSRuntime.InvokeVoidAsync("alert", "Selected suggestions rejected");
    }

    private void ClearSelection()
    {
        selectedSuggestions.Clear();
        allSelected = false;
        StateHasChanged();
    }

    private string GetCategoryBadgeClass(string category)
    {
        return category switch
        {
            "Client entertainment" => "badge-warning",
            "Meals" => "badge-info",
            "Transportation" => "badge-accent",
            "Other" => "badge-neutral",
            _ => "badge-ghost"
        };
    }

    private string GetCategoryIcon(string category)
    {
        return category switch
        {
            "Client entertainment" => "üç∏",
            "Meals" => "üçΩÔ∏è",
            "Transportation" => "üöï",
            "Other" => "‚ùî",
            _ => "üìù"
        };
    }

    private string GetConfidenceColor(int confidence)
    {
        return confidence switch
        {
            >= 80 => "text-success",
            >= 50 => "text-warning",
            _ => "text-error"
        };
    }

    private string GetParticipantDisplay(string participant)
    {
        if (participant.Contains("@"))
        {
            return participant.Split('@')[0];
        }
        return participant;
    }
    
    private string GetNameFromEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email) || !email.Contains("@")) 
            return email;
        
        return email.Split('@')[0].Replace(".", " ").Replace("_", " ");
    }
    
    private async Task HandleSplitSaved(List<SplitItem> splitItems)
    {
        if (selectedTransaction == null) return;

        try
        {
            isLoading = true;
            StateHasChanged();

            await SplitService.ApplySplitAsync(selectedTransaction.TransactionId, splitItems, "User");
            
            var suggestion = splitSuggestions.FirstOrDefault(s => s.TransactionId == selectedTransaction.TransactionId);
            if (suggestion != null)
            {
                splitSuggestions.Remove(suggestion);
                FilterSuggestions();
            }
            
            showSplitModal = false;
            selectedTransaction = null;
            
            await JSRuntime.InvokeVoidAsync("alert", "Transaction split successfully!");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving split: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private Task HandleModalCancel()
    {
        showSplitModal = false;
        selectedTransaction = null;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
</AuthorizeRoleView>