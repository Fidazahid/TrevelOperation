@page "/data-integrity/split-engine"
@using TravelOperation.Core.Models.Entities
@using TravelOperation.Core.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime

<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">‚úÇÔ∏è Split Engine</h1>
            <p class="text-gray-600">Automatically split shared expenses and manage participant allocations</p>
        </div>
        <div class="flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshSuggestions">
                üîÑ Refresh
            </button>
            <button class="btn btn-primary" @onclick="ProcessAllSuggestions">
                ‚ö° Process All
            </button>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="card bg-blue-50 border-l-4 border-blue-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚úÇÔ∏è</div>
                    <div>
                        <div class="text-2xl font-bold text-blue-700">@splitSuggestions.Count</div>
                        <div class="text-blue-600">Split Suggestions</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-green-50 border-l-4 border-green-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üí∞</div>
                    <div>
                        <div class="text-2xl font-bold text-green-700">$@totalSplitAmount.ToString("N0")</div>
                        <div class="text-green-600">Total Amount</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-purple-50 border-l-4 border-purple-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üë•</div>
                    <div>
                        <div class="text-2xl font-bold text-purple-700">@totalParticipants</div>
                        <div class="text-purple-600">Participants</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-orange-50 border-l-4 border-orange-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚ö°</div>
                    <div>
                        <div class="text-2xl font-bold text-orange-700">@highConfidenceSuggestions</div>
                        <div class="text-orange-600">High Confidence</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-md mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Category</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedCategory" @bind:after="FilterSuggestions">
                        <option value="">All Categories</option>
                        <option value="Client entertainment">Client entertainment</option>
                        <option value="Meals">Meals</option>
                        <option value="Transportation">Transportation</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Confidence</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedConfidence" @bind:after="FilterSuggestions">
                        <option value="">All Confidence</option>
                        <option value="High">High (80%+)</option>
                        <option value="Medium">Medium (50-79%)</option>
                        <option value="Low">Low (under 50%)</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Amount Range</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedAmountRange" @bind:after="FilterSuggestions">
                        <option value="">All Amounts</option>
                        <option value="high">High ($200+)</option>
                        <option value="medium">Medium ($50-199)</option>
                        <option value="low">Low (under $50)</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" placeholder="Search vendor or participants..." 
                           @bind="searchText" @bind:after="FilterSuggestions">
                </div>
            </div>
        </div>
    </div>

    <!-- Split Suggestions Table -->
    <div class="card bg-base-100 shadow-md">
        <div class="card-body">
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" class="checkbox" @onchange="ToggleSelectAll" checked="@allSelected">
                            </th>
                            <th>Transaction</th>
                            <th>Vendor</th>
                            <th>Category</th>
                            <th>Amount</th>
                            <th>Participants</th>
                            <th>Split Suggestion</th>
                            <th>Confidence</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var suggestion in filteredSuggestions.Skip((currentPage - 1) * pageSize).Take(pageSize))
                        {
                            <tr class="hover">
                                <td>
                                    <input type="checkbox" class="checkbox" @onchange="(e) => ToggleSelect(suggestion.TransactionId, e)" 
                                           checked="@selectedSuggestions.Contains(suggestion.TransactionId)">
                                </td>
                                <td>
                                    <div class="font-mono text-sm">@suggestion.TransactionId</div>
                                    <div class="text-xs text-gray-500">@suggestion.TransactionDate.ToString("dd/MM/yyyy")</div>
                                </td>
                                <td>
                                    <div class="font-semibold">@suggestion.Vendor</div>
                                    <div class="text-xs text-gray-500">@suggestion.Address</div>
                                </td>
                                <td>
                                    <span class="badge @GetCategoryBadgeClass(suggestion.Category)">
                                        @GetCategoryIcon(suggestion.Category) @suggestion.Category
                                    </span>
                                </td>
                                <td>
                                    <div class="font-bold">$@suggestion.Amount.ToString("N2")</div>
                                    <div class="text-xs text-gray-500">@suggestion.Currency</div>
                                </td>
                                <td>
                                    <div class="max-w-xs">
                                        @foreach (var participant in suggestion.DetectedParticipants.Take(3))
                                        {
                                            <div class="badge badge-outline badge-sm mr-1 mb-1">@GetParticipantDisplay(participant)</div>
                                        }
                                        @if (suggestion.DetectedParticipants.Count > 3)
                                        {
                                            <div class="badge badge-neutral badge-sm">+@(suggestion.DetectedParticipants.Count - 3) more</div>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <div class="text-sm">
                                        <div class="font-semibold">@suggestion.SplitType split</div>
                                        <div class="text-xs text-gray-500">
                                            @if (suggestion.SplitType == "Equal")
                                            {
                                                <span>$@suggestion.SuggestedAmountPerPerson.ToString("N2") each</span>
                                            }
                                            else
                                            {
                                                <span>Custom allocation</span>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="radial-progress @GetConfidenceColor(suggestion.ConfidenceScore)" style="--value:@suggestion.ConfidenceScore;">
                                        <span class="text-xs">@suggestion.ConfidenceScore%</span>
                                    </div>
                                </td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-sm">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                                            <li><a @onclick="() => ViewDetails(suggestion.TransactionId)">üëÅÔ∏è View Details</a></li>
                                            <li><a @onclick="() => EditSplit(suggestion)">‚úèÔ∏è Edit Split</a></li>
                                            <li><a @onclick="() => ProcessSplit(suggestion)">‚úÖ Accept Split</a></li>
                                            <li><hr /></li>
                                            <li><a @onclick="() => RejectSplit(suggestion.TransactionId)">‚ùå Reject</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Bulk Actions -->
            @if (selectedSuggestions.Any())
            {
                <div class="alert alert-info mt-4">
                    <div class="flex justify-between items-center w-full">
                        <span>@selectedSuggestions.Count suggestion(s) selected</span>
                        <div class="flex gap-2">
                            <button class="btn btn-sm btn-success" @onclick="ProcessSelectedSplits">
                                ‚úÖ Accept Selected
                            </button>
                            <button class="btn btn-sm btn-error" @onclick="RejectSelectedSplits">
                                ‚ùå Reject Selected
                            </button>
                            <button class="btn btn-sm btn-secondary" @onclick="ClearSelection">
                                üóëÔ∏è Clear Selection
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-500">
                    Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, filteredSuggestions.Count) of @filteredSuggestions.Count suggestions
                </div>
                <div class="join">
                    <button class="join-item btn btn-sm" disabled="@(currentPage <= 1)" @onclick="() => ChangePage(currentPage - 1)">¬´</button>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                    {
                        <button class="join-item btn btn-sm @(i == currentPage ? "btn-active" : "")" @onclick="() => ChangePage(i)">@i</button>
                    }
                    <button class="join-item btn btn-sm" disabled="@(currentPage >= totalPages)" @onclick="() => ChangePage(currentPage + 1)">¬ª</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<SplitSuggestion> splitSuggestions = new();
    private List<SplitSuggestion> filteredSuggestions = new();
    private HashSet<string> selectedSuggestions = new();
    
    // Filters
    private string selectedCategory = "";
    private string selectedConfidence = "";
    private string selectedAmountRange = "";
    private string searchText = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 15;
    private int totalPages => (int)Math.Ceiling((double)filteredSuggestions.Count / pageSize);
    
    // Statistics
    private decimal totalSplitAmount = 0;
    private int totalParticipants = 0;
    private int highConfidenceSuggestions = 0;
    private bool allSelected = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadSplitSuggestions();
        CalculateStatistics();
        FilterSuggestions();
    }

    private async Task LoadSplitSuggestions()
    {
        // In a real implementation, this would call SplitService
        splitSuggestions = GenerateMockSplitSuggestions();
    }

    private void CalculateStatistics()
    {
        totalSplitAmount = filteredSuggestions.Sum(s => s.Amount);
        totalParticipants = filteredSuggestions.SelectMany(s => s.DetectedParticipants).Distinct().Count();
        highConfidenceSuggestions = filteredSuggestions.Count(s => s.ConfidenceScore >= 80);
    }

    private void FilterSuggestions()
    {
        filteredSuggestions = splitSuggestions.Where(s =>
            (string.IsNullOrEmpty(selectedCategory) || s.Category == selectedCategory) &&
            (string.IsNullOrEmpty(selectedConfidence) || FilterByConfidence(s)) &&
            (string.IsNullOrEmpty(selectedAmountRange) || FilterByAmountRange(s)) &&
            (string.IsNullOrEmpty(searchText) || 
             s.Vendor.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             s.DetectedParticipants.Any(p => p.Contains(searchText, StringComparison.OrdinalIgnoreCase)))
        ).ToList();
        
        CalculateStatistics();
        currentPage = 1;
        selectedSuggestions.Clear();
        StateHasChanged();
    }

    private bool FilterByConfidence(SplitSuggestion suggestion)
    {
        return selectedConfidence switch
        {
            "High" => suggestion.ConfidenceScore >= 80,
            "Medium" => suggestion.ConfidenceScore >= 50 && suggestion.ConfidenceScore < 80,
            "Low" => suggestion.ConfidenceScore < 50,
            _ => true
        };
    }

    private bool FilterByAmountRange(SplitSuggestion suggestion)
    {
        return selectedAmountRange switch
        {
            "high" => suggestion.Amount >= 200,
            "medium" => suggestion.Amount >= 50 && suggestion.Amount < 200,
            "low" => suggestion.Amount < 50,
            _ => true
        };
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            foreach (var suggestion in filteredSuggestions.Skip((currentPage - 1) * pageSize).Take(pageSize))
            {
                selectedSuggestions.Add(suggestion.TransactionId);
            }
        }
        else
        {
            selectedSuggestions.Clear();
        }
        allSelected = isChecked;
        StateHasChanged();
    }

    private void ToggleSelect(string transactionId, ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            selectedSuggestions.Add(transactionId);
        }
        else
        {
            selectedSuggestions.Remove(transactionId);
        }
        StateHasChanged();
    }

    private async Task RefreshSuggestions()
    {
        await LoadSplitSuggestions();
        FilterSuggestions();
        await JSRuntime.InvokeVoidAsync("alert", "Split suggestions refreshed!");
    }

    private async Task ProcessAllSuggestions()
    {
        var result = await JSRuntime.InvokeAsync<bool>("confirm", 
            $"Process all {filteredSuggestions.Count} split suggestions? This will create split transactions.");
        
        if (result)
        {
            // Process all suggestions
            await JSRuntime.InvokeVoidAsync("alert", $"Processed {filteredSuggestions.Count} split suggestions!");
            await LoadSplitSuggestions();
            FilterSuggestions();
        }
    }

    private async Task ViewDetails(string transactionId)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"View details for transaction {transactionId} - Navigation pending");
    }

    private async Task EditSplit(SplitSuggestion suggestion)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Edit split for {suggestion.TransactionId} - Modal pending");
    }

    private async Task ProcessSplit(SplitSuggestion suggestion)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Split processed for {suggestion.TransactionId}!");
        splitSuggestions.Remove(suggestion);
        FilterSuggestions();
    }

    private async Task RejectSplit(string transactionId)
    {
        var suggestion = splitSuggestions.FirstOrDefault(s => s.TransactionId == transactionId);
        if (suggestion != null)
        {
            splitSuggestions.Remove(suggestion);
            FilterSuggestions();
            await JSRuntime.InvokeVoidAsync("alert", $"Split suggestion rejected for {transactionId}");
        }
    }

    private async Task ProcessSelectedSplits()
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Processed {selectedSuggestions.Count} selected splits!");
        foreach (var transactionId in selectedSuggestions.ToList())
        {
            var suggestion = splitSuggestions.FirstOrDefault(s => s.TransactionId == transactionId);
            if (suggestion != null)
            {
                splitSuggestions.Remove(suggestion);
            }
        }
        selectedSuggestions.Clear();
        FilterSuggestions();
    }

    private async Task RejectSelectedSplits()
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Rejected {selectedSuggestions.Count} selected splits!");
        foreach (var transactionId in selectedSuggestions.ToList())
        {
            var suggestion = splitSuggestions.FirstOrDefault(s => s.TransactionId == transactionId);
            if (suggestion != null)
            {
                splitSuggestions.Remove(suggestion);
            }
        }
        selectedSuggestions.Clear();
        FilterSuggestions();
    }

    private void ClearSelection()
    {
        selectedSuggestions.Clear();
        allSelected = false;
        StateHasChanged();
    }

    private string GetCategoryBadgeClass(string category)
    {
        return category switch
        {
            "Client entertainment" => "badge-warning",
            "Meals" => "badge-info",
            "Transportation" => "badge-accent",
            "Other" => "badge-neutral",
            _ => "badge-ghost"
        };
    }

    private string GetCategoryIcon(string category)
    {
        return category switch
        {
            "Client entertainment" => "üç∏",
            "Meals" => "üçΩÔ∏è",
            "Transportation" => "üöï",
            "Other" => "‚ùî",
            _ => "üìù"
        };
    }

    private string GetConfidenceColor(int confidence)
    {
        return confidence switch
        {
            >= 80 => "text-success",
            >= 50 => "text-warning",
            _ => "text-error"
        };
    }

    private string GetParticipantDisplay(string participant)
    {
        if (participant.Contains("@"))
        {
            return participant.Split('@')[0];
        }
        return participant;
    }

    private List<SplitSuggestion> GenerateMockSplitSuggestions()
    {
        var random = new Random();
        var suggestions = new List<SplitSuggestion>();
        var vendors = new[] { "Team Restaurant", "Client Dinner", "Uber Ride", "Conference Lunch", "Taxi Service", "Business Dinner" };
        var categories = new[] { "Client entertainment", "Meals", "Transportation", "Other" };
        var participants = new[] { "john.doe@company.com", "jane.smith@company.com", "client@external.com", "partner@vendor.com" };

        for (int i = 1; i <= 25; i++)
        {
            var amount = random.Next(30, 500);
            var participantCount = random.Next(2, 5);
            var selectedParticipants = participants.OrderBy(x => random.Next()).Take(participantCount).ToList();
            var confidence = random.Next(40, 95);
            
            suggestions.Add(new SplitSuggestion
            {
                TransactionId = $"TXN-SPLIT-{i:000}",
                TransactionDate = DateTime.Today.AddDays(-random.Next(1, 60)),
                Vendor = vendors[random.Next(vendors.Length)],
                Address = "Business Location",
                Category = categories[random.Next(categories.Length)],
                Currency = "USD",
                Amount = amount,
                DetectedParticipants = selectedParticipants,
                SplitType = random.NextDouble() > 0.7 ? "Custom" : "Equal",
                SuggestedAmountPerPerson = amount / selectedParticipants.Count,
                ConfidenceScore = confidence,
                Reason = GetSplitReason(selectedParticipants.Count, amount)
            });
        }

        return suggestions.OrderByDescending(s => s.ConfidenceScore).ToList();
    }

    private string GetSplitReason(int participantCount, decimal amount)
    {
        var reasons = new[]
        {
            $"Multiple participants detected ({participantCount} people)",
            $"High amount (${amount:N0}) suggests shared expense",
            "Vendor pattern indicates group activity",
            "Time pattern suggests team meal/event"
        };
        return reasons[new Random().Next(reasons.Length)];
    }

    public class SplitSuggestion
    {
        public string TransactionId { get; set; } = "";
        public DateTime TransactionDate { get; set; }
        public string Vendor { get; set; } = "";
        public string Address { get; set; } = "";
        public string Category { get; set; } = "";
        public string Currency { get; set; } = "";
        public decimal Amount { get; set; }
        public List<string> DetectedParticipants { get; set; } = new();
        public string SplitType { get; set; } = "";
        public decimal SuggestedAmountPerPerson { get; set; }
        public int ConfidenceScore { get; set; }
        public string Reason { get; set; } = "";
    }
}