@page "/meals-control"
@using TravelOperation.Core.Models
@using TravelOperation.Core.Models.Entities
@using TravelOperation.Core.Services
@using TrevelOperation.Service
@using TrevelOperation.RazorLib.Components
@using TravelOperation.Core.Services.Interfaces
@using Microsoft.AspNetCore.Components
@inject ITransactionService TransactionService
@inject IMessageTemplateService MessageTemplateService
@inject ILookupService LookupService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<AuthorizeRoleView RequiredRole="Finance">
<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">üçΩÔ∏è Meals Control</h1>
            <p class="text-gray-600">Review high-value meal transactions (‚â•$80) for compliance</p>
        </div>
        <div class="flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshData">
                üîÑ Refresh
            </button>
            <button class="btn btn-primary" @onclick="ValidateAll">
                ‚úÖ Validate All
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="card bg-red-50 border-l-4 border-red-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚ö†Ô∏è</div>
                    <div>
                        <div class="text-2xl font-bold text-red-700">@highValueCount</div>
                        <div class="text-red-600">High Value Meals</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-blue-50 border-l-4 border-blue-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üçΩÔ∏è</div>
                    <div>
                        <div class="text-2xl font-bold text-blue-700">@totalMealTransactions</div>
                        <div class="text-blue-600">Total Meals</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-yellow-50 border-l-4 border-yellow-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üë•</div>
                    <div>
                        <div class="text-2xl font-bold text-yellow-700">@externalParticipantsCount</div>
                        <div class="text-yellow-600">External Participants</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-purple-50 border-l-4 border-purple-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üí∞</div>
                    <div>
                        <div class="text-2xl font-bold text-purple-700">$@totalAmount.ToString("N0")</div>
                        <div class="text-purple-600">Total Amount</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-md mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedOwner" @bind:after="FilterTransactions">
                        <option value="">All Owners</option>
                        @foreach (var owner in availableOwners)
                        {
                            <option value="@owner">@owner</option>
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Amount Filter</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedAmountFilter" @bind:after="FilterTransactions">
                        <option value="80">‚â• $80 (default)</option>
                        <option value="100">‚â• $100</option>
                        <option value="150">‚â• $150</option>
                        <option value="200">‚â• $200</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Participants</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedParticipantFilter" @bind:after="FilterTransactions">
                        <option value="">All</option>
                        <option value="none">No Participants</option>
                        <option value="internal">Internal Only</option>
                        <option value="external">Has External</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Status</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedStatus" @bind:after="FilterTransactions">
                        <option value="">All</option>
                        <option value="pending">Pending Review</option>
                        <option value="validated">Validated</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" placeholder="Search vendor..." @bind="searchText" @bind:after="FilterTransactions">
                </div>
            </div>
        </div>
    </div>

    <!-- Transactions Table -->
    <div class="card bg-base-100 shadow-md">
        <div class="card-body">
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" class="checkbox" @onchange="ToggleSelectAll" checked="@allSelected">
                            </th>
                            <th>Document</th>
                            <th>Transaction ID</th>
                            <th>Email</th>
                            <th>Date</th>
                            <th>Vendor</th>
                            <th>Address</th>
                            <th>Currency</th>
                            <th>Amount</th>
                            <th>Amount (USD)</th>
                            <th>Participants</th>
                            <th>Category</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in pagedResult.Items.Select(t => new MealTransactionData
                        {
                            TransactionId = t.TransactionId,
                            Email = t.Email,
                            TransactionDate = t.TransactionDate,
                            Vendor = t.Vendor,
                            Address = t.Address,
                            Currency = t.Currency,
                            Amount = t.Amount,
                            AmountUSD = t.AmountUSD ?? 0,
                            Participants = t.Participants ?? "",
                            Owner = t.Trip?.Owner?.Name ?? "",
                            IsValid = t.IsValid
                        }))
                        {
                            <tr class="hover @(GetRowHighlight(transaction))">
                                <td>
                                    <input type="checkbox" class="checkbox" @onchange="(e) => ToggleSelect(transaction.TransactionId, e)" checked="@selectedTransactions.Contains(transaction.TransactionId)">
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(transaction.DocumentUrl))
                                    {
                                        <a href="@transaction.DocumentUrl" target="_blank" class="btn btn-ghost btn-sm">üìÑ</a>
                                    }
                                    else
                                    {
                                        <span class="text-red-400 text-xs">Missing</span>
                                    }
                                </td>
                                <td>
                                    <div class="font-mono text-sm">@transaction.TransactionId</div>
                                </td>
                                <td>@transaction.Email</td>
                                <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                <td>@transaction.Vendor</td>
                                <td>
                                    <div class="text-sm text-gray-600">@transaction.Address</div>
                                </td>
                                <td>@transaction.Currency</td>
                                <td>@transaction.Amount.ToString("N2")</td>
                                <td>
                                    <div class="font-bold @(transaction.AmountUSD >= 150 ? "text-red-600" : transaction.AmountUSD >= 100 ? "text-orange-500" : "text-blue-600")">
                                        $@transaction.AmountUSD.ToString("N2")
                                    </div>
                                </td>
                                <td>
                                    <div class="form-control">
                                        <input type="text" class="input input-bordered input-sm @(string.IsNullOrEmpty(transaction.Participants) ? "bg-yellow-100 border-yellow-400" : "")" 
                                               placeholder="Add participants..." 
                                               value="@transaction.Participants"
                                               @onchange="(e) => UpdateParticipants(transaction.TransactionId, e.Value?.ToString())">
                                    </div>
                                    @if (!string.IsNullOrEmpty(transaction.Participants))
                                    {
                                        <div class="text-xs mt-1">
                                            @if (HasExternalParticipants(transaction.Participants))
                                            {
                                                <span class="badge badge-warning badge-xs">External</span>
                                            }
                                            else
                                            {
                                                <span class="badge badge-info badge-xs">Internal</span>
                                            }
                                        </div>
                                    }
                                </td>
                                <td>
                                    <select class="select select-bordered select-sm bg-blue-50" 
                                            @onchange="(e) => UpdateCategory(transaction.TransactionId, e.Value?.ToString())">
                                        <option value="Meals" selected="@(transaction.Category == "Meals")">üçΩ Meals</option>
                                        <option value="Client entertainment" selected="@(transaction.Category == "Client entertainment")">üç∏ Client entertainment</option>
                                        <option value="Other" selected="@(transaction.Category == "Other")">‚ùî Other</option>
                                        <option value="Transportation" selected="@(transaction.Category == "Transportation")">üöï Transportation</option>
                                    </select>
                                </td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-sm">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-white rounded-box w-52 z-10">
                                            <li><a @onclick="() => ViewDetails(transaction.TransactionId)" @onclick:preventDefault="false" class="cursor-pointer hover:bg-gray-100">üëÅÔ∏è View Details</a></li>
                                            <li><a @onclick="() => GenerateMessage(transaction.TransactionId)" @onclick:preventDefault="false" class="cursor-pointer hover:bg-gray-100">üìß Generate Message</a></li>
                                            <li><hr /></li>
                                            <li><a @onclick="() => MarkAsValid(transaction.TransactionId)" @onclick:preventDefault="false" class="cursor-pointer hover:bg-gray-100">‚úÖ Mark Valid</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Bulk Actions -->
            @if (selectedTransactions.Any())
            {
                <div class="alert alert-info mt-4">
                    <div class="flex justify-between items-center w-full">
                        <span>@selectedTransactions.Count transaction(s) selected</span>
                        <div class="flex gap-2">
                            <button class="btn btn-sm btn-success" @onclick="MarkSelectedAsValid">
                                ‚úÖ Mark Selected as Valid
                            </button>
                            <button class="btn btn-sm btn-secondary" @onclick="ClearSelection">
                                ‚ùå Clear Selection
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-500">
                    Showing @pagedResult.FirstItemOnPage to @pagedResult.LastItemOnPage of @pagedResult.TotalCount transactions
                    <select class="select select-bordered select-sm ml-4" @onchange="OnPageSizeChanged">
                        <option value="25" selected="@(pageSize == 25)">25 per page</option>
                        <option value="50" selected="@(pageSize == 50)">50 per page</option>
                        <option value="100" selected="@(pageSize == 100)">100 per page</option>
                    </select>
                </div>
                <div class="join">
                    <button class="join-item btn btn-sm" disabled="@(!pagedResult.HasPreviousPage)" @onclick="PreviousPage">¬´</button>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                    {
                        int pageNumber = i;
                        <button class="join-item btn btn-sm @(i == currentPage ? "btn-active" : "")" @onclick="() => GoToPage(pageNumber)">@i</button>
                    }
                    <button class="join-item btn btn-sm" disabled="@(!pagedResult.HasNextPage)" @onclick="NextPage">¬ª</button>
                </div>
            </div>
        </div>
    </div>
</div>
</AuthorizeRoleView>

<!-- Transaction Detail Modal -->
<TransactionDetailModal 
    IsVisible="showTransactionDetailModal"
    Transaction="selectedTransaction"
    OnClose="CloseTransactionDetailModal"
    OnEdit="HandleTransactionEdit"
    OnDelete="HandleTransactionDelete"
    OnGenerateMessage="HandleGenerateMessageFromModal" />

<!-- Alert Dialog (for messages) - OUTSIDE AuthorizeRoleView -->
<AlertDialog 
    IsVisible="showAlertDialog"
    Title="@alertTitle"
    Message="@alertMessage"
    Type="@alertType"
    OkButtonText="@alertOkText"
    OnClose="CloseAlertDialog" />

<!-- Confirmation Dialog (for confirmations) - OUTSIDE AuthorizeRoleView -->
<ConfirmDialog 
    IsVisible="showConfirmDialog"
    Title="@confirmTitle"
    Message="@confirmMessage"
    Icon="@confirmIcon"
    ConfirmButtonText="@confirmButtonText"
    CancelButtonText="@cancelButtonText"
    ConfirmButtonClass="@confirmButtonClass"
    OnResult="HandleConfirmResult" />

@code {
    private List<MealTransactionData> transactions = new();
    private List<MealTransactionData> filteredTransactions = new();
    private PagedResult<Transaction> pagedResult = new();
    private List<string> availableOwners = new();
    private HashSet<string> selectedTransactions = new();
    
    // Filters
    private string selectedOwner = "";
    private string selectedAmountFilter = "80";
    private string selectedParticipantFilter = "";
    private string selectedStatus = "";
    private string searchText = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 25;
    
    // Summary data
    private int highValueCount = 0;
    private int totalMealTransactions = 0;
    private int externalParticipantsCount = 0;
    private decimal totalAmount = 0;
    private bool allSelected = false;
    
    // Alert Dialog state
    private bool showAlertDialog = false;
    private string alertTitle = "";
    private string alertMessage = "";
    private AlertDialog.AlertType alertType = AlertDialog.AlertType.Info;
    private string alertOkText = "OK";
    
    // Confirmation Dialog state
    private bool showConfirmDialog = false;
    private string confirmTitle = "";
    private string confirmMessage = "";
    private string confirmIcon = "‚ùì";
    private string confirmButtonText = "Yes";
    private string cancelButtonText = "No";
    private string confirmButtonClass = "btn-primary";
    private Func<Task>? pendingConfirmAction = null;

    // Transaction Detail Modal state
    private bool showTransactionDetailModal = false;
    private Transaction? selectedTransaction = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadMealTransactions();
        CalculateSummary();
        FilterTransactions();
    }

    private async Task LoadMealTransactions()
    {
        // Load paged data from server
        var threshold = decimal.Parse(selectedAmountFilter);
        var paginationParams = new PaginationParams
        {
            PageNumber = currentPage,
            PageSize = pageSize,
            SortBy = "AmountUSD",
            SortDirection = "desc"
        };
        
        pagedResult = await TransactionService.GetHighValueMealsPagedAsync(paginationParams, threshold);
        
        // Also get all high-value meals for summary calculations
        var allMeals = await TransactionService.GetHighValueMealsAsync(threshold);
        filteredTransactions = allMeals.Select(t => new MealTransactionData
        {
            TransactionId = t.TransactionId,
            Email = t.Email,
            TransactionDate = t.TransactionDate,
            Vendor = t.Vendor,
            Address = t.Address,
            Currency = t.Currency,
            Amount = t.Amount,
            AmountUSD = t.AmountUSD ?? 0,
            Participants = t.Participants ?? "",
            Owner = t.Trip?.Owner?.Name ?? "",
            IsValid = t.IsValid
        }).ToList();
        
        availableOwners = filteredTransactions.Select(t => t.Owner).Where(o => !string.IsNullOrEmpty(o)).Distinct().ToList()!;
    }

    private void CalculateSummary()
    {
        var minAmount = decimal.Parse(selectedAmountFilter);
        highValueCount = filteredTransactions.Count(t => t.AmountUSD >= minAmount);
        totalMealTransactions = filteredTransactions.Count;
        externalParticipantsCount = filteredTransactions.Count(t => HasExternalParticipants(t.Participants));
        totalAmount = filteredTransactions.Sum(t => t.AmountUSD);
    }

    private async Task FilterTransactions()
    {
        currentPage = 1;
        selectedTransactions.Clear();
        
        // Reload with server-side pagination
        await LoadMealTransactions();
        CalculateSummary();
        StateHasChanged();
    }

    private bool FilterByParticipants(MealTransactionData transaction)
    {
        return selectedParticipantFilter switch
        {
            "none" => string.IsNullOrEmpty(transaction.Participants),
            "internal" => !string.IsNullOrEmpty(transaction.Participants) && !HasExternalParticipants(transaction.Participants),
            "external" => HasExternalParticipants(transaction.Participants),
            _ => true
        };
    }

    private bool FilterByStatus(MealTransactionData transaction)
    {
        return selectedStatus switch
        {
            "pending" => !transaction.IsValid,
            "validated" => transaction.IsValid,
            _ => true
        };
    }

    private string GetRowHighlight(MealTransactionData transaction)
    {
        if (HasExternalParticipants(transaction.Participants))
            return "bg-yellow-50";
        if (string.IsNullOrEmpty(transaction.Participants))
            return "bg-red-50";
        return "";
    }

    private bool HasExternalParticipants(string participants)
    {
        if (string.IsNullOrEmpty(participants)) return false;
        return participants.Contains("@customer.com") || participants.Contains("@prospect.com") || participants.Contains("@external.com");
    }

    private async Task PreviousPage()
    {
        if (pagedResult.HasPreviousPage)
        {
            currentPage--;
            await LoadMealTransactions();
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (pagedResult.HasNextPage)
        {
            currentPage++;
            await LoadMealTransactions();
            StateHasChanged();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= pagedResult.TotalPages)
        {
            currentPage = page;
            await LoadMealTransactions();
            StateHasChanged();
        }
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            pageSize = newSize;
            currentPage = 1;
            await LoadMealTransactions();
            StateHasChanged();
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            foreach (var transaction in pagedResult.Items)
            {
                selectedTransactions.Add(transaction.TransactionId);
            }
        }
        else
        {
            selectedTransactions.Clear();
        }
        allSelected = isChecked;
        StateHasChanged();
    }

    private void ToggleSelect(string transactionId, ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            selectedTransactions.Add(transactionId);
        }
        else
        {
            selectedTransactions.Remove(transactionId);
        }
        StateHasChanged();
    }

    private async Task UpdateParticipants(string transactionId, string? participants)
    {
        try
        {
            Console.WriteLine($"UpdateParticipants called for {transactionId}");
            
            // Update in database directly
            var dbTransaction = await TransactionService.GetTransactionByIdAsync(transactionId);
            if (dbTransaction != null)
            {
                dbTransaction.Participants = participants;
                dbTransaction.ParticipantsValidated = !string.IsNullOrEmpty(participants);
                await TransactionService.UpdateTransactionAsync(dbTransaction);
                
                // Update local data
                var localTransaction = filteredTransactions.FirstOrDefault(t => t.TransactionId == transactionId);
                if (localTransaction != null)
                {
                    localTransaction.Participants = participants ?? "";
                    localTransaction.ParticipantsValidated = !string.IsNullOrEmpty(participants);
                }
                
                ShowAlert("Success", "Participants updated successfully", AlertDialog.AlertType.Success);
                CalculateSummary();
                StateHasChanged();
            }
            else
            {
                ShowAlert("Error", "Transaction not found", AlertDialog.AlertType.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating participants: {ex.Message}");
            ShowAlert("Error", $"Error updating participants: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task UpdateCategory(string transactionId, string? category)
    {
        try
        {
            Console.WriteLine($"UpdateCategory called for {transactionId} to {category}");
            
            // Update in database
            var dbTransaction = await TransactionService.GetTransactionByIdAsync(transactionId);
            if (dbTransaction != null)
            {
                // Get category ID from lookup service
                var lookupService = await LookupService.GetCategoriesAsync();
                var categoryObj = lookupService.FirstOrDefault(c => c.Name == category);
                if (categoryObj != null)
                {
                    dbTransaction.CategoryId = categoryObj.CategoryId;
                    await TransactionService.UpdateTransactionAsync(dbTransaction);
                    
                    // Update local data
                    var localTransaction = filteredTransactions.FirstOrDefault(t => t.TransactionId == transactionId);
                    if (localTransaction != null)
                    {
                        localTransaction.Category = category ?? "";
                    }
                    
                    ShowAlert("Success", "Category updated successfully", AlertDialog.AlertType.Success);
                    StateHasChanged();
                }
                else
                {
                    ShowAlert("Error", "Category not found", AlertDialog.AlertType.Error);
                }
            }
            else
            {
                ShowAlert("Error", "Transaction not found", AlertDialog.AlertType.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating category: {ex.Message}");
            ShowAlert("Error", $"Error updating category: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task RefreshData()
    {
        await LoadMealTransactions();
        ShowAlert("Refreshed", "Data refreshed successfully", AlertDialog.AlertType.Info);
        FilterTransactions();
    }

    private async Task ValidateAll()
    {
        try
        {
            ShowConfirm(
                "Validate All Transactions",
                $"Mark all {filteredTransactions.Count} visible transactions as valid?",
                async () =>
                {
                    foreach (var transaction in filteredTransactions)
                    {
                        transaction.IsValid = true;
                        await TransactionService.MarkAsValidAsync(transaction.TransactionId);
                    }
                    ShowAlert("Success", $"Marked {filteredTransactions.Count} transactions as valid", AlertDialog.AlertType.Success);
                    FilterTransactions();
                },
                "‚úÖ",
                "Validate All",
                "Cancel",
                "btn-success"
            );
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error validating transactions: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task ViewDetails(string transactionId)
    {
        try
        {
            Console.WriteLine($"ViewDetails called for transaction: {transactionId}");
            
            // Get the full transaction details
            selectedTransaction = await TransactionService.GetTransactionByIdAsync(transactionId);
            
            if (selectedTransaction != null)
            {
                Console.WriteLine($"Transaction found: {selectedTransaction.TransactionId}");
                showTransactionDetailModal = true;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine($"Transaction not found: {transactionId}");
                ShowAlert("Error", $"Transaction {transactionId} not found", AlertDialog.AlertType.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ViewDetails: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            ShowAlert("Error", $"Error loading transaction details: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private Task CloseTransactionDetailModal()
    {
        showTransactionDetailModal = false;
        selectedTransaction = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task HandleTransactionEdit(Transaction transaction)
    {
        // Close modal and show edit UI (can be implemented later)
        showTransactionDetailModal = false;
        ShowAlert("Edit Transaction", "Edit functionality will be implemented soon", AlertDialog.AlertType.Info);
    }

    private async Task HandleTransactionDelete(Transaction transaction)
    {
        try
        {
            await TransactionService.DeleteAsync(transaction.TransactionId);
            showTransactionDetailModal = false;
            await LoadMealTransactions();
            ShowAlert("Success", "Transaction deleted successfully", AlertDialog.AlertType.Success);
        }
        catch (Exception ex)
        {
            ShowAlert("Error", $"Error deleting transaction: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task HandleGenerateMessageFromModal(Transaction transaction)
    {
        showTransactionDetailModal = false;
        await GenerateMessage(transaction.TransactionId);
    }

    private async Task GenerateMessage(string transactionId)
    {
        try
        {
            Console.WriteLine($"GenerateMessage called for {transactionId}");
            
            // Get transaction from database to ensure we have complete data
            var dbTransaction = await TransactionService.GetTransactionByIdAsync(transactionId);
            
            if (dbTransaction != null)
            {
                var message = MessageTemplateService.GenerateMealsMessage(dbTransaction);
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", message);
                ShowAlert("Success", "Message copied to clipboard!", AlertDialog.AlertType.Success);
            }
            else
            {
                ShowAlert("Error", "Transaction not found", AlertDialog.AlertType.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating message: {ex.Message}");
            ShowAlert("Error", $"Error generating message: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task MarkAsValid(string transactionId)
    {
        try
        {
            Console.WriteLine($"MarkAsValid called for: {transactionId}");
            
            // Call the service directly - no need to find in local list first
            await TransactionService.MarkAsValidAsync(transactionId);
            
            Console.WriteLine($"Transaction {transactionId} marked as valid in database");
            
            // Update local data and refresh
            var localTransaction = filteredTransactions.FirstOrDefault(t => t.TransactionId == transactionId);
            if (localTransaction != null)
            {
                localTransaction.IsValid = true;
            }
            
            // Refresh the page data
            await LoadMealTransactions();
            CalculateSummary();
            StateHasChanged();
            
            ShowAlert("Success", "Transaction marked as valid", AlertDialog.AlertType.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error marking as valid: {ex.Message}");
            ShowAlert("Error", $"Error marking as valid: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private async Task MarkSelectedAsValid()
    {
        try
        {
            Console.WriteLine($"MarkSelectedAsValid called for {selectedTransactions.Count} transactions");
            
            var successCount = 0;
            var errorCount = 0;
            
            foreach (var transactionId in selectedTransactions.ToList())
            {
                try
                {
                    await TransactionService.MarkAsValidAsync(transactionId);
                    
                    // Update local data
                    var localTransaction = filteredTransactions.FirstOrDefault(t => t.TransactionId == transactionId);
                    if (localTransaction != null)
                    {
                        localTransaction.IsValid = true;
                    }
                    
                    successCount++;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error marking {transactionId} as valid: {ex.Message}");
                    errorCount++;
                }
            }
            
            selectedTransactions.Clear();
            allSelected = false;
            
            // Refresh the page data
            await LoadMealTransactions();
            CalculateSummary();
            StateHasChanged();
            
            var message = $"Successfully marked {successCount} transaction(s) as valid";
            if (errorCount > 0)
            {
                message += $"\n{errorCount} transaction(s) failed";
            }
            
            ShowAlert("Success", message, errorCount > 0 ? AlertDialog.AlertType.Warning : AlertDialog.AlertType.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in MarkSelectedAsValid: {ex.Message}");
            ShowAlert("Error", $"Error marking transactions as valid: {ex.Message}", AlertDialog.AlertType.Error);
        }
    }

    private void ClearSelection()
    {
        selectedTransactions.Clear();
        allSelected = false;
        StateHasChanged();
    }

    private Transaction ConvertToTransaction(MealTransactionData mealData)
    {
        return new Transaction
        {
            TransactionId = mealData.TransactionId,
            Email = mealData.Email,
            TransactionDate = mealData.TransactionDate,
            Vendor = mealData.Vendor,
            Address = mealData.Address,
            Currency = mealData.Currency,
            Amount = mealData.Amount,
            AmountUSD = mealData.AmountUSD,
            Participants = mealData.Participants,
            DocumentUrl = mealData.DocumentUrl
        };
    }

    private List<MealTransactionData> GenerateMockMealData()
    {
        var random = new Random();
        var transactions = new List<MealTransactionData>();
        var emails = new[] { "john.doe@company.com", "jane.smith@company.com", "mike.johnson@company.com", "sarah.wilson@company.com" };
        var vendors = new[] { "Restaurant ABC", "Fine Dining XYZ", "Starbucks", "Business Lunch Co", "Hotel Restaurant", "Catering Service" };
        var owners = new[] { "Maayan Chesler", "Martina Poplinsk" };
        var participantOptions = new[] { 
            "", 
            "jane.smith@company.com", 
            "john.doe@company.com, jane.smith@company.com",
            "client@customer.com",
            "prospect@prospect.com, john.doe@company.com",
            "external@external.com"
        };

        for (int i = 1; i <= 20; i++)
        {
            var hasDocumentation = random.NextDouble() > 0.15;
            var amount = random.Next(80, 300); // Only high-value meals
            var participants = participantOptions[random.Next(participantOptions.Length)];
            
            transactions.Add(new MealTransactionData
            {
                TransactionId = $"TXN-MEAL-{i:000}",
                Email = emails[random.Next(emails.Length)],
                TransactionDate = DateTime.Today.AddDays(random.Next(-90, -1)),
                Vendor = vendors[random.Next(vendors.Length)],
                Address = "Restaurant Location",
                Currency = "USD",
                Amount = amount,
                AmountUSD = amount,
                Category = "Meals",
                Participants = participants,
                DocumentUrl = hasDocumentation ? $"https://docs.company.com/receipt-{i}" : "",
                Owner = owners[random.Next(owners.Length)],
                ParticipantsValidated = !string.IsNullOrEmpty(participants),
                IsValid = false // Start with all needing validation
            });
        }

        return transactions.OrderByDescending(t => t.AmountUSD).ToList();
    }

    public class MealTransactionData
    {
        public string TransactionId { get; set; } = "";
        public string Email { get; set; } = "";
        public DateTime TransactionDate { get; set; }
        public string Vendor { get; set; } = "";
        public string Address { get; set; } = "";
        public string Currency { get; set; } = "";
        public decimal Amount { get; set; }
        public decimal AmountUSD { get; set; }
        public string Category { get; set; } = "";
        public string Participants { get; set; } = "";
        public string DocumentUrl { get; set; } = "";
        public string Owner { get; set; } = "";
        public bool ParticipantsValidated { get; set; }
        public bool IsValid { get; set; }
    }
    
    // Alert Dialog Methods
    private void ShowAlert(string title, string message, AlertDialog.AlertType type = AlertDialog.AlertType.Info, string okText = "OK")
    {
        alertTitle = title;
        alertMessage = message;
        alertType = type;
        alertOkText = okText;
        showAlertDialog = true;
        StateHasChanged();
    }
    
    private void CloseAlertDialog()
    {
        showAlertDialog = false;
        StateHasChanged();
    }
    
    // Confirmation Dialog Methods
    private void ShowConfirm(string title, string message, Func<Task> onConfirm, string icon = "‚ùì", 
        string confirmText = "Yes", string cancelText = "No", string buttonClass = "btn-primary")
    {
        confirmTitle = title;
        confirmMessage = message;
        confirmIcon = icon;
        confirmButtonText = confirmText;
        cancelButtonText = cancelText;
        confirmButtonClass = buttonClass;
        pendingConfirmAction = onConfirm;
        showConfirmDialog = true;
        StateHasChanged();
    }
    
    private async Task HandleConfirmResult(bool confirmed)
    {
        showConfirmDialog = false;
        
        if (confirmed && pendingConfirmAction != null)
        {
            await pendingConfirmAction.Invoke();
        }
        
        pendingConfirmAction = null;
        StateHasChanged();
    }
}