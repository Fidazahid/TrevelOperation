@page "/client-entertainment-control"
@using TravelOperation.Core.Models
@using TravelOperation.Core.Models.Entities
@using TravelOperation.Core.Services
@using TrevelOperation.Service
@using TrevelOperation.RazorLib.Components
@inject ITransactionService TransactionService
@inject IMessageTemplateService MessageTemplateService
@inject IJSRuntime JSRuntime

<AuthorizeRoleView RequiredRole="Finance">
<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">üç∏ Client Entertainment Control</h1>
            <p class="text-gray-600">Ensure client entertainment has participant information</p>
        </div>
        <div class="flex gap-2">
            <button class="btn btn-secondary" @onclick="RefreshData">
                üîÑ Refresh
            </button>
            <button class="btn btn-primary" @onclick="ValidateAll">
                ‚úÖ Validate All
            </button>
        </div>
    </div>

    <!-- Summary Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div class="card bg-purple-50 border-l-4 border-purple-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">‚ö†Ô∏è</div>
                    <div>
                        <div class="text-2xl font-bold text-purple-700">@unvalidatedCount</div>
                        <div class="text-purple-600">Need Validation</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-blue-50 border-l-4 border-blue-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üç∏</div>
                    <div>
                        <div class="text-2xl font-bold text-blue-700">@totalEntertainmentTransactions</div>
                        <div class="text-blue-600">Total Entertainment</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-green-50 border-l-4 border-green-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üë•</div>
                    <div>
                        <div class="text-2xl font-bold text-green-700">@withExternalParticipants</div>
                        <div class="text-green-600">External Participants</div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="card bg-orange-50 border-l-4 border-orange-400">
            <div class="card-body">
                <div class="flex items-center">
                    <div class="text-3xl mr-4">üí∞</div>
                    <div>
                        <div class="text-2xl font-bold text-orange-700">$@totalAmount.ToString("N0")</div>
                        <div class="text-orange-600">Total Amount</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="card bg-base-100 shadow-md mb-6">
        <div class="card-body">
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Owner</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedOwner" @bind:after="FilterTransactions">
                        <option value="">All Owners</option>
                        @foreach (var owner in availableOwners)
                        {
                            <option value="@owner">@owner</option>
                        }
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Validation Status</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedValidationStatus" @bind:after="FilterTransactions">
                        <option value="">All</option>
                        <option value="unvalidated">Participants Not Validated</option>
                        <option value="validated">Participants Validated</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Participant Type</span>
                    </label>
                    <select class="select select-bordered w-full" @bind="selectedParticipantType" @bind:after="FilterTransactions">
                        <option value="">All</option>
                        <option value="none">No Participants</option>
                        <option value="external">Has External</option>
                        <option value="internal">Internal Only</option>
                    </select>
                </div>
                <div class="form-control">
                    <label class="label">
                        <span class="label-text">Search</span>
                    </label>
                    <input type="text" class="input input-bordered w-full" placeholder="Search vendor..." @bind="searchText" @bind:after="FilterTransactions">
                </div>
            </div>
        </div>
    </div>

    <!-- Transactions Table -->
    <div class="card bg-base-100 shadow-md">
        <div class="card-body">
            <div class="overflow-x-auto">
                <table class="table table-zebra w-full">
                    <thead>
                        <tr>
                            <th>
                                <input type="checkbox" class="checkbox" @onchange="ToggleSelectAll" checked="@allSelected">
                            </th>
                            <th>Document</th>
                            <th>Transaction ID</th>
                            <th>Email</th>
                            <th>Date</th>
                            <th>Vendor</th>
                            <th>Address</th>
                            <th>Currency</th>
                            <th>Amount</th>
                            <th>Amount (USD)</th>
                            <th>Participants</th>
                            <th>Category</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in pagedResult.Items.Select(t => new EntertainmentTransactionData
                        {
                            TransactionId = t.TransactionId,
                            Email = t.Email,
                            TransactionDate = t.TransactionDate,
                            Vendor = t.Vendor,
                            Address = t.Address,
                            Currency = t.Currency,
                            Amount = t.Amount,
                            AmountUSD = t.AmountUSD ?? 0,
                            Participants = t.Participants ?? "",
                            ParticipantsValidated = t.ParticipantsValidated,
                            Owner = t.Trip?.Owner?.Name ?? ""
                        }))
                        {
                            <tr class="hover @(GetRowHighlight(transaction))">
                                <td>
                                    <input type="checkbox" class="checkbox" @onchange="(e) => ToggleSelect(transaction.TransactionId, e)" checked="@selectedTransactions.Contains(transaction.TransactionId)">
                                </td>
                                <td>
                                    @if (!string.IsNullOrEmpty(transaction.DocumentUrl))
                                    {
                                        <a href="@transaction.DocumentUrl" target="_blank" class="btn btn-ghost btn-sm">üìÑ</a>
                                    }
                                    else
                                    {
                                        <span class="text-red-400 text-xs">Missing</span>
                                    }
                                </td>
                                <td>
                                    <div class="font-mono text-sm">@transaction.TransactionId</div>
                                </td>
                                <td>@transaction.Email</td>
                                <td>@transaction.TransactionDate.ToString("dd/MM/yyyy")</td>
                                <td>@transaction.Vendor</td>
                                <td>
                                    <div class="text-sm text-gray-600">@transaction.Address</div>
                                </td>
                                <td>@transaction.Currency</td>
                                <td>@transaction.Amount.ToString("N2")</td>
                                <td>
                                    <div class="font-bold text-purple-600">
                                        $@transaction.AmountUSD.ToString("N2")
                                    </div>
                                </td>
                                <td>
                                    <div class="form-control">
                                        <input type="text" class="input input-bordered input-sm @(string.IsNullOrEmpty(transaction.Participants) ? "bg-red-100 border-red-400" : "bg-green-50")" 
                                               placeholder="Add participants..." 
                                               value="@transaction.Participants"
                                               @onchange="(e) => UpdateParticipants(transaction.TransactionId, e.Value?.ToString())">
                                    </div>
                                    @if (!string.IsNullOrEmpty(transaction.Participants))
                                    {
                                        <div class="text-xs mt-1 flex gap-1">
                                            @if (HasExternalParticipants(transaction.Participants))
                                            {
                                                <span class="badge badge-success badge-xs">External</span>
                                            }
                                            @if (HasInternalParticipants(transaction.Participants))
                                            {
                                                <span class="badge badge-info badge-xs">Internal</span>
                                            }
                                        </div>
                                        <div class="text-xs text-gray-500 mt-1">
                                            @GetParticipantCount(transaction.Participants) participant(s)
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-xs text-red-500 mt-1">Required for tax compliance</div>
                                    }
                                </td>
                                <td>
                                    <select class="select select-bordered select-sm bg-blue-50" 
                                            @onchange="(e) => UpdateCategory(transaction.TransactionId, e.Value?.ToString())">
                                        <option value="Client entertainment" selected="@(transaction.Category == "Client entertainment")">üç∏ Client entertainment</option>
                                        <option value="Meals" selected="@(transaction.Category == "Meals")">üçΩ Meals</option>
                                        <option value="Other" selected="@(transaction.Category == "Other")">‚ùî Other</option>
                                    </select>
                                </td>
                                <td>
                                    <div class="dropdown dropdown-end">
                                        <label tabindex="0" class="btn btn-ghost btn-sm">‚ãÆ</label>
                                        <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-52">
                                            <li><a @onclick="() => ViewDetails(transaction.TransactionId)">üëÅÔ∏è View Details</a></li>
                                            <li><a @onclick="() => GenerateMessage(transaction.TransactionId)">üìß Generate Message</a></li>
                                            <li><a @onclick="() => AddParticipants(transaction.TransactionId)">üë• Add Participants</a></li>
                                            <li><hr /></li>
                                            <li><a @onclick="() => ValidateParticipants(transaction.TransactionId)">‚úÖ Validate</a></li>
                                        </ul>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Bulk Actions -->
            @if (selectedTransactions.Any())
            {
                <div class="alert alert-info mt-4">
                    <div class="flex justify-between items-center w-full">
                        <span>@selectedTransactions.Count transaction(s) selected</span>
                        <div class="flex gap-2">
                            <button class="btn btn-sm btn-success" @onclick="ValidateSelectedParticipants">
                                ‚úÖ Validate Selected
                            </button>
                            <button class="btn btn-sm btn-secondary" @onclick="ClearSelection">
                                ‚ùå Clear Selection
                            </button>
                        </div>
                    </div>
                </div>
            }

            <!-- Pagination -->
            <div class="flex justify-between items-center mt-4">
                <div class="text-sm text-gray-500">
                    Showing @pagedResult.FirstItemOnPage to @pagedResult.LastItemOnPage of @pagedResult.TotalCount transactions
                    <select class="select select-bordered select-sm ml-4" @onchange="OnPageSizeChanged">
                        <option value="25" selected="@(pageSize == 25)">25 per page</option>
                        <option value="50" selected="@(pageSize == 50)">50 per page</option>
                        <option value="100" selected="@(pageSize == 100)">100 per page</option>
                    </select>
                </div>
                <div class="join">
                    <button class="join-item btn btn-sm" disabled="@(!pagedResult.HasPreviousPage)" @onclick="PreviousPage">¬´</button>
                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(pagedResult.TotalPages, currentPage + 2); i++)
                    {
                        int pageNumber = i;
                        <button class="join-item btn btn-sm @(i == currentPage ? "btn-active" : "")" @onclick="() => GoToPage(pageNumber)">@i</button>
                    }
                    <button class="join-item btn btn-sm" disabled="@(!pagedResult.HasNextPage)" @onclick="NextPage">¬ª</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Alert Dialog -->
<AlertDialog @ref="alertDialog"
             IsVisible="showAlertDialog"
             Title="@alertTitle"
             Message="@alertMessage"
             Type="@alertType"
             OnClose="CloseAlertDialog" />

<!-- Confirm Dialog -->
<ConfirmDialog @ref="confirmDialog"
               IsVisible="showConfirmDialog"
               Title="@confirmTitle"
               Message="@confirmMessage"
               Icon="@confirmIcon"
               ConfirmButtonText="@confirmButtonText"
               ConfirmButtonClass="@confirmButtonClass"
               OnResult="HandleConfirmResult" />

<!-- Prompt Dialog -->
<PromptDialog @ref="promptDialog"
              IsVisible="showPromptDialog"
              Title="@promptTitle"
              Message="@promptMessage"
              Placeholder="@promptPlaceholder"
              OnResult="HandlePromptResult" />

@code {
    private List<EntertainmentTransactionData> transactions = new();
    private List<EntertainmentTransactionData> filteredTransactions = new();
    private PagedResult<Transaction> pagedResult = new();
    private List<string> availableOwners = new();
    private HashSet<string> selectedTransactions = new();
    
    // Filters
    private string selectedOwner = "";
    private string selectedValidationStatus = "";
    private string selectedParticipantType = "";
    private string searchText = "";
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 25;
    
    // Summary data
    private int unvalidatedCount = 0;
    private int totalEntertainmentTransactions = 0;
    private int withExternalParticipants = 0;
    private decimal totalAmount = 0;
    private bool allSelected = false;

    // Alert Dialog state
    private AlertDialog? alertDialog;
    private bool showAlertDialog = false;
    private string alertTitle = "";
    private string alertMessage = "";
    private AlertDialog.AlertType alertType = AlertDialog.AlertType.Info;

    // Confirm Dialog state
    private ConfirmDialog? confirmDialog;
    private bool showConfirmDialog = false;
    private string confirmTitle = "";
    private string confirmMessage = "";
    private string confirmIcon = "‚ö†Ô∏è";
    private string confirmButtonText = "Confirm";
    private string confirmButtonClass = "btn-primary";
    private Func<Task>? pendingConfirmAction;

    // Prompt Dialog state
    private PromptDialog? promptDialog;
    private bool showPromptDialog = false;
    private string promptTitle = "";
    private string promptMessage = "";
    private string promptPlaceholder = "";
    private Func<string?, Task>? pendingPromptAction;

    private void ShowAlert(string title, string message, AlertDialog.AlertType type)
    {
        alertTitle = title;
        alertMessage = message;
        alertType = type;
        showAlertDialog = true;
        StateHasChanged();
    }

    private void CloseAlertDialog()
    {
        showAlertDialog = false;
        StateHasChanged();
    }

    private void ShowConfirm(string title, string message, Func<Task> onConfirm, string icon = "‚ö†Ô∏è", string buttonText = "Confirm", string buttonClass = "btn-primary")
    {
        confirmTitle = title;
        confirmMessage = message;
        confirmIcon = icon;
        confirmButtonText = buttonText;
        confirmButtonClass = buttonClass;
        pendingConfirmAction = onConfirm;
        showConfirmDialog = true;
        StateHasChanged();
    }

    private async Task HandleConfirmResult(bool confirmed)
    {
        showConfirmDialog = false;
        
        if (confirmed && pendingConfirmAction != null)
        {
            await pendingConfirmAction();
        }
        
        pendingConfirmAction = null;
        StateHasChanged();
    }

    private void ShowPrompt(string title, string message, Func<string?, Task> onResult, string placeholder = "")
    {
        promptTitle = title;
        promptMessage = message;
        promptPlaceholder = placeholder;
        pendingPromptAction = onResult;
        showPromptDialog = true;
        StateHasChanged();
    }

    private async Task HandlePromptResult(string? result)
    {
        showPromptDialog = false;
        
        if (pendingPromptAction != null)
        {
            await pendingPromptAction(result);
        }
        
        pendingPromptAction = null;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadEntertainmentTransactions();
        CalculateSummary();
        FilterTransactions();
    }

    private async Task LoadEntertainmentTransactions()
    {
        // Load paged data from server
        var paginationParams = new PaginationParams
        {
            PageNumber = currentPage,
            PageSize = pageSize,
            SortBy = "TransactionDate",
            SortDirection = "desc"
        };
        
        pagedResult = await TransactionService.GetClientEntertainmentWithoutParticipantsPagedAsync(paginationParams);
        
        // Also get all for summary calculations
        var allEntertainment = await TransactionService.GetClientEntertainmentWithoutParticipantsAsync();
        filteredTransactions = allEntertainment.Select(t => new EntertainmentTransactionData
        {
            TransactionId = t.TransactionId,
            Email = t.Email,
            TransactionDate = t.TransactionDate,
            Vendor = t.Vendor,
            Address = t.Address,
            Currency = t.Currency,
            Amount = t.Amount,
            AmountUSD = t.AmountUSD ?? 0,
            Participants = t.Participants ?? "",
            ParticipantsValidated = t.ParticipantsValidated,
            Owner = t.Trip?.Owner?.Name ?? ""
        }).ToList();
        
        availableOwners = filteredTransactions.Select(t => t.Owner).Where(o => !string.IsNullOrEmpty(o)).Distinct().ToList()!;
    }

    private void CalculateSummary()
    {
        unvalidatedCount = filteredTransactions.Count(t => !t.ParticipantsValidated);
        totalEntertainmentTransactions = filteredTransactions.Count;
        withExternalParticipants = filteredTransactions.Count(t => HasExternalParticipants(t.Participants));
        totalAmount = filteredTransactions.Sum(t => t.AmountUSD);
    }

    private async Task FilterTransactions()
    {
        currentPage = 1;
        selectedTransactions.Clear();
        
        // Reload with server-side pagination
        await LoadEntertainmentTransactions();
        CalculateSummary();
        StateHasChanged();
    }

    private bool FilterByValidationStatus(EntertainmentTransactionData transaction)
    {
        return selectedValidationStatus switch
        {
            "unvalidated" => !transaction.ParticipantsValidated,
            "validated" => transaction.ParticipantsValidated,
            _ => true
        };
    }

    private bool FilterByParticipantType(EntertainmentTransactionData transaction)
    {
        return selectedParticipantType switch
        {
            "none" => string.IsNullOrEmpty(transaction.Participants),
            "external" => HasExternalParticipants(transaction.Participants),
            "internal" => HasInternalParticipants(transaction.Participants) && !HasExternalParticipants(transaction.Participants),
            _ => true
        };
    }

    private string GetRowHighlight(EntertainmentTransactionData transaction)
    {
        if (!transaction.ParticipantsValidated)
            return string.IsNullOrEmpty(transaction.Participants) ? "bg-red-50" : "bg-yellow-50";
        return "bg-green-50";
    }

    private bool HasExternalParticipants(string participants)
    {
        if (string.IsNullOrEmpty(participants)) return false;
        return participants.Contains("@customer.com") || participants.Contains("@prospect.com") || participants.Contains("@client.com");
    }

    private bool HasInternalParticipants(string participants)
    {
        if (string.IsNullOrEmpty(participants)) return false;
        return participants.Contains("@company.com");
    }

    private int GetParticipantCount(string participants)
    {
        if (string.IsNullOrEmpty(participants)) return 0;
        return participants.Split(',').Length;
    }

    private async Task PreviousPage()
    {
        if (pagedResult.HasPreviousPage)
        {
            currentPage--;
            await LoadEntertainmentTransactions();
            StateHasChanged();
        }
    }

    private async Task NextPage()
    {
        if (pagedResult.HasNextPage)
        {
            currentPage++;
            await LoadEntertainmentTransactions();
            StateHasChanged();
        }
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= pagedResult.TotalPages)
        {
            currentPage = page;
            await LoadEntertainmentTransactions();
            StateHasChanged();
        }
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var newSize))
        {
            pageSize = newSize;
            currentPage = 1;
            await LoadEntertainmentTransactions();
            StateHasChanged();
        }
    }

    private void ToggleSelectAll(ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            foreach (var transaction in pagedResult.Items)
            {
                selectedTransactions.Add(transaction.TransactionId);
            }
        }
        else
        {
            selectedTransactions.Clear();
        }
        allSelected = isChecked;
        StateHasChanged();
    }

    private void ToggleSelect(string transactionId, ChangeEventArgs e)
    {
        var isChecked = (bool)(e.Value ?? false);
        if (isChecked)
        {
            selectedTransactions.Add(transactionId);
        }
        else
        {
            selectedTransactions.Remove(transactionId);
        }
        StateHasChanged();
    }

    private async Task UpdateParticipants(string transactionId, string? participants)
    {
        var transaction = transactions.FirstOrDefault(t => t.TransactionId == transactionId);
        if (transaction != null)
        {
            transaction.Participants = participants ?? "";
            CalculateSummary();
            StateHasChanged();
        }
    }

    private async Task UpdateCategory(string transactionId, string? category)
    {
        var transaction = transactions.FirstOrDefault(t => t.TransactionId == transactionId);
        if (transaction != null)
        {
            transaction.Category = category ?? "";
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadEntertainmentTransactions();
        FilterTransactions();
    }

    private async Task ValidateAll()
    {
        ShowConfirm(
            "Validate All Transactions",
            "Mark all visible transactions as validated?",
            async () =>
            {
                foreach (var transaction in filteredTransactions)
                {
                    transaction.ParticipantsValidated = true;
                }
                ShowAlert("Success", $"Marked {filteredTransactions.Count} transactions as validated", AlertDialog.AlertType.Success);
                FilterTransactions();
            },
            "‚úÖ",
            "Validate All",
            "btn-success"
        );
    }

    private async Task ViewDetails(string transactionId)
    {
        ShowAlert("View Details", $"View details for transaction {transactionId} - Navigation pending", AlertDialog.AlertType.Info);
    }

    private async Task GenerateMessage(string transactionId)
    {
        var entertainmentTransaction = transactions.FirstOrDefault(t => t.TransactionId == transactionId);
        if (entertainmentTransaction != null)
        {
            var transaction = ConvertToTransaction(entertainmentTransaction);
            var participantsList = string.IsNullOrWhiteSpace(entertainmentTransaction.Participants) 
                ? new List<string>() 
                : entertainmentTransaction.Participants.Split(',').Select(p => p.Trim()).ToList();
            
            var message = MessageTemplateService.GenerateClientEntertainmentMessage(transaction, participantsList);
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", message);
            ShowAlert("Success", "Message copied to clipboard!", AlertDialog.AlertType.Success);
        }
    }

    private async Task AddParticipants(string transactionId)
    {
        ShowPrompt(
            "Add Participants",
            "Enter participant email addresses (comma-separated):",
            async (newParticipants) =>
            {
                if (!string.IsNullOrEmpty(newParticipants))
                {
                    await UpdateParticipants(transactionId, newParticipants);
                }
            },
            "email1@company.com, email2@customer.com"
        );
    }

    private async Task ValidateParticipants(string transactionId)
    {
        var transaction = transactions.FirstOrDefault(t => t.TransactionId == transactionId);
        if (transaction != null)
        {
            transaction.ParticipantsValidated = true;
            FilterTransactions();
        }
    }

    private async Task ValidateSelectedParticipants()
    {
        foreach (var transactionId in selectedTransactions)
        {
            var transaction = transactions.FirstOrDefault(t => t.TransactionId == transactionId);
            if (transaction != null)
            {
                transaction.ParticipantsValidated = true;
            }
        }
        selectedTransactions.Clear();
        ShowAlert("Success", "Selected transactions validated", AlertDialog.AlertType.Success);
        FilterTransactions();
    }

    private void ClearSelection()
    {
        selectedTransactions.Clear();
        allSelected = false;
        StateHasChanged();
    }

    private Transaction ConvertToTransaction(EntertainmentTransactionData data)
    {
        return new Transaction
        {
            TransactionId = data.TransactionId,
            Email = data.Email,
            TransactionDate = data.TransactionDate,
            Vendor = data.Vendor,
            Address = data.Address,
            Currency = data.Currency,
            Amount = data.Amount,
            AmountUSD = data.AmountUSD,
            Participants = data.Participants,
            DocumentUrl = data.DocumentUrl,
            Category = new Category { Name = data.Category }
        };
    }

    private string GenerateEntertainmentMessage(EntertainmentTransactionData transaction)
    {
        return $@"Hi {GetFirstName(transaction.Email)},

The following transaction was categorized as Client entertainment:

Transaction ID: {transaction.TransactionId}
Date: {transaction.TransactionDate:dd/MM/yyyy}
Category: Client entertainment
Vendor: {transaction.Vendor}
Address: {transaction.Address}
Amount: {transaction.Currency} {transaction.Amount:N2}
Participants: {transaction.Participants}
Documentation: {transaction.DocumentUrl}

The system identified the following external participants: {GetExternalEmails(transaction.Participants)}.

To comply with tax reporting requirements, could you please provide the names and email addresses of all participants (both internal WSC employees and external customers/prospects)?

This information is required for proper documentation and may be needed in the event of a future tax audit.

Thank you!";
    }

    private string GetFirstName(string email)
    {
        return email.Split('@')[0].Split('.')[0];
    }

    private string GetExternalEmails(string participants)
    {
        if (string.IsNullOrEmpty(participants)) return "";
        
        return string.Join(", ", participants.Split(',')
            .Select(p => p.Trim())
            .Where(p => p.Contains("@customer.com") || p.Contains("@prospect.com") || p.Contains("@client.com")));
    }

    private List<EntertainmentTransactionData> GenerateMockEntertainmentData()
    {
        var random = new Random();
        var transactions = new List<EntertainmentTransactionData>();
        var emails = new[] { "john.doe@company.com", "jane.smith@company.com", "mike.johnson@company.com", "sarah.wilson@company.com" };
        var vendors = new[] { "Fine Dining Restaurant", "Wine Bar", "Golf Club", "Theater Tickets", "Concert Hall", "Sports Event" };
        var owners = new[] { "Maayan Chesler", "Martina Poplinsk" };
        var participantOptions = new[] { 
            "", 
            "client1@customer.com",
            "prospect@prospect.com, jane.smith@company.com",
            "client2@client.com, john.doe@company.com",
            "external@customer.com, internal@company.com"
        };

        for (int i = 1; i <= 18; i++)
        {
            var hasDocumentation = random.NextDouble() > 0.1;
            var amount = random.Next(75, 500);
            var participants = participantOptions[random.Next(participantOptions.Length)];
            
            transactions.Add(new EntertainmentTransactionData
            {
                TransactionId = $"TXN-ENT-{i:000}",
                Email = emails[random.Next(emails.Length)],
                TransactionDate = DateTime.Today.AddDays(random.Next(-120, -1)),
                Vendor = vendors[random.Next(vendors.Length)],
                Address = "Entertainment Venue",
                Currency = "USD",
                Amount = amount,
                AmountUSD = amount,
                Category = "Client entertainment",
                Participants = participants,
                DocumentUrl = hasDocumentation ? $"https://docs.company.com/receipt-{i}" : "",
                Owner = owners[random.Next(owners.Length)],
                ParticipantsValidated = !string.IsNullOrEmpty(participants) && random.NextDouble() > 0.6
            });
        }

        return transactions.OrderByDescending(t => t.TransactionDate).ToList();
    }

    public class EntertainmentTransactionData
    {
        public string TransactionId { get; set; } = "";
        public string Email { get; set; } = "";
        public DateTime TransactionDate { get; set; }
        public string Vendor { get; set; } = "";
        public string Address { get; set; } = "";
        public string Currency { get; set; } = "";
        public decimal Amount { get; set; }
        public decimal AmountUSD { get; set; }
        public string Category { get; set; } = "";
        public string Participants { get; set; } = "";
        public string DocumentUrl { get; set; } = "";
        public string Owner { get; set; } = "";
        public bool ParticipantsValidated { get; set; }
    }
}
</AuthorizeRoleView>