@using TravelOperation.Core.Models.Entities
@using TravelOperation.Core.Services.Interfaces
@using TrevelOperation.Service
@using TrevelOperation.RazorLib.Components
@inject ITransactionService TransactionService
@inject IAuditService AuditService
@inject IMessageTemplateService MessageTemplateService

@if (IsVisible && Transaction != null)
{
    <div class="modal modal-open" style="display: flex; align-items: center; justify-content: center;">
        <div class="modal-box" style="max-width: 600px; width: 50vw; max-height: 90vh; overflow-y: auto; background: white; border-radius: 16px; box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);">
            <!-- Header -->
            <div class="flex justify-between items-start mb-6" style="border-bottom: 2px solid #e5e7eb; padding-bottom: 16px;">
                <div>
                    <h3 class="font-bold text-2xl mb-1" style="color: #1f2937; font-size: 28px;">Transaction details</h3>
                    <p class="text-sm text-gray-600" style="color: #6b7280; font-size: 14px; font-family: monospace;">@Transaction.TransactionId</p>
                </div>
                <button class="btn btn-sm btn-circle btn-ghost" @onclick="Close" style="font-size: 20px; color: #6b7280;">‚úï</button>
            </div>

            <!-- Status and Validation Badges -->
            <div class="flex gap-3 mb-6" style="flex-wrap: wrap;">
                @if (Transaction.IsValid)
                {
                    <span class="badge badge-success gap-2" style="padding: 10px 16px; font-size: 14px; border-radius: 8px; background: #10b981; color: white; font-weight: 600;">
                        ‚úÖ Validated
                    </span>
                }
                else
                {
                    <span class="badge badge-warning gap-2" style="padding: 10px 16px; font-size: 14px; border-radius: 8px; background: #f59e0b; color: white; font-weight: 600;">
                        ‚ö†Ô∏è Needs review
                    </span>
                }

                @if (Transaction.TripId != null)
                {
                    <span class="badge badge-info gap-2" style="padding: 10px 16px; font-size: 14px; border-radius: 8px; background: #3b82f6; color: white; font-weight: 600;">
                        üß≥ Linked to trip
                    </span>
                }
                else
                {
                    <span class="badge badge-ghost gap-2" style="padding: 10px 16px; font-size: 14px; border-radius: 8px; background: #e5e7eb; color: #6b7280; font-weight: 600;">
                        üîì Unlinked
                    </span>
                }

                @if (Transaction.DataValidation)
                {
                    <span class="badge badge-error gap-2" style="padding: 10px 16px; font-size: 14px; border-radius: 8px; background: #ef4444; color: white; font-weight: 600;">
                        ‚ö†Ô∏è Data validation required
                    </span>
                }
            </div>

            <!-- Main Content - Single Column Layout -->
            <div class="space-y-4 mb-6" style="display: flex; flex-direction: column; gap: 20px;">
                <!-- Basic Information -->
                    <div class="card" style="background: #f9fafb; border-radius: 12px; border: 1px solid #e5e7eb; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);">
                        <div class="card-body p-4" style="padding: 20px;">
                            <h4 class="font-semibold text-lg mb-3" style="color: #1f2937; font-size: 18px; font-weight: 700; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
                                üìã Basic information
                            </h4>
                            
                            <div class="space-y-2" style="display: flex; flex-direction: column; gap: 12px;">
                                <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                                    <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Source:</span>
                                    <span class="font-medium" style="color: #1f2937; font-weight: 600; font-size: 14px;">@(Transaction.Source?.Name ?? "N/A")</span>
                                </div>
                                <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                                    <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Email:</span>
                                    <span class="font-medium" style="color: #1f2937; font-weight: 600; font-size: 14px;">@Transaction.Email</span>
                                </div>
                                <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                                    <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Transaction date:</span>
                                    <span class="font-medium" style="color: #1f2937; font-weight: 600; font-size: 14px;">@Transaction.TransactionDate.ToString("dd/MM/yyyy")</span>
                                </div>
                                @if (Transaction.AuthorizationDate != null)
                                {
                                    <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                                        <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Authorization date:</span>
                                        <span class="font-medium" style="color: #1f2937; font-weight: 600; font-size: 14px;">@Transaction.AuthorizationDate.Value.ToString("dd/MM/yyyy")</span>
                                    </div>
                                }
                                <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0;">
                                    <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Type:</span>
                                    <span class="font-medium" style="color: #1f2937; font-weight: 600; font-size: 14px;">@(Transaction.TransactionType ?? "N/A")</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Vendor Information -->
                    <div class="card" style="background: #f9fafb; border-radius: 12px; border: 1px solid #e5e7eb; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);">
                        <div class="card-body p-4" style="padding: 20px;">
                            <h4 class="font-semibold text-lg mb-3" style="color: #1f2937; font-size: 18px; font-weight: 700; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
                                üè™ Vendor information
                            </h4>
                            
                            <div class="space-y-2" style="display: flex; flex-direction: column; gap: 12px;">
                                <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                                    <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Vendor:</span>
                                    <span class="font-medium" style="color: #1f2937; font-weight: 600; font-size: 14px;">@(Transaction.Vendor ?? "N/A")</span>
                                </div>
                                @if (!string.IsNullOrEmpty(Transaction.MerchantCategory))
                                {
                                    <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                                        <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Merchant category:</span>
                                        <span class="font-medium" style="color: #1f2937; font-weight: 600; font-size: 14px;">@Transaction.MerchantCategory</span>
                                    </div>
                                }
                                @if (!string.IsNullOrEmpty(Transaction.Address))
                                {
                                    <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0;">
                                        <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Address:</span>
                                        <span class="font-medium text-sm" style="color: #1f2937; font-weight: 600; font-size: 14px;">@Transaction.Address</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Category & Classification -->
                    <div class="card" style="background: #f9fafb; border-radius: 12px; border: 1px solid #e5e7eb; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);">
                        <div class="card-body p-4" style="padding: 20px;">
                            <h4 class="font-semibold text-lg mb-3" style="color: #1f2937; font-size: 18px; font-weight: 700; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
                                üìÇ Category & classification
                            </h4>
                            
                            <div class="space-y-2" style="display: flex; flex-direction: column; gap: 12px;">
                                <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                                    <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Category:</span>
                                    <span class="font-medium" style="color: #1f2937; font-weight: 600; font-size: 14px;">@(Transaction.Category?.Name ?? "Uncategorized")</span>
                                </div>
                                @if (!string.IsNullOrEmpty(Transaction.Policy))
                                {
                                    <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0; border-bottom: 1px solid #e5e7eb;">
                                        <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Policy:</span>
                                        <span class="font-medium text-sm" style="color: #1f2937; font-weight: 600; font-size: 14px;">@Transaction.Policy</span>
                                    </div>
                                }
                                @if (Transaction.CabinClass != null)
                                {
                                    <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center; padding: 8px 0;">
                                        <span class="text-gray-600" style="color: #6b7280; font-size: 14px;">Cabin class:</span>
                                        <span class="font-medium" style="color: #1f2937; font-weight: 600; font-size: 14px;">@Transaction.CabinClass.Name</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Amount Information -->
                    <div class="card" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 12px; border: none; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                        <div class="card-body p-4" style="padding: 24px;">
                            <h4 class="font-semibold text-lg mb-3" style="color: white; font-size: 18px; font-weight: 700; margin-bottom: 16px; display: flex; align-items: center; gap: 8px;">
                                üí∞ Amount information
                            </h4>
                            
                            <div class="space-y-2" style="display: flex; flex-direction: column; gap: 16px;">
                                <div class="flex justify-between items-center" style="display: flex; justify-content: space-between; align-items: center;">
                                    <span style="color: rgba(255, 255, 255, 0.9); font-size: 14px;">Amount:</span>
                                    <span class="font-bold text-xl" style="color: white; font-weight: 700; font-size: 24px;">
                                        @Transaction.Currency @Transaction.Amount.ToString("N2")
                                    </span>
                                </div>
                                @if (Transaction.AmountUSD != null)
                                {
                                    <div class="flex justify-between items-center" style="display: flex; justify-content: space-between; align-items: center; padding: 16px; background: rgba(255, 255, 255, 0.2); border-radius: 8px; backdrop-filter: blur(10px);">
                                        <span style="color: white; font-size: 14px;">Amount (USD):</span>
                                        <span class="font-bold text-xl" style="color: white; font-weight: 700; font-size: 28px;">
                                            $@Transaction.AmountUSD.Value.ToString("N2")
                                        </span>
                                    </div>
                                }
                                @if (Transaction.ExchangeRate != null)
                                {
                                    <div class="flex justify-between" style="display: flex; justify-content: space-between; align-items: center;">
                                        <span style="color: rgba(255, 255, 255, 0.9); font-size: 14px;">Exchange rate:</span>
                                        <span class="font-medium" style="color: white; font-weight: 600; font-size: 14px;">@Transaction.ExchangeRate.Value.ToString("N6")</span>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                <!-- Trip Information -->
                @if (Transaction.TripId != null && Transaction.Trip != null)
                {
                    <div class="card bg-base-200">
                            <div class="card-body p-4">
                                <h4 class="font-semibold text-lg mb-3">üß≥ Linked trip</h4>
                                
                                <div class="space-y-2">
                                    <div class="flex justify-between">
                                        <span class="text-gray-600">Trip name:</span>
                                        <span class="font-medium">@Transaction.Trip.TripName</span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-600">Dates:</span>
                                        <span class="font-medium">
                                            @Transaction.Trip.StartDate.ToString("dd/MM/yyyy") - @Transaction.Trip.EndDate.ToString("dd/MM/yyyy")
                                        </span>
                                    </div>
                                    <div class="flex justify-between">
                                        <span class="text-gray-600">Destination:</span>
                                        <span class="font-medium">@Transaction.Trip.Country1</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }

                <!-- Booking Information -->
                @if (!string.IsNullOrEmpty(Transaction.BookingId) || !string.IsNullOrEmpty(Transaction.SourceTripId))
                {
                    <div class="card bg-base-200">
                            <div class="card-body p-4">
                                <h4 class="font-semibold text-lg mb-3">Booking information</h4>
                                
                                <div class="space-y-2">
                                    @if (!string.IsNullOrEmpty(Transaction.BookingId))
                                    {
                                        <div class="flex justify-between">
                                            <span class="text-gray-600">Booking ID:</span>
                                            <span class="font-medium">@Transaction.BookingId</span>
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(Transaction.SourceTripId))
                                    {
                                        <div class="flex justify-between">
                                            <span class="text-gray-600">Source trip ID:</span>
                                            <span class="font-medium">@Transaction.SourceTripId</span>
                                        </div>
                                    }
                                    @if (Transaction.BookingStartDate != null)
                                    {
                                        <div class="flex justify-between">
                                            <span class="text-gray-600">Booking dates:</span>
                                            <span class="font-medium">
                                                @Transaction.BookingStartDate.Value.ToString("dd/MM/yyyy")
                                                @if (Transaction.BookingEndDate != null)
                                                {
                                                    <text> - @Transaction.BookingEndDate.Value.ToString("dd/MM/yyyy")</text>
                                                }
                                            </span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }

                <!-- Participants -->
                @if (!string.IsNullOrEmpty(Transaction.Participants))
                {
                    <div class="card bg-base-200">
                            <div class="card-body p-4">
                                <h4 class="font-semibold text-lg mb-3">üë• Participants</h4>
                                <p class="text-sm">@Transaction.Participants</p>
                                @if (Transaction.ParticipantsValidated)
                                {
                                    <span class="badge badge-success badge-sm mt-2">‚úÖ Validated</span>
                                }
                                else
                                {
                                    <span class="badge badge-warning badge-sm mt-2">‚ö†Ô∏è Not validated</span>
                                }
                            </div>
                        </div>
                    }

                <!-- Document -->
                @if (!string.IsNullOrEmpty(Transaction.DocumentUrl))
                {
                    <div class="card bg-base-200">
                            <div class="card-body p-4">
                                <h4 class="font-semibold text-lg mb-3">üìé Documentation</h4>
                                <a href="@Transaction.DocumentUrl" target="_blank" class="btn btn-sm btn-outline btn-primary">
                                    View document
                                </a>
                            </div>
                        </div>
                    }
            </div>

            <!-- Notes -->
            @if (!string.IsNullOrEmpty(Transaction.Notes))
            {
                <div class="card bg-base-200 mb-6">
                    <div class="card-body p-4">
                        <h4 class="font-semibold text-lg mb-2">üìù Notes</h4>
                        <p class="text-sm">@Transaction.Notes</p>
                    </div>
                </div>
            }

            <!-- System Information -->
            <div class="card bg-base-200 mb-6">
                <div class="card-body p-4">
                    <h4 class="font-semibold text-lg mb-3">üîß System information</h4>
                    
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                        <div>
                            <span class="text-gray-600">Created:</span>
                            <p class="font-medium">@Transaction.CreatedAt.ToString("dd/MM/yyyy HH:mm:ss")</p>
                        </div>
                        <div>
                            <span class="text-gray-600">Last modified:</span>
                            <p class="font-medium">@Transaction.ModifiedAt.ToString("dd/MM/yyyy HH:mm:ss")</p>
                        </div>
                        <div>
                            <span class="text-gray-600">Modified by:</span>
                            <p class="font-medium">@(Transaction.ModifiedBy ?? "System")</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Actions -->
            <div class="modal-action" style="display: flex; justify-content: space-between; align-items: center; padding-top: 24px; border-top: 2px solid #e5e7eb; margin-top: 24px;">
                <!-- Left side action buttons -->
                <div style="display: flex; flex-wrap: wrap; gap: 12px;">
                    @if (OnEdit.HasDelegate)
                    {
                        <button class="btn btn-primary" @onclick="HandleEdit" style="padding: 12px 24px; font-size: 14px; font-weight: 600; border-radius: 8px; background: #3b82f6; color: white; border: none; cursor: pointer; transition: all 0.2s;">
                            ‚úèÔ∏è Edit
                        </button>
                    }
                    
                    @if (OnDelete.HasDelegate && !Transaction.IsValid)
                    {
                        <button class="btn btn-error" @onclick="HandleDelete" style="padding: 12px 24px; font-size: 14px; font-weight: 600; border-radius: 8px; background: #ef4444; color: white; border: none; cursor: pointer; transition: all 0.2s;">
                            üóëÔ∏è Delete
                        </button>
                    }

                    @if (OnLinkToTrip.HasDelegate && Transaction.TripId == null)
                    {
                        <button class="btn btn-info" @onclick="HandleLinkToTrip" style="padding: 12px 24px; font-size: 14px; font-weight: 600; border-radius: 8px; background: #06b6d4; color: white; border: none; cursor: pointer; transition: all 0.2s;">
                            üîó Link to trip
                        </button>
                    }

                    @if (OnSplit.HasDelegate)
                    {
                        <button class="btn btn-accent" @onclick="HandleSplit" style="padding: 12px 24px; font-size: 14px; font-weight: 600; border-radius: 8px; background: #8b5cf6; color: white; border: none; cursor: pointer; transition: all 0.2s;">
                            ‚úÇÔ∏è Split transaction
                        </button>
                    }

                    @if (OnGenerateMessage.HasDelegate)
                    {
                        <button class="btn btn-outline" @onclick="HandleGenerateMessage" style="padding: 12px 24px; font-size: 14px; font-weight: 600; border-radius: 8px; background: white; color: #3b82f6; border: 2px solid #3b82f6; cursor: pointer; transition: all 0.2s;">
                            üìß Generate message
                        </button>
                    }
                </div>

                <!-- Right side buttons (Close and Mark as Valid) -->
                <div style="display: flex; gap: 12px; align-items: center;">
                    @if (!Transaction.IsValid)
                    {
                        <button class="btn btn-success" @onclick="HandleMarkValid" style="padding: 12px 24px; font-size: 14px; font-weight: 600; border-radius: 8px; background: #10b981; color: white; border: none; cursor: pointer; transition: all 0.2s;">
                            ‚úÖ Mark as valid
                        </button>
                    }

                    <button class="btn btn-ghost" @onclick="Close" style="padding: 12px 24px; font-size: 14px; font-weight: 600; border-radius: 8px; background: #f3f4f6; color: #6b7280; border: none; cursor: pointer; transition: all 0.2s;">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Alert Dialog -->
<AlertDialog @ref="alertDialog"
             IsVisible="showAlertDialog"
             Title="@alertTitle"
             Message="@alertMessage"
             Type="@alertType"
             OnClose="CloseAlertDialog" />

<!-- Confirm Dialog -->
<ConfirmDialog @ref="confirmDialog"
               IsVisible="showConfirmDialog"
               Title="@confirmTitle"
               Message="@confirmMessage"
               Icon="@confirmIcon"
               ConfirmButtonText="@confirmButtonText"
               ConfirmButtonClass="@confirmButtonClass"
               OnResult="HandleConfirmResult" />

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public Transaction? Transaction { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Transaction> OnEdit { get; set; }
    [Parameter] public EventCallback<Transaction> OnDelete { get; set; }
    [Parameter] public EventCallback<Transaction> OnLinkToTrip { get; set; }
    [Parameter] public EventCallback<Transaction> OnSplit { get; set; }
    [Parameter] public EventCallback<Transaction> OnGenerateMessage { get; set; }

    // Alert Dialog state
    private AlertDialog? alertDialog;
    private bool showAlertDialog = false;
    private string alertTitle = "";
    private string alertMessage = "";
    private AlertDialog.AlertType alertType = AlertDialog.AlertType.Info;

    // Confirm Dialog state
    private ConfirmDialog? confirmDialog;
    private bool showConfirmDialog = false;
    private string confirmTitle = "";
    private string confirmMessage = "";
    private string confirmIcon = "‚ö†Ô∏è";
    private string confirmButtonText = "Confirm";
    private string confirmButtonClass = "btn-primary";
    private Func<Task>? pendingConfirmAction;

    private void ShowAlert(string title, string message, AlertDialog.AlertType type)
    {
        alertTitle = title;
        alertMessage = message;
        alertType = type;
        showAlertDialog = true;
        StateHasChanged();
    }

    private void CloseAlertDialog()
    {
        showAlertDialog = false;
        StateHasChanged();
    }

    private void ShowConfirm(string title, string message, Func<Task> onConfirm, string icon = "‚ö†Ô∏è", string buttonText = "Confirm", string buttonClass = "btn-primary")
    {
        confirmTitle = title;
        confirmMessage = message;
        confirmIcon = icon;
        confirmButtonText = buttonText;
        confirmButtonClass = buttonClass;
        pendingConfirmAction = onConfirm;
        showConfirmDialog = true;
        StateHasChanged();
    }

    private async Task HandleConfirmResult(bool confirmed)
    {
        showConfirmDialog = false;
        
        if (confirmed && pendingConfirmAction != null)
        {
            await pendingConfirmAction();
        }
        
        pendingConfirmAction = null;
        StateHasChanged();
    }

    private async Task Close()
    {
        IsVisible = false;
        await OnClose.InvokeAsync();
    }

    private async Task HandleEdit()
    {
        if (Transaction != null)
        {
            await OnEdit.InvokeAsync(Transaction);
        }
    }

    private async Task HandleDelete()
    {
        if (Transaction != null)
        {
            ShowConfirm(
                "Delete Transaction",
                $"Are you sure you want to delete transaction {Transaction.TransactionId}?",
                async () =>
                {
                    await OnDelete.InvokeAsync(Transaction);
                    await Close();
                },
                "üóëÔ∏è",
                "Delete",
                "btn-error"
            );
        }
    }

    private async Task HandleLinkToTrip()
    {
        if (Transaction != null)
        {
            await OnLinkToTrip.InvokeAsync(Transaction);
        }
    }

    private async Task HandleSplit()
    {
        if (Transaction != null)
        {
            await OnSplit.InvokeAsync(Transaction);
        }
    }

    private async Task HandleGenerateMessage()
    {
        if (Transaction != null)
        {
            await OnGenerateMessage.InvokeAsync(Transaction);
        }
    }

    private async Task HandleMarkValid()
    {
        if (Transaction != null)
        {
            try
            {
                await TransactionService.MarkAsValidAsync(Transaction.TransactionId);
                Transaction.IsValid = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                ShowAlert("Error Marking Valid", $"Error marking transaction as valid: {ex.Message}", AlertDialog.AlertType.Error);
            }
        }
    }
}
