@using TravelOperation.Core.Services
@using TravelOperation.Core.Models
@inject IAuthenticationService AuthService
@inject NavigationManager Navigation

@if (isAuthorized)
{
    @ChildContent
}
else if (showUnauthorized)
{
    <div class="unauthorized-access">
        <div class="unauthorized-content">
            <div class="icon">ðŸš«</div>
            <h2>Access Denied</h2>
            <p>You don't have permission to access this page.</p>
            <p>Required role: @string.Join(", ", RequiredRoles)</p>
            <p>Your role: @currentUserRole</p>
            <button class="btn btn-primary" @onclick="GoToDashboard">
                Go to Dashboard
            </button>
        </div>
    </div>
}

<style>
    .unauthorized-access {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 60vh;
        padding: 2rem;
    }

    .unauthorized-content {
        text-align: center;
        max-width: 400px;
        padding: 2rem;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .unauthorized-content .icon {
        font-size: 4rem;
        margin-bottom: 1rem;
    }

    .unauthorized-content h2 {
        color: #ef4444;
        margin-bottom: 1rem;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .unauthorized-content p {
        color: #6b7280;
        margin-bottom: 0.5rem;
        line-height: 1.5;
    }

    .unauthorized-content .btn {
        margin-top: 1.5rem;
        padding: 0.75rem 1.5rem;
        background: #3b82f6;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 500;
        transition: background-color 0.2s;
    }

    .unauthorized-content .btn:hover {
        background: #2563eb;
    }
</style>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public List<string> RequiredRoles { get; set; } = new();
    [Parameter] public string? RequiredRole { get; set; }
    [Parameter] public bool ShowUnauthorized { get; set; } = true;

    private bool isAuthorized = false;
    private bool showUnauthorized = false;
    private string currentUserRole = "";

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthorization();
    }

    private async Task CheckAuthorization()
    {
        try
        {
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            
            if (!isAuthenticated)
            {
                // Not authenticated, redirect to login
                Navigation.NavigateTo("/login");
                return;
            }

            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            currentUserRole = currentUser.Role;

            // Build list of required roles
            var requiredRoles = new List<string>(RequiredRoles);
            if (!string.IsNullOrEmpty(RequiredRole))
            {
                requiredRoles.Add(RequiredRole);
            }

            // If no specific roles required, allow all authenticated users
            if (requiredRoles.Count == 0)
            {
                isAuthorized = true;
                return;
            }

            // Check if user has required role
            isAuthorized = requiredRoles.Contains(currentUser.Role);
            
            if (!isAuthorized && ShowUnauthorized)
            {
                showUnauthorized = true;
            }
            else if (!isAuthorized)
            {
                // Redirect to dashboard if not showing unauthorized message
                Navigation.NavigateTo("/dashboard");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"AuthorizeRoleView: Error checking authorization: {ex.Message}");
            Navigation.NavigateTo("/login");
        }
    }

    private void GoToDashboard()
    {
        Navigation.NavigateTo("/dashboard");
    }
}